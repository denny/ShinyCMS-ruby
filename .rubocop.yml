# ShinyCMS ~ https://shinycms.org
#
# Copyright 2009-2021 Denny de la Haye ~ https://denny.me
#
# ShinyCMS is free software; you can redistribute it and/or modify it under the terms of the GPL (version 2 or later)

inherit_from: .rubocop_todo.yml

require:
  - rubocop-performance
  - rubocop-rails
  - rubocop-rspec

AllCops:
  EnabledByDefault: true
  Exclude:
    # Not Ruby files (skipping these makes Rubocop run faster)
    - app/assets/**/*
    - bin/*
    - coverage/**/*
    - docs/**/*
    - log/*
    - node_modules/**/*
    - plugins/*/app/assets/**/*
    - public/**/*
    - themes/**/*
    - tmp/**/*
    - tools/**/*
    # Code autogenerated by ActiveRecord spectacularly fails Rubocop
    - db/archived-migrations/*
    - db/migrate/*
    - db/schema.rb
    - plugins/*/db/migrate/*.rb

# These are allowed and expected to contain long blocks
Metrics/BlockLength:
  Exclude:
    - Gemfile
    - config/environments/*
    - config/routes.rb
    - lib/tasks/*.rake
    - plugins/Shiny*/config/routes.rb
    - plugins/Shiny*/shiny_*.gemspec
    - plugins/Shiny*/spec/**/*.rb
    - plugins/ShinyCMS/app/models/concerns/shinycms/*.rb
    - spec/**/*.rb

# Spec files with I18n.t calls in them are more readable with longer single lines
# than they are with shorter split lines, and the demo data file is auto-generated.
Layout/LineLength:
  Exclude:
    - spec/**/*.rb
    - plugins/*/spec/**/*.rb
    - db/demo_data.rb

# This config file is easier to understand laid out as it is, not as this cop wants it
Layout/MultilineArrayLineBreaks:
  Exclude:
    - config/initializers/html_sanitizer.rb

# This method is not useless - it allows user registrations to be feature-flagged
Lint/UselessMethodDefinition:
  Exclude:
    - plugins/ShinyCMS/app/controllers/shinycms/users/registrations_controller.rb

# ðŸ’Ž PersistentðŸ’Ž method names and include statements (and some related comments)     ðŸ’Ž
# ðŸ’Ž Yes, they are frivolous and impractical; that's my favourite thing about them ðŸ˜ƒ ðŸ’Ž
Naming/AsciiIdentifiers:
  Exclude:
    - plugins/ShinyCMS/app/models/shinycms/plugin.rb
    - plugins/ShinyCMS/app/models/shinycms/plugins.rb
    - plugins/ShinyCMS/app/models/concerns/shinycms/plugins_components.rb
Style/AsciiComments:
  Exclude:
    - plugins/ShinyCMS/app/models/shinycms/plugin.rb
    - plugins/ShinyCMS/app/models/shinycms/plugins.rb
    - plugins/ShinyCMS/app/models/concerns/shinycms/plugins_components.rb

# I like chaining methods, it's aesthetically pleasing :-p
Performance/ChainArrayAllocation:
  Enabled: false

# This is the (hopefully helpful) 'how to create an admin account' message displayed after seed data loads
Rails/Output:
  Exclude:
    - db/seeds.rb

# This code is intentionally and helpfully rewriting a bit of HTML
Rails/OutputSafety:
  Exclude:
    - config/initializers/field_with_errors.rb

# This isn't an ActiveRecord create method
Rails/SaveBang:
  Exclude:
    - plugins/ShinySEO/app/models/shiny_seo/sitemap.rb

# There's no database activity in these before all blocks, so this cop doesn't apply
RSpec/BeforeAfterAll:
  Exclude:
    - plugins/ShinyCMS/spec/models/shinycms/theme_spec.rb
    - plugins/ShinyCMS/spec/support/faker.rb

# Currently inclined to keep this approach, for readability etc
RSpec/DescribedClassModuleWrapping:
  Enabled: false

# This is ignoring config/initializers/inflections.rb (as about half of Rails does)
RSpec/FilePath:
  Exclude:
    - plugins/ShinyCMS/spec/**/shinycms/**/*_spec.rb

# Disabling these two for now (but open to discussion/persuasion on their merits)
RSpec/ExampleLength:
  Enabled: false
RSpec/MultipleExpectations:
  Enabled: false

# If I skip a spec temporarily, there's probably a reason!
RSpec/Pending:
  Enabled: false

# Disabling this allows 'compact' class names, e.g. Admin::PagesController
Style/ClassAndModuleChildren:
  Enabled: false

# I prefer collect to map
Style/CollectionMethods:
  PreferredMethods:
    map: collect

# I think this makes code significantly harder to read, personally
Style/ConditionalAssignment:
  Enabled: false

# Disabling cops for a few lines here and there is handy
Style/DisableCopsWithinSourceCodeDirective:
  Enabled: false

# The test is for a feature that parses a list of IP addresses; the demo data is demo data
Style/IpAddresses:
  Exclude:
    - db/demo_data.rb
    - plugins/ShinyCMS/spec/requests/shinycms/admin_controller_spec.rb

# I'd rather use one style of regex everywhere, and this one is clearer when working with URLs:
# %r{/(path)/parts/} rather than /\/(path)\/parts\//
Style/RegexpLiteral:
  Enabled: false

# Whitespace Considered Helpful
Layout/ExtraSpacing:
  Enabled: false
Layout/SpaceAroundBlockParameters:
  Enabled: false
Layout/SpaceInsideArrayLiteralBrackets:
  EnforcedStyle: space
Layout/SpaceInsideBlockBraces:
  EnforcedStyle: space
Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space
  Exclude:
    - db/demo_data.rb
Layout/SpaceInsideParens:
  EnforcedStyle: space
  Exclude:
    - db/demo_data.rb
Layout/SpaceInsidePercentLiteralDelimiters:
  Enabled: false
Layout/SpaceInsideReferenceBrackets:
  Enabled: false

# Alignment also considered helpful. And aesthetically pleasing.
Layout/HashAlignment:
  EnforcedColonStyle: table
  EnforcedHashRocketStyle: table

# Enabling these leads to less readable code in my opinion
Layout/MultilineMethodArgumentLineBreaks:
  Enabled: false
Layout/SpaceBeforeBrackets:
  Enabled: false
Lint/ConstantResolution:
  Enabled: false
Style/MethodCallWithArgsParentheses:
  Enabled: false

# The demo data is autogenerated, and not really formatted with humans in mind.
# Maybe I could run it through prettify or something though...
Layout/FirstArrayElementIndentation:
  Exclude:
    - db/demo_data.rb
Layout/FirstMethodArgumentLineBreak:
  Exclude:
    - db/demo_data.rb
Layout/LeadingEmptyLines:
  Exclude:
    - db/demo_data.rb
Layout/SpaceAroundOperators:
  Exclude:
    - db/demo_data.rb
Style/FrozenStringLiteralComment:
  Exclude:
    - db/demo_data.rb
Style/NumericLiterals:
  Exclude:
    - db/demo_data.rb
Style/StringHashKeys:
  Exclude:
    - db/demo_data.rb
Style/StringLiterals:
  Exclude:
    - db/demo_data.rb

# Potentially fixable at some point...
Lint/NumberConversion:
  Enabled: false
Style/InlineComment:
  Enabled: false
Style/MissingElse:
  Enabled: false

# I don't want to put copyright notices on autogenerated files that I haven't touched
Style/Copyright:
  Enabled: false

# Not every method needs a comment explaining what it does
Style/DocumentationMethod:
  Enabled: false

{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ShinyCMS Documentation","text":""},{"location":"#using-shinycms","title":"Using ShinyCMS","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li> <p>tl,dr - for the impatient :)</p> </li> <li> <p>Installation        - installing a local dev system</p> </li> <li>Configuration - where different things are configured</li> <li>External services  - required services and optional extras</li> <li>Demo site         - loading the demo site templates and data</li> <li>Themes               - start building your hosted site by creating a theme for it</li> </ul>"},{"location":"#cms-features","title":"CMS Features","text":"<ul> <li>User accounts</li> <li> <p>Admin features</p> </li> <li> <p>Basic CMS features</p> <ul> <li>Pages</li> <li>Inserts</li> <li>Form handlers</li> <li>Search</li> </ul> </li> <li> <p>Advanced CMS features</p> <ul> <li>Access control</li> </ul> </li> <li> <p>Post regular updates</p> <ul> <li>Blog</li> <li>News section</li> </ul> </li> <li> <p>Send promotional emails</p> <ul> <li>Mailing lists</li> <li>Newsletters</li> </ul> </li> <li> <p>Build a community</p> <ul> <li>Profile pages</li> <li>Comments</li> <li>Tags</li> <li>Upvotes ('likes')</li> </ul> </li> <li> <p>Settings and configuration</p> <ul> <li>Feature flags</li> <li>Site settings</li> </ul> </li> <li> <p>Stats and tracking</p> <ul> <li>Email stats</li> <li>Web stats</li> <li>Charts and dashboards</li> </ul> </li> <li> <p>MJML email templates</p> </li> <li> <p>Rake tasks</p> </li> </ul>"},{"location":"#contributing-to-shinycms-developer-documentation","title":"Contributing to ShinyCMS (developer documentation)","text":"<ul> <li> <p>Index</p> </li> <li> <p>Contributing</p> </li> <li> <p>Project goals</p> </li> <li> <p>Project progress:</p> <ul> <li>Done</li> <li>In progress</li> <li>To do</li> </ul> </li> <li> <p>Plugins</p> </li> <li>Testing</li> </ul>"},{"location":"#other","title":"Other","text":"<ul> <li> <p>Credits</p> </li> <li> <p>Release notes</p> </li> <li> <p>Licensing</p> <ul> <li>GPL v2</li> <li>GPL v3</li> </ul> </li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>This project has a Code of Conduct, which is intended to make using ShinyCMS, or contributing to it, a harassment-free experience for everybody involved - regardless of who they are and what they do or don't know.</p> <p>Please read and follow the code of conduct - thank you.</p>"},{"location":"Cloud-Hosting/","title":"ShinyCMS Documentation","text":""},{"location":"Cloud-Hosting/#cloud-hosting","title":"Cloud hosting","text":""},{"location":"Cloud-Hosting/#webserver","title":"Webserver","text":""},{"location":"Cloud-Hosting/#heroku","title":"Heroku","text":"<p>ShinyCMS has been tested with Heroku (currently, shinycms.org itself is hosted on Heroku).</p> <p>With the provided Procfile and supporting utility scripts, deployment on Heroku should be straightforward.</p>"},{"location":"Cloud-Hosting/#database","title":"Database","text":""},{"location":"Cloud-Hosting/#aws-rds-heroku-postgres-add-on","title":"AWS RDS / Heroku Postgres add-on","text":"<p>ShinyCMS has been tested with AWS RDS Postgres, and the Heroku Postgres add-on (which is just AWS RDS Postgres anyway).</p> <p>There is some documentation to help with copying the demo site data into a Heroku add-on database.</p>"},{"location":"Cloud-Hosting/#sending-email","title":"Sending email","text":"<p>If you enable any feature that sends email (user registrations, comment notifications, newsletters, etc), then you will need an email server or service. Anything supported by ActionMailer should work, but currently no cloud services have been tested, only standard SMTP.</p>"},{"location":"Cloud-Hosting/#cache","title":"Cache","text":""},{"location":"Cloud-Hosting/#heroku-redis","title":"Heroku Redis","text":"<p>If you are using any feature that uses ActiveJob (including any feature that sends emails), you will need a caching backend for Sidekiq. Only the Heroku Redis add-on has been tested, but anything supported by ActionJob should work.</p>"},{"location":"Cloud-Hosting/#file-storage","title":"File storage","text":""},{"location":"Cloud-Hosting/#aws-s3","title":"AWS S3","text":"<p>User uploaded files can be stored on AWS S3 instead of locally.</p> <p>To enable this feature you will need to have an AWS account, create an S3 bucket, and add the relevant keys to your ENV/config vars.</p> <p>AWS S3 offers a limited amount of free usage, followed by fairly inexpensive usage-based pricing.</p>"},{"location":"Configuration/","title":"ShinyCMS Documentation","text":""},{"location":"Configuration/#configuration","title":"Configuration","text":"<p>Configuration is split between the following locations:</p>"},{"location":"Configuration/#env-vars","title":"ENV vars","text":"<ul> <li>Mostly used for secrets (database details, API keys etc)</li> <li>Usually loaded from <code>.env*</code> files, or from Settings &gt; Config Vars on Heroku</li> <li>See <code>docs/env.sample</code> for a full list of available ENV settings</li> </ul>"},{"location":"Configuration/#feature-flags","title":"Feature Flags","text":"<ul> <li>Turn CMS features on (or off) for all users, logged-in only, or admin only</li> <li>Controlled in the CMS admin area - <code>/admin/feature-flags</code></li> <li>Can also be turned on or off, and listed, from the command line:</li> </ul> <pre><code>rails shinycms:features:list\nrails shinycms:feature:off[user_login]\n</code></pre>"},{"location":"Configuration/#site-settings","title":"Site Settings","text":"<ul> <li>Configuration of CMS options and features</li> <li>Controlled in the CMS admin area - <code>/admin/site-settings</code></li> </ul>"},{"location":"Configuration/#services","title":"Services","text":"<p>The external services listed below are optional. If you add config details for them (via a <code>.env*</code> file (see env.sample), or via your Config Vars on Heroku) then the related CMS features will be enabled or enhanced, otherwise those features will be unavailable or will have more limited functionality.</p>"},{"location":"Configuration/#akismet-spam-flagging","title":"Akismet - spam flagging","text":"<p>Comments can be passed to Akismet for its assessment of whether they are likely to be spam or not. Comments flagged as spam will be hidden on the main site and shown in an admin moderation queue.</p> <p>Processing comments in the moderation queue will send training data back to Akismet, which they use to improve their accuracy over time.</p>"},{"location":"Configuration/#aws-s3-file-storage","title":"AWS S3 - file storage","text":"<p>User uploaded files can be stored on AWS S3 instead of locally. To enable this feature you will need to have an AWS account, create an S3 bucket, and add the relevant keys to the ENV/config.</p>"},{"location":"Configuration/#bugsnag-error-monitoring","title":"Bugsnag - error monitoring","text":"<p>If you add a <code>BUGSNAG_API_KEY</code> then ShinyCMS will start reporting to your Bugsnag account.</p>"},{"location":"Configuration/#recaptcha-bot-protection","title":"reCAPTCHA - bot protection","text":"<p>User registration and posting comments can be protected from bots using Google's reCAPTCHA service. To enable this feature you will need to obtain keys and add them to your ENV/config. You will get the best results with a pair of V3 keys and a pair of V2 keys (this allows you to set a minimum score for each protected feature in your Site Settings area). At first reCAPTCHA tries an 'invisible' (non-interactive) check (V3 with score if configured, V2 otherwise), falling back to a V2 checkbox if that fails.</p>"},{"location":"Configuration/#other-services-used-no-config-required","title":"Other services used (no config required)","text":""},{"location":"Configuration/#have-i-been-pwned-password-leak-checking","title":"Have I Been Pwned - password leak checking","text":"<p>The user registration and login features use <code>Devise::PwnedPassword</code> to check user's passwords against https://haveibeenpwned.com/Passwords and warn the user if they find a match, but this doesn't require any setup on your part.</p>"},{"location":"Contributing/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Contributing/#contributing","title":"Contributing","text":"<p>If you're interested in contributing to ShinyCMS ... let me start by saying \"Thank you!\" :)</p> <p>If you already know what feature or fix you want to work on, then it's the usual process; fork the repo, do your thing, submit a PR when you have your new code working. Please make sure it has full test coverage.</p> <p>If you're generally interested in getting involved, but don't have a specific task in mind, here are some things to read that you might find useful:</p> <ul> <li> <p>Project goals</p> </li> <li> <p>Developer documentation</p> </li> </ul>"},{"location":"Contributing/#are-you-new-to-coding","title":"Are you new to coding?","text":"<p>You might want to start by looking at the issues tagged 'good first issue'; they're the ones that I think are particularly unlikely to turn into a nasty complicated mess halfway through. :)</p> <p>If you find something that you'd like to tackle, but you're not feeling entirely confident about it, please do get in touch with me. I'd love to help you if I can, whether that's by talking the problem through in more detail to make sure you feel like you understand it, or discussing possible solutions, or even pair-coding with you on the solution you (or we) decide to try - whatever you think is most likely to help you, both with the issue at hand, and more generally as a software developer.</p> <p>When I first started contributing to open source projects, I received a lot of incredibly valuable help and advice from more experienced developers - I would welcome more chances to pay that forward.</p>"},{"location":"Contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project has a Code of Conduct, which is intended to make using ShinyCMS, or contributing to it, a harassment-free experience for everybody involved - regardless of who they are and what they do or don't know.</p> <p>Please read and follow the code of conduct - thank you.</p>"},{"location":"Contributors/","title":"ShinyCMS Documentation","text":""},{"location":"Contributors/#credits","title":"Credits","text":"<p>An incomplete list of people who have helped, directly or indirectly, with the creation of this software:</p> <ul> <li> <p>Eliot Sykes (@esykes), for extensive advice on too many parts of the system to name, plus generally helping me to become a much better Ruby developer. I cannot recommend him highly enough as a coach for new (or new-to-Ruby) developers.</p> </li> <li> <p>aj (@ajkln) of HTML5 UP for the Halcyonic theme that the demo site uses, and the Coming Soon theme that is also included. All the great design in both themes is entirely aj's work (any errors will doubtless be mine, introduced as I cut the original HTML up to make view templates).</p> </li> <li> <p>Luigi (@007lva) for code quality improvements, as well as various helpful issue reports.</p> </li> <li> <p>Maximo (@maxvlc) for reporting early issues with running the demo site.</p> </li> <li> <p>Michael Snook (@michaelsnook) and Ed Saperia (@edsaperia), for numerous contributions to the brainstorming around mailing lists and related features.</p> </li> <li> <p>Paul Cochrane (@paultcochrane) for improvements to the documentation.</p> </li> <li> <p>Pierre-Jean Camillieri (@thingista), for maintaining a useful list of English language acronyms.</p> </li> <li> <p>Everybody who contributed code, thinking, bug reports, and feature requests to the original ShinyCMS.</p> </li> </ul> <p>Thank you all, very much :)</p> <p>(If your name should be on this list but it isn't, please nudge me to add it!)</p>"},{"location":"INSTALL/","title":"ShinyCMS Documentation","text":""},{"location":"INSTALL/#installation-local-dev-system","title":"Installation (local dev system)","text":"<p>Get the code from GitHub:  </p> <pre><code>git clone https://github.com/denny/ShinyCMS-ruby.git\ncd ShinyCMS-ruby\n</code></pre> <p>Copy the example config file and edit it to suit your requirements (in particular, you might need to set your DATABASE_URL): <code>cp docs/env.sample .env.development.local</code></p> <p>Install the required Ruby and JavaScript libraries:  </p> <pre><code>bundle install\nyarn install\n</code></pre> <p>Create your database: <code>rails db:setup</code></p> <p>If you want to load the demo data: <code>rails shiny:demo:load</code></p> <p>If you didn't load the demo data, create an admin account: <code>rails shiny:admin:create</code></p> <p>Start the server: <code>rails s</code></p> <p>You should now have a ShinyCMS site at http://localhost:3000, with an admin area at http://localhost:3000/admin</p>"},{"location":"INSTALL/#job-queues-for-sending-email","title":"Job queues (for sending email)","text":"<p>If you want the system to send emails, you will need to run Sidekiq, which in turn requires you to run Redis:  </p> <pre><code>sudo service start redis  # or whatever your OS prefers\nsidekiq\n</code></pre>"},{"location":"INSTALL/#creating-an-admin-account","title":"Creating an admin account","text":"<p>When you load or reload the seed data (any of <code>rails db:setup</code>, <code>rails db:reset</code>, and <code>rails db:seed</code> will do this), the system checks that you have at least one 'super admin' user (an admin with the ability to add/remove admin users). If one does not already exist, you will be shown the command to create one: <code>rails shiny:admin:create</code></p> <p>When you run this command you will be prompted for a username, email address, and password for your new admin user, and then the account will be created with a full set of admin capabilities.</p> <p>(The password will be checked against the PwnedPassword service, even for dev/demo sites, and simple or common passwords are very likely to fail this check. Use a good password to avoid frustration!)</p> <p>If you are resetting your database or reloading the demo data a lot, you can save your chosen admin account details into your .env.development.local file and they will be picked up automatically during admin account creation, to save you typing them each time. This has obvious security implications, depending on who else might have (or gain) access to your filesystem.</p>"},{"location":"INSTALL/#blazer-database-user-for-charts-and-dashboards","title":"Blazer database user (for charts and dashboards)","text":"<p>If you intend to use Blazer to generate charts and dashboards, you will need to create a read-only database user for Blazer (sample SQL) and add its details to your ENV/config as <code>BLAZER_DATABASE_URL</code>.</p>"},{"location":"INSTALL/#configuration","title":"Configuration","text":"<p>Configuration is split between ENV vars (usually in .env* files), Feature Flags, and Site Settings. See configuration for more details of each.</p>"},{"location":"INSTALL/#background-tasks","title":"Background tasks","text":"<p>You may wish to schedule one or more rake tasks to run on a regular basis (e.g. hourly/daily), depending on your requirements.</p>"},{"location":"INSTALL/#themes","title":"Themes","text":"<p>To build a site on top of ShinyCMS, you should start by creating a theme for it. This keeps your site layout and design tweaks separate from the default CMS templates, making future updates to the CMS easier to manage.</p>"},{"location":"Services/","title":"ShinyCMS Documentation","text":""},{"location":"Services/#required-services","title":"Required services","text":"<p>You will need a web server. As far as I am aware, any Rails-compatible web server should work.</p> <p>You will need a database server. Currently this almost certainly needs to be Postgres-compatible (patches to be more database-agnostic welcome).</p> <p>If you enable any feature that sends email (user registrations, comment notifications, newsletters, etc), then you will need an email server. Anything supported by ActionMailer should work.</p> <p>For email, and possibly for other features, you will also need a job queue and a caching backend for it. Only Sidekiq + Redis have been tested, but anything compatible with ActionJob could potentially work.</p>"},{"location":"Services/#optional-services","title":"Optional services","text":"<p>The external services listed below are optional. If you add config details for them (via a .env* file locally (see env.sample), or via Config Vars on Heroku) then the related CMS features will be enabled or enhanced. Otherwise those features will be unavailable or will have more limited functionality.</p>"},{"location":"Services/#aws-s3-file-storage","title":"AWS S3 - file storage","text":"<p>User uploaded files can be stored on AWS S3 instead of locally.</p> <p>To enable this feature you will need to have an an AWS account, create an S3 bucket, and add the relevant keys to your ENV/config vars.</p> <p>AWS S3 offers a limited amount of free usage, followed by fairly inexpensive usage-based pricing.</p>"},{"location":"Services/#recaptcha-bot-protection","title":"reCAPTCHA - bot protection","text":"<p>User registration and posting comments can be protected from bots using Google's reCAPTCHA service.</p> <p>To enable this feature you will need to obtain keys and add them to your ENV/config vars.</p> <p>You will get the best results with a pair of V3 keys and a pair of V2 keys (this allows you to set a minimum score for each protected feature in your Site Settings area). At first reCAPTCHA tries an 'invisible' (non-interactive) check (V3 with score if configured, V2 otherwise), falling back to a V2 checkbox if that fails.</p> <p>Google reCAPTCHA is free at any usage level.</p>"},{"location":"Services/#akismet-spam-flagging","title":"Akismet - spam flagging","text":"<p>Comments can be passed to Akismet for its assessment of whether they are likely to be spam or not. Comments flagged as spam will be hidden on the main site and shown in an admin moderation queue. Processing comments in the moderation queue will send training data back to Akismet, which they use to improve their accuracy over time.</p> <p>To enable these features you will need to create an account at Akismet, and set the appropriate keys in your ENV/config vars.</p> <p>Akismet offer a limited free service, and a variety of paid plans for busier sites.</p>"},{"location":"Services/#other-services","title":"Other services","text":""},{"location":"Services/#have-i-been-pwned-password-leak-checking","title":"Have I Been Pwned - password leak checking","text":"<p>The user registration, login, and change password features use Devise::PwnedPassword to check user's passwords against the PwnedPasswords service. If a match is found during registration or a password change then the user will have to choose a different password to complete the process. If a match is found during login, the user will be warned about the match.</p> <p>You do not need to set up or configure anything to use this service in ShinyCMS - it is enabled by default - and it is free.</p>"},{"location":"Themes/","title":"ShinyCMS: Themes","text":"<p>The recommended way to start building a new site on ShinyCMS is to create a theme for it (unless you intend to use one of the default themes, with no modifications and no additional templates required).</p>"},{"location":"Themes/#making-a-theme","title":"Making a theme","text":"<p>ShinyCMS falls back to the default template set whenever a template it needs is not present in the currently configured theme - which means that you can start building your own theme by simply creating a subdirectory for it in <code>/themes</code> - e.g. <code>/themes/my_site_name</code>. Even an empty directory is a valid theme (although not a very interesting one) :)</p> <p>Because themes are based on a directory in the <code>/themes</code> folder, valid theme names must be valid directory names on whatever operating system you intend to deploy ShinyCMS on. Something in <code>snake_case</code> is a safe bet on most platforms... e.g. <code>/themes/my_site_name</code></p> <p>Keeping your site's changes separated out into your own theme means that you can fetch future updates to the ShinyCMS default templates without that overwriting any customisations you have made to templates for your own site. Instead, the new default templates can be used as a reference guide for any updates you might need to make to your theme templates.</p>"},{"location":"Themes/#overriding-the-default-templates","title":"Overriding the default templates","text":"<p>Once you've created your theme directory, create a views directory inside it - e.g. <code>themes/my_site_name/views/</code> - then copy any template that you want to edit or override into that directory and make your desired changes. ShinyCMS will give templates in your theme preference over the default templates whenever you tell it to use your theme.</p> <p>Your theme templates need to be kept in the same structure they have in the main app and plugin <code>app/views</code> folders for the overriding to work correctly. For example, if you are overriding the main site footer template then you would start with <code>cp app/views/shinycms/includes/_footer.html.erb themes/my_site_name/views/includes/</code>. If you're overriding the index page for the ShinyBlog plugin, you would start with <code>cp plugins/ShinyBlog/app/views/shiny_blog/blog/index.html.erb themes/my_site_name/views/shiny_blog/blog/</code>.</p>"},{"location":"Themes/#creating-template-files-for-templated-content-pages-newsletters","title":"Creating template files for templated content (Pages, Newsletters)","text":"<p>You will need to create your own template files for any template-controlled content you have in the CMS, and create the appropriate Template entries in the admin area. For most people this will include the Templates to define the layout of the content section of your Pages, and if you're using the Newsletters feature you'll need to create at least one pair of Templates (MJML and plain text) for the content section of those.</p> <p>There are sample templates for both of these features in the included Halcyonic theme, to get you started.</p>"},{"location":"Themes/#supporting-files","title":"Supporting files","text":""},{"location":"Themes/#images-and-stylesheets","title":"Images and stylesheets","text":"<p>You should put theme-specific CSS into <code>themes/{theme_name}/stylesheets</code> and images into <code>themes/{theme_name}/images</code> - so for our example 'my_site_name' theme, these would be <code>themes/my_site_name/stylesheets</code> and <code>themes/my_site_name/images</code>.</p>"},{"location":"Themes/#javascript","title":"JavaScript","text":"<p>Currently, if your theme needs some JavaScript then you should put the files in <code>themes/javascript/my_site_name</code>. Eventually the plan is that theme JavaScript will go in <code>/themes/my_site_name/javascript</code>, but for now this is how it works.</p>"},{"location":"Themes/#using-your-theme","title":"Using your theme","text":"<p>The default theme can be set in ENV['SHINYCMS_THEME'] and on the Settings page in the admin area. If both are set, the latter takes priority.</p> <p>You can also choose to make this setting user-overridable, in which case a user's setting will take priority for them - but this configuration is experimental and currently untested.</p>"},{"location":"code-of-conduct/","title":"ShinyCMS: Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behaviour that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behaviour by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behaviour and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behaviour.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviour that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code-of-conduct/#reporting","title":"Reporting","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behaviour may be reported by contacting the project lead at 2025@denny.me - all complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project lead is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"demo-site/","title":"ShinyCMS Documentation","text":""},{"location":"demo-site/#demo-site","title":"Demo site","text":""},{"location":"demo-site/#theme-templates","title":"Theme / templates","text":"<p>The demo site uses the Halcyonic theme, whose templates are currently included with a standard install of the CMS. This may change in future, but for now you will already have the demo site theme templates in place.</p>"},{"location":"demo-site/#demo-data","title":"Demo data","text":"<p>There is a set of demo data available, which adds a small amount of content for each of the CMS features. This allows you to try out most of these features without having to invent and input your own test data first.</p> <p>NB: Loading the demo data will wipe the current contents of the database. Before you run this rake task, back up any data that you don't want to lose.</p> <p>To load the demo data: <code>rails shiny:demo:load</code> (and reply 'Y' to the 'Are you sure?' question)</p>"},{"location":"demo-site/#heroku","title":"Heroku","text":"<p>You can run a test/demo install of ShinyCMS on Heroku for free, using free dynos for web and worker, and 'Hobby Dev' add-ons for Postgres and Redis. A suitable Procfile is provided.</p>"},{"location":"demo-site/#loading-the-demo-site-data-on-heroku","title":"Loading the demo site data on Heroku","text":"<p>To load the demo data into a Heroku Postgres add-on, first load it locally using the instructions above and in the installation guide, then use the following commands to upload it to your Heroku Postgres add-on database (substituting your own app name and heroku pg instance name, obviously):</p> <pre><code>heroku pg:reset postgresql-something-99999 --app my-app-name --confirm my-app-name\nheroku pg:push shinycms postgresql-something-99999 --app my-app-name\n</code></pre>"},{"location":"rake-tasks/","title":"ShinyCMS Documentation","text":""},{"location":"rake-tasks/#rake-tasks","title":"Rake tasks","text":"<p>ShinyCMS and its plugins include a number of rake tasks, in addition to those provided by Rails.</p> <p>You can use the command <code>rails --tasks</code> to see all the available tasks, or <code>rails --tasks | grep shiny</code> to show just the ShinyCMS tasks.</p>"},{"location":"rake-tasks/#create-new-admin-user","title":"Create new admin user","text":"<pre><code>rails shinycms:admin:create    # ShinyCMS: create a new super-admin user\n</code></pre> <p>Prompts you for username, email, and password, and then uses those details to create a new CMS user with all admin capabilities enabled.</p>"},{"location":"rake-tasks/#feature-flags","title":"Feature Flags","text":"<pre><code>rails shinycms:features:list        # ShinyCMS: list feature flags and status\nrails shinycms:feature:on[name]     # ShinyCMS: toggle a feature flag on\nrails shinycms:feature:off[name]    # ShinyCMS: toggle a feature flag off\n</code></pre> <p>These tasks can be used to enable and disable CMS features from the command line. This may be useful if you are unable to reach the CMS admin area on your website for some reason - for example, if you turn off the user logins feature, thereby logging yourself out along with everybody else.</p>"},{"location":"rake-tasks/#shinynewsletters-start-scheduled-sends","title":"ShinyNewsletters: start scheduled sends","text":"<pre><code>rails shiny_newsletters:scheduled:send    # ShinyCMS: check for and start any scheduled sends that are due\n</code></pre> <p>This task can be scheduled to run as a regular task, or run on an ad-hoc basis, or both.</p>"},{"location":"rake-tasks/#delete-unwanted-session-data","title":"Delete unwanted session data","text":"<pre><code>rails shinycms:sessions:clean    # ShinyCMS: delete data for short sessions\n</code></pre> <p>This task deletes session data for any sessions that lasted less than the specified number of seconds (e.g. <code>rails shinycms:sessions:clean 3</code> will remove sessions that lasted less than 3 seconds in total) - not including sessions from the current date.</p> <pre><code>rails db:sessions:trim    # Trim old sessions from the table (default: &gt; 30 days)\n</code></pre> <p>Rails provides this task to remove older sessions (over 30 days old by default, or you can set SESSION_DAYS_TRIM_THRESHOLD for a different limit). You may wish to schedule this to run every night to prevent the sessions table in your database from growing too large.</p>"},{"location":"rake-tasks/#sitemaps","title":"Sitemaps","text":"<pre><code>rails sitemap:create     # Generate sitemaps but don't ping search engines\nrails sitemap:refresh    # Generate sitemaps and ping search engines\n</code></pre> <p>These tasks are provided by the sitemap_generator gem. They use the configuration file at <code>config/sitemap.rb</code>, and write the generated sitemap file to <code>public/sitemap.xml.gz</code> (or to AWS S3, if you have that configured).</p>"},{"location":"rake-tasks/#demo-site-data","title":"Demo site data","text":"<pre><code>rails shinycms:demo:load    # ShinyCMS: reset database, create admin user, and load demo site data\n</code></pre> <p>This task allows you to load the data for the demo site, so you can experiment with all of the CMS features. Be aware that this task will wipe the current contents of the database before it loads the demo site data - before you run it, back up anything that you want to keep!</p>"},{"location":"rake-tasks/#plugin-migrations-and-seed-data","title":"Plugin migrations and seed data","text":"<pre><code>rails shiny_[various]:db:seed               # ShinyCMS: load supporting data for Shiny**** plugin\nrails shiny_[various]:install:migrations    # Copy migrations from shiny_**** to application\n</code></pre> <p>The rest of the rake tasks added by ShinyCMS are the tasks to install migrations and load seed data for each plugin.</p> <p>Currently, running the main <code>rails db:seed</code> task also runs all of the plugin seed tasks, so you should not need to run these tasks separately.</p> <p>Similarly, the plugin tables are already included in the main <code>db/schema.rb</code> used to create the database - so you shouldn't need to run the install migration tasks, or the resulting migrations, as part of the standard install process.</p> <p>In the case that a plugin does not provide a migration install task, it will be because that plugin doesn't store any data in the database (e.g. ShinySearch). All plugins currently provide a seed task (to add settings and feature flags, if nothing else).</p>"},{"location":"release-notes/","title":"ShinyCMS Documentation","text":""},{"location":"release-notes/#release-notes","title":"Release Notes","text":"<p>This file contains information about changes (particularly breaking changes) between releases - with the most recent release first.</p>"},{"location":"release-notes/#2025-04-02-2504-april-2025-the-another-itsy-bitsy-bump-release","title":"2025-04-02  25.04  April 2025: The 'Another Itsy Bitsy Bump' release","text":"<p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v25.04</p> <p>Theorically significant upgrade again, to Rails 7.2, but actually it was pretty small - a lot easier than the last two.</p> <p>Introduced some use of one-liner method definition syntax, mostly in the Post concern.</p>"},{"location":"release-notes/#2025-03-03-2503-march-2025-the-another-month-another-bump-release","title":"2025-03-03  25.03  March 2025: The 'Another Month, Another Bump' release","text":"<p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v25.03</p> <p>SIGNIFICANT UPGRADE TIME AGAIN: Ruby 3.4, Rails 7.1</p> <p>Other than those major changes, there were quite a lot of minor updates to test gems and config, as Rubocop moves to a plugin architecture.</p>"},{"location":"release-notes/#2025-02-20-2502-february-2025-the-upgrade-all-the-things-release","title":"2025-02-20  25.02  February 2025: The 'UPGRADE ALL THE THINGS' release","text":"<p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v25.02</p> <p>MAJOR UPGRADE TIME: Ruby 3.2, Rails 7.0</p> <p>It's probably best to count the whole thing as a breaking change really.</p>"},{"location":"release-notes/#2025-01-15-2501-january-2025-the-turn-on-plug-in-or-drop-out-release","title":"2025-01-15  25.01  January 2025: The 'Turn On, Plug In, or Drop Out' release","text":"<p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v25.01</p> <ul> <li> <p>BREAKING CHANGES</p> <ul> <li>The SHINYCMS_PLUGINS env var MUST be set now - the app will fail to start if it isn't.</li> </ul> </li> <li> <p>Otherwise, just updates to gems in this release - plus the ever-exciting update to the year in all the copyright notices</p> </li> </ul>"},{"location":"release-notes/#2024-11-25-2411-november-2024-the-three-years-off-dead-for-tax-reasons-release","title":"2024-11-25  24.11  November 2024: The 'Three Years Off Dead For Tax Reasons' release","text":"<p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v24.11</p> <p>Sorry for the unexpected hiatus in releases. In my defence, I nearly died shortly after the last one.</p> <p>TL;DR, I turn out to have a massive arteriovenous malformation very near my brain stem, which ruptured on 18 June 2021, causing a haemorrhagic stroke that nearly killed me. In hindsight, that probably explains the insomnia and headaches between 2019 and 2021... I thought they were 'just' work stress.</p> <p>Anyway, I have been busy learning how to talk again, and then walk again, and then recovering from six months of hospital-food-induced starvation (mostly by eating properly once I was home again, but some exercise too) - so all-in-all typing and coding have had to wait their turn. I'm getting there.</p> <p>I don't think I've added or removed any features in this release, but there have been many many MANY gem updates - a lot of which were languishing in the dependabot queue while I recovered, and then more that flooded in once I cleared the initial backlog :)</p> <p>Some highlights include: * Ruby, from 3.0.1 to 3.1.6 * Rails, from 6.1.3.1 to 6.1.7.10 * Puma, from 5.6.7 to 6.4.3 * Pg, from 1.2.3 to 1.5.9 * pundit, from 2.1.0 to 2.4.0 * packwerk, from 1.1.3 to 3.2.2 * view_component, from 2.83.0 to 3.20.0 * Plus: bcrypt, capybara, persistent_dmnd, acts_as_votable, acts-as-taggable-on, sidekiq, codecov, mjml, recapcha, bugsnag, mutant-rspec, parallel_tests, yarn, factorybot-rails, rubocop, rubocop_rails, rubocop-performance, and many many many more.</p> <p>I'm working on a ShinyShop plugin for the CMS as part of my rehab currently, hopefully that will be ready for initial release some time next year.</p>"},{"location":"release-notes/#2021-06-02-2106-june-2021-the-happy-birthday-fliss-edition","title":"2021-06-02  21.06  June 2021: The 'Happy Birthday, Fliss!' Edition","text":"<p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v21.06</p> <p>Fixed: * .pryrc now checks in Heroku ENV for 'staging' in hostname (and sets rails console prompt appropriately if found), instead of running <code>hostname</code> command which was breaking for some people</p> <p>Added: * 'Add element' feature for pages, newsletters, and their templates     * Relatedly, elements got their own controllers in each of those places * Separate HTML and plain text 'manage subscriptions' partials for emails * Initializer to disable concurrent asset compilation in Sprockets     * Seems like the most likely culprit causing build segfaults on CI * Pacman formatter for RSpec output :D     * Set SPECMAN=1 in your ENV before running <code>rspec</code> to enable this</p> <p>Removed: * Rails Best Practices gem; other tools cover all the same things</p> <p>Changed: * Continued changing partials to components in admin area     * Basically everything 'around the edges' is generated by components now     * Random refactoring bonus outcome; don't need to set @page_title in most admin views any more, it's automagic! * Changed how route partials work     * There's way more boilerplate now, but they do feel a bit more solid * Invoke ShinySearch separately in ShinyNews::Post and ShinyBlog::Post     * (instead of ShinyCMS::Post - so they can be configured differently) * Moved various top-level methods into classes, to reduce pollution     * Helper methods for Gemfile also moved from main_app to core plugin * Gemfile picks up Ruby version from .ruby-version (using helper method) * Moved <code>credits.md</code> to <code>Contributors.md</code> which seems more common * Changed inheritance from core by feature plugin controllers/mailers/etc     * They now load common behaviour etc from a XyzBase module rather than inheriting it from a BaseXyz class, which feels like looser coupling</p> <p>Also updated: * <code>bundle update</code> and <code>yarn upgrade</code>     * Fixed pagy, which was pinned due to breaking changes a few releases back     * But had to pin view_components this time :(</p> <p>Tidied: * Various documentation improvements from Paul Cochrane (@paultcochrane) * Tidied up Packwerk config files and i18n-tasks config * Moved 'loose' JavaScript from footer template into a .js file in assets</p> <p>ION: * Today is my flatmate's birthday! And it was either name the release for that, or call it 'the unemployed layabout release', as this is my first week off after finishing work on Friday. :)</p>"},{"location":"release-notes/#2021-05-07-2105-may-2021-the-component-with-a-view-release","title":"2021-05-07  21.05  May 2021: The 'Component With A View' release","text":"<p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v21.05</p> <ul> <li> <p>Security updates:</p> <ul> <li>Rails and related Action* gems had a cluster of CVE fixes this month</li> </ul> </li> <li> <p>Added:</p> <ul> <li>[View Components][1] - used to rewrite the admin menu [PR #1096][2]</li> <li>[mutant][3]- a mutation testing gem</li> <li>config/initializers/shinycms.rb - allows the host app to configure:<ul> <li>The user model for ShinyCMS to use</li> <li>The list model for ShinyNewsletters to use</li> </ul> </li> <li>.flayignore - causing a [dramatic improvement][4] in Ruby Critic scores</li> <li>Blazer::ApplicationController in the host app, for Blazer to inherit from</li> <li>Sentry gem and initializer</li> </ul> </li> <li> <p>Updated:</p> <ul> <li>Split main site DiscussionsController, creating CommentsController too</li> <li>Accessibility fixes for the Halcyonic theme [PR #1088][5] [PR #1091][6] [PR #1112][7]<ul> <li>Accessibly-hidden labels for form inputs</li> <li>Text contrast ratios throughout</li> <li>Editable image alt attributes added to index template<ul> <li>Changes to demo site data to go with this</li> </ul> </li> </ul> </li> <li>The host app's ApplicationController is now free of confusing Blazer gank</li> <li>Lots of gem version bumps, besides the aforementioned rails ones<ul> <li>Rubocop updates required some minor changes to code and config</li> </ul> </li> </ul> </li> <li> <p>Removed:</p> <ul> <li>Several packwerk todo files got removed by the configurable user model change</li> <li>MainController in the host app, now that ApplicationController is usable</li> <li>All the admin menu partials that got replaced by view components</li> </ul> </li> </ul> <p>Relatively quiet month, especially compared to the last few! I'm in the process of quitting one job and finding the next, so that's taken a lot of my time and energy. I'm happy with the first pass at adding view components though, expect more of those next month.</p> <p>[1] https://github.com/github/view_component#readme [2] https://github.com/denny/ShinyCMS-ruby/pull/1096 [3] https://github.com/mbj/mutant#readme [4] https://shinycms.org/blog/2021/04/cheat-codes [5] https://github.com/denny/ShinyCMS-ruby/pull/1088 [6] https://github.com/denny/ShinyCMS-ruby/pull/1091 [7] https://github.com/denny/ShinyCMS-ruby/pull/1112</p>"},{"location":"release-notes/#2021-04-08-2104-april-2021-the-respecting-boundaries-release","title":"2021-04-08  21.04  April 2021: The 'Respecting Boundaries' release","text":"<ul> <li> <p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v21.04</p> </li> <li> <p>Headline for this release:</p> <ul> <li>Added Packwerk<ul> <li>Helps define and enforce plugin boundaries</li> </ul> </li> </ul> </li> <li> <p>Also added:</p> <ul> <li>Routes partials - building blocks for routes files<ul> <li>Intended to help with integrating ShinyCMS into pre-existing Rails apps</li> </ul> </li> <li>Bullet (warns about N+1 queries and related issues)</li> <li>CircleCI config for Code Climate coverage reporting</li> <li>Hugely improved base class for Mailers to inherit from<ul> <li>Again, should aid integration work, and legal compliance</li> </ul> </li> <li>Items extension for Pagy</li> <li><code>deprecated_references.yml</code>, which is Packwerk's equivalent of <code>rubocop_todo.yml</code><ul> <li>Contains known boundary violations in the current code</li> <li>These should be fixed in the code and then removed from the file</li> </ul> </li> <li>Some new classes have been added to enable plugins to talk to each other without violating boundaries, but mostly pre-existing helpers and concerns are handling this</li> </ul> </li> <li> <p>Moved:</p> <ul> <li>From main_app to core plugin:<ul> <li>Most of the Gemfile</li> <li>Some odds and ends of config (including main rubocop files)</li> <li>rake tasks</li> <li>Rails Email Preview</li> <li>Base controllers used by gem Rails engines (e.g. Devise, Rails Email Preview, etc) (moved to ShinyCMS::Admin::Tools namespace)</li> </ul> </li> <li>To app/public folders:<ul> <li>Anything in any plugin (mostly core) that is used by another plugin</li> </ul> </li> </ul> </li> <li> <p>Updated:</p> <ul> <li>Base controllers used by gem Rails engines heavily rewritten (for easier re-use)</li> <li>Tiny bumps for Ruby (from 3.0.0 to 3.0.1) and Rails (6.1.3 to 6.1.3.1)</li> <li>Renamed <code>shiny:*</code> rake tasks to <code>shinycms:*</code></li> </ul> </li> <li> <p>Removed:</p> <ul> <li>Gemfile.lock files from plugins</li> <li>Unused config files in main_app (anything that was all comments)</li> <li>Disabled two Code Climate tools - spellcheck was removed I think, and Markdown Lint and I disagree on the value of vertical whitespace for readability in documentation :)</li> </ul> </li> </ul>"},{"location":"release-notes/#2021-03-01-2103-march-2021-the-yo-dawg-i-herd-u-liek-cms-release","title":"2021-03-01  21.03  March 2021: The 'Yo dawg I herd u liek CMS' release","text":"<ul> <li> <p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v21.03</p> </li> <li> <p>Headline for this release:</p> <ul> <li>I moved almost all the code that was still in main_app, into a plugin! :-o</li> </ul> </li> <li> <p>Done:</p> <ul> <li>The main_app is now called ShinyHostApp, and eventually it's only job will be to load plugins - to demonstrate how (eventually) ShinyCMS could potentially be integrated within any existing Rails app</li> <li>The code that was in main_app is now in the new ShinyCMS core plugin, which you can find in <code>plugins/ShinyCMS</code></li> </ul> </li> <li> <p>To-do:</p> <ul> <li>The config files haven't moved yet, that's my next big job</li> <li>The documentation is partially updated, but I haven't gone through it all yet, so there may well be discrepancies here there and everywhere</li> <li>Some of the engines from gems are still living in the main_app; a few of them didn't take well to being moved so I put them back there for now</li> </ul> </li> <li> <p>App and plugin versions:</p> <ul> <li>All of the feature plugins, the new ShinyCMS core plugin, and the sort-of new ShinyHostApp, have all had their versions updated to 21.03 in this release - because as you can probably imagine, everything has had quite a lot of changes this last month!</li> </ul> </li> <li> <p>Other significant stuff:</p> <ul> <li>I wrote a lot more code to support the Plugins 'infrastructure' or framework or whatever you'd call it. As well as the existing Plugin model (now ShinyCMS::Plugin, in the core plugin's models) there's also ShinyCMS::Plugins (plural) now - and a concern with some sugar/helper methods on top of that. All the code for dealing with collections of plugins moved into the new model, leaving the code that deals with individual plugins in the original class.</li> </ul> </li> <li> <p>Annoying side-effects of the main_app -&gt; ShinyCMS plugin migration</p> <ul> <li>A whole load of the moved files lost their git history at some point during the process; I guess GitHub decided that too many things had moved and so that must mean they'd all been deleted and new files created, despite the fact that I used the <code>git mv</code> command to do it all. I kept checking on things at the start and it was going okay, so I don't know what changed. I was quite a long way into the process when I did notice that it had dropped the history for a lot of stuff, so after a long pause to think it over, I decided to carry on rather than start again.</li> </ul> </li> <li> <p>Adventures in immutable data structures (and shiny emojis!)</p> <ul> <li>I decided to use the [Persistent Diamond(https://gitlab.com/ivoanjo/persistent-dmnd) set of immutable data structures to underpin the Plugin(s) models and concern, which comes complete with a shiny little diamond emoji scattered around in the code (it's part of the method names, as well as the module name). One of my co-workers hates it, but I'm quite enjoying it... brightens my days up a bit :)</li> </ul> </li> <li> <p>Also added:</p> <ul> <li>ShinySEO plugin; currently it just generates sitemap files (to feed into Google et al), but I already had some ideas for the future involving metatags helpers and concerns, so I figured an SEO plugin might be a good place for all that to end up.</li> <li>parallel_tests - run the tests spread evenly across all your CPUs!</li> <li>rspec-instafail - displays fuller details of test failures while the rest of the suite continues to run in 'progress dots only' mode - so I can start on the fixes before it's even finished running :)</li> <li>A GitHub project board, for task-tracking (instead of the TODO and in-progress files)</li> </ul> </li> <li> <p>Updated:</p> <ul> <li>LOTS OF DATABASE (TABLE NAME) CHANGES RELATED TO THE PLUGINIFICATION!!</li> <li>After moving everything into the ShinyCMS plugin, I removed the leading 'Shiny' from a lot of helper and concern names, as they're namespaced now anyway</li> <li>Made some changes around the comment-author area; it's a slightly more obvious role/duck-type now, with an AnonymousAuthor class joining in too</li> <li>Pulled most of the code out of the demo-data rake task into a supporting module, and broke it up into smaller methods. Still needs more tests though.</li> <li>I broke the plugin generator code up a bit too, but that's still pretty hideous. I got it down into the same complexity range as the rest of the system though, so it's not throwing the scale off in Ruby Critic's charts any more.</li> <li>Rails made its way from 6.1.1 to 6.1.3 over the month (with some security advisories involved I believe, so make sure you're up to date)</li> </ul> </li> <li> <p>Removed:</p> <ul> <li>Got rid of quite a lot of instance variable warnings from rubocop for the spec files - although there are still well over a hundred to go!</li> <li>I both added and removed the Airbrake gem; their free trial on Heroku turns out to be so feature-limited as to be useless. Coralogix and Bugsnag were both more impressive - Coralogix is very shiny, and Bugsnag has got some solid thinking behind it.</li> </ul> </li> <li> <p>Misc/stuff/FYI</p> <ul> <li>I currently have a temporary branch running parallel to main with Pry removed, as Heroku seem to have a problem with Pry right now (or more accurately, with the coderay gem that it requires); I'll reintegrate everything as soon as it seems safe.</li> </ul> </li> </ul>"},{"location":"release-notes/#2021-02-01-2102-february-2021-the-quiet-after-the-storm-release","title":"2021-02-01  21.02  February 2021: The 'quiet after the storm' release","text":"<ul> <li> <p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v21.02</p> </li> <li> <p>Plugin versions all updated to 21.02, as they all have changes since 21.01</p> <ul> <li>Only minor changes in many though, often just the admin search method move</li> </ul> </li> <li> <p>Headlines:</p> <ul> <li>Quiet month, after last month's upgrade extravaganza!</li> <li>No really big changes this month; not that many smaller ones either :)</li> </ul> </li> <li> <p>Bug fixes:</p> <ul> <li>Tags on hidden content no longer show up on tag list and tag cloud pages<ul> <li>Added ShinyTags concern and helpers to enable this</li> </ul> </li> <li>User profile instantiation in dev is more robust now (lazy-loading issue resolved)</li> <li>More robust handling of 404s for non-HTML formats (usually hits from malware)</li> </ul> </li> <li> <p>Added:</p> <ul> <li>ShinyUserAuthentication and ShinyUserAuthorization concerns<ul> <li>Splitting out auth code from User model</li> </ul> </li> <li>ShinyUserContent concern - splitting off relations to user-owned content</li> <li>Links on user profiles, with a JS UI that very nearly works properly</li> <li>ErrorController - more standard way to provide 'smart' 404 (etc) pages<ul> <li>Changes in several places to raise RecordNotFound to trigger 404 'neatly'</li> <li>Added rspec support for optionally raising production-style errors in test env</li> </ul> </li> <li>Some support for manually overriding open/active status of admin menu items</li> <li>lib/gemfile_plugins_helper.rb - new home for plugin-supporting methods from Gemfile</li> <li>rubycritic - now uncommented in the Gemfile, reek fixed their ruby 3.0 issues</li> <li>zxcvbn-ruby - intelligent password complexity checker<ul> <li>PasswordsController - JSON endpoint for getting password scores and advice</li> </ul> </li> <li>activerecord-analyze - adds .analyze method to AR objects, for investigating issues</li> </ul> </li> <li> <p>Updated:</p> <ul> <li>Rails, from 6.1.0 to 6.1.1</li> <li>Puma, from 5.1 to 5.2</li> <li>Blazer, from 2.3.1 to 2.4.0<ul> <li>Fixed the issue with recent versions by overriding the clear_helpers method</li> </ul> </li> <li>MJMLSyntaxValidator rewritten - uses mjml directly rather than Mjml::Parser gem</li> <li>Admin area 'quick search' methods moved from controllers to models</li> <li>Minor code-quality tweaks in various admin controllers and some models<ul> <li>In controllers, mostly setting instance variables in before_actions</li> <li>In models, several accessors changed from read/write to read-only</li> </ul> </li> <li>Split user session and user registration tests into two separate files</li> </ul> </li> <li> <p>Removed:</p> <ul> <li>groupdate gem - this is related to Blazer, but wasn't being used</li> <li>Various post-login redirect code, particularly for admins<ul> <li>It was architecturally horrible, and didn't offer enough value to justify that</li> </ul> </li> <li>user_profile factory - profiles are auto-created along with users now<ul> <li>There were quite a lot of very minor spec updates to adapt to this</li> </ul> </li> <li>Static 404 and 500 pages</li> </ul> </li> </ul>"},{"location":"release-notes/#2021-01-01-2101-january-2021-wishing-you-a-happy-new-year-a-happy-new-rails-and-a-happy-new-ruby","title":"2021-01-01  21.01  January 2021: 'Wishing you a Happy New Year, a Happy New Rails, and a Happy New Ruby!'","text":"<ul> <li> <p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v21.01</p> </li> <li> <p>Headlines:</p> <ul> <li>Rails 6.1 !</li> <li>Ruby 3.0 !!</li> </ul> </li> <li> <p>Also notable:</p> <ul> <li>Pagination now uses Pagy rather than Kaminari</li> <li>Travis CI removed, as they no longer support open source projects :(</li> </ul> </li> <li> <p>Possibly contentious Rubocop config change of the month ;)</p> <ul> <li>Layout/HashAlignment -&gt; EnforcedStyle: table</li> </ul> </li> <li> <p>Plugin versions all increased to 21.01</p> </li> <li> <p>Added</p> <ul> <li>Pagy - new pagination gem, replacing Kaminari</li> <li>rubocop-rspec<ul> <li>This triggered lots of minor changes to spec files, nothing major though</li> <li>Still two types of warning left to address (see .rubocop_todo.yml)</li> </ul> </li> <li>rails_best_practices</li> <li>rubycritic<ul> <li>Currently commented out in Gemfile due to Ruby 3.0 issues in its dependency chain, but config file included and all ready to go when reek catches up</li> </ul> </li> <li>Typo CI config (https://github.com/marketplace/typo-ci)</li> <li>ActiveStorage added a new table, and a new column to an existing table</li> <li>Database indexes on capabilities.category_id, comments.parent_id, and shiny_pages_sections.default_page_id</li> </ul> </li> <li> <p>Changed</p> <ul> <li>As headlined, two particularly significant version bumps this month:<ul> <li>Rails, from 6.0 to 6.1</li> <li>Ruby, from 2.7 to 3.0<ul> <li>This triggered downgrades in the codecov and fasterer gems<ul> <li>No noticeable impact from either of these</li> </ul> </li> <li>Needs an unreleased fix for ActiveRecord-session-store<ul> <li>Hence, this gem is currently installing from GitHub HEAD</li> </ul> </li> </ul> </li> </ul> </li> <li>Finished moving (almost) all theme files into the top-level /themes folder<ul> <li>Theme JavaScript files still not ideally located, but better than it was<ul> <li>Hooking up a theme with JavaScript requires creating a pack file at <code>/app/javascript/packs/{theme_name}.js</code>, which is clearly not how that boundary should work. The fix is probably themes-as-installable-gems. (Hold my beer?)</li> </ul> </li> </ul> </li> <li>Human-readable names for capability categories now come via i18n rather than various model methods</li> <li>ActiveRecord timestamp defaults overriden, to not include microseconds</li> <li>In test and dev environment config:<ul> <li>Explicitly disabled precompiled asset check<ul> <li>This got rid of hopefully spurious errors about theme and plugin assets</li> </ul> </li> <li>Updated the name of an i18n-related setting</li> </ul> </li> </ul> </li> <li> <p>Frozen</p> <ul> <li>Blazer is currently locked to version 2.3.1, as 2.4.0 has a breaking change<ul> <li>https://github.com/ankane/blazer/issues/315</li> </ul> </li> <li>MJML is currently locked to version 4.7.1, as 4.8.0 has a breaking change</li> </ul> </li> <li> <p>Removed</p> <ul> <li>As mentioned above, Travis CI has been removed<ul> <li>The company was sold and the new owners do not support open source :(<ul> <li>See https://travis-ci.community/t/10567 for more background</li> </ul> </li> <li>This means that there is currently no CI set up for older Ruby versions</li> </ul> </li> <li>Kaminari (pagination gem, replaced by Pagy)</li> <li>The ShinyPaging concern (only existed to load Kaminari)</li> </ul> </li> </ul>"},{"location":"release-notes/#2020-12-03-2012-december-2020-the-shinyaccess-and-activestorage-edition","title":"2020-12-03  20.12  December 2020: The 'ShinyAccess and ActiveStorage' Edition","text":"<ul> <li> <p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v20.12</p> </li> <li> <p>Plugin versions:</p> <ul> <li>All plugin versions bumped to 20.12 - they've all had commits since 20.11 release</li> </ul> </li> <li> <p>BREAKING CHANGES</p> <ul> <li>User profile data moved from users table into shiny_profiles_* tables<ul> <li>Migration only handles table structure - DATA MIGRATION IS NOT HANDLED<ul> <li>(When people are using the CMS in production, I'll write data migrations) :)</li> </ul> </li> </ul> </li> <li>Feature Flag name changes:<ul> <li>recaptcha_for_registration -&gt; recaptcha_for_registrations</li> <li>profile_pages -&gt; user_profiles</li> </ul> </li> <li>ShinyLists unsubscribe route changed from PUT to DELETE</li> <li>Assets and JavaScript files for themes have moved from app/ to vendor/</li> </ul> </li> <li> <p>Fixes since 20.11</p> <ul> <li>Fatal errors that could prevent the CMS from starting at all:<ul> <li>ShinyPlugin checks whether plugins exist before attempting to load them</li> <li>ShinyPlugin de-duplicates SHINYCMS_PLUGINS before attempting to load them all</li> </ul> </li> <li>Security issues:<ul> <li>Admin area:<ul> <li>Authorisation check when accessing /admin/stats (Blazer)</li> </ul> </li> <li>Main site:<ul> <li>Don't add new comments (or show reply links &amp; forms) if discussion is locked</li> </ul> </li> </ul> </li> <li>Errors that only broke a specific page or feature-set:<ul> <li>Get rid of double '.../search/search' in admin area search forms</li> <li>Displaying user profile pic from ActiveStorage works in local disk mode too</li> </ul> </li> <li>Wasted database space:<ul> <li>When dropping a comment flagged as 'blatant spam' by Akismet...<ul> <li>Don't create CommentAuthor and EmailRecipient records!</li> </ul> </li> </ul> </li> <li>Lurkers (hadn't broken anything yet, but not the intended behaviour):<ul> <li>'Page with all element types' factory was adding each type twice</li> </ul> </li> </ul> </li> <li> <p>Added since 20.11</p> <ul> <li>Gems:<ul> <li>Bugsnag gem<ul> <li>Monitoring and bug triage service</li> </ul> </li> <li>Cloudflare gem<ul> <li>Puts real IP address in request.ip, instead of Cloudflare proxy address</li> </ul> </li> </ul> </li> <li>Plugins:<ul> <li>ShinyAccess<ul> <li>New plugin - adds basic ACL features for main site<ul> <li>Admin pages to add/remove Access Groups, and members of those groups</li> <li>Main site helper to check access group membership, can be used to selectively show/hide content in any template</li> </ul> </li> </ul> </li> <li>ShinyProfiles:<ul> <li>As part of separation from user accounts:<ul> <li>Main site page for users to edit their profile data</li> <li>Admin area features for managing user profiles</li> </ul> </li> </ul> </li> <li>ShinyNewsletters:<ul> <li>New rake task, to enqueue scheduled sends when they pass their send_at</li> </ul> </li> </ul> </li> <li>Main app:<ul> <li>JSON endpoint to search usernames (used by ShinyAccess)</li> </ul> </li> <li>Support libs (helpers, concerns, etc):<ul> <li>ShinyTemplate / ShinyElement<ul> <li>Use ActiveStorage for image elements</li> </ul> </li> <li>Rake tasks:<ul> <li><code>shiny:sessions:clean</code> for removing short (probably bot) session data</li> </ul> </li> <li>Utility scripts:<ul> <li>New dotenv wrapper scripts for dev environment (to pick up .env.*):<ul> <li><code>tools/shiny-bundle-install</code> wraps <code>bundle install</code><ul> <li>Only matters if you don't want all of the plugins</li> </ul> </li> <li><code>tools/shiny-sidekiq-dev</code> wraps <code>sidekiq</code><ul> <li>Only matters if you want to override default value of any ENV var mentioned in config/sidekiq.yml</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>Config:<ul> <li>Explicit config for HTML sanitizer - used when displaying blog posts etc<ul> <li>(full submitted HTML is stored, but output is heavily filtered)</li> <li>Added a number of 'basic necessity' tags and attributes to the allow-list that weren't allowed through by default (e.g. img tag, class attribute)</li> </ul> </li> <li>More explicit config options to enable web stats and email open/click tracking</li> </ul> </li> <li>Documentation:<ul> <li>Moved content from docs/Developers/index.md to create docs/Contributing.md<ul> <li>(GitHub looks for the latter and automatically shares it with PR creators)</li> </ul> </li> <li>'How to' guide for setting up a new site</li> <li>Basic information about some supported/tested cloud hosting services</li> <li>Stub doc for new ShinyAccess feature/plugin</li> <li>Separate doc for rake tasks for developers (just shiny:demo:dump currently)</li> <li>Notes on user personas (tl,dr: 'user' will probably (primarily) describe a different sub-group of CMS users to different types of developer)</li> </ul> </li> </ul> </li> <li> <p>Changed since 20.11</p> <ul> <li>Plugins:<ul> <li>ShinyProfiles:<ul> <li>Finish separating user profile data from user account data</li> </ul> </li> <li>ShinyBlog:<ul> <li>Change main site paging to use 'newer'/'older' links instead of full pager</li> </ul> </li> </ul> </li> <li>Support libs (helpers, concerns, etc):<ul> <li>Move implementation of feature_flag_enabled? method from helper to model</li> <li>Admin menu sections default to closed instead of open</li> <li>Refactored plugin generator to make it more rubocop-compliant<ul> <li>Extracted lots of little blocks of functionality into their own methods</li> <li>Moved a large chunk of the overall functionality into a new PluginBuilder file</li> </ul> </li> </ul> </li> <li>Data:<ul> <li>Default data now includes a basic dashboard and charts for Blazer</li> <li>Demo site data now includes the ActiveStorage tables</li> </ul> </li> <li>Tests:<ul> <li>Mocked Akismet gem .open and .check methods<ul> <li>No longer need a network connection for the tests to run</li> <li>Tests aren't using up credits on my Akismet test account</li> </ul> </li> </ul> </li> <li>Documentation:<ul> <li>Plugins: added details of 'special' integration views and helpers</li> <li>Themes: updated paths for assets etc</li> <li>ShinyNewsletters: added details of rake task for scheduled sends</li> <li>Rake tasks: expand on purpose of each task</li> <li>Updates to TODO/in-progress/done docs</li> </ul> </li> </ul> </li> <li> <p>Removed since 20.11</p> <ul> <li>User profile details removed from user account model (User.pm) and related code<ul> <li>(Now handled by ShinyProfiles plugin instead)</li> </ul> </li> </ul> </li> </ul>"},{"location":"release-notes/#2020-11-09-2011-november-2020-the-tricky-second-album-release","title":"2020-11-09  20.11  November 2020: The 'tricky second album' release","text":"<ul> <li> <p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v20.11</p> </li> <li> <p>Plugin versions:</p> <ul> <li>All raised to 20.11 - there have been code changes in every single plugin since the 20.10 release</li> </ul> </li> <li> <p>Updates and changes since 20.10:</p> <ul> <li>General:<ul> <li>Ruby version: 2.7.1 -&gt; 2.7.2</li> </ul> </li> <li>Rubocop:<ul> <li>Added some enforcement of preferred whitespace rules</li> <li>Various updates to config for new versions with new cops</li> </ul> </li> <li>Configuration:<ul> <li>Added Setting.get_int method to get integer values from setting strings</li> <li>Added Setting.true? method to get boolean results from 'true'/'false' setting strings</li> <li>Started moving config that isn't secrets/credentials from ENV vars to Setting model</li> </ul> </li> <li>Supporting code (Helpers, Concerns, etc):<ul> <li>Added helper methods to abstract anywhere a main site view called a model</li> <li>Renamed Plugin model to ShinyPlugin</li> <li>Renamed FeatureFlagsHelper to ShinyFeatureFlagHelper</li> <li>Renamed PagingHelper to ShinyPagingHelper</li> <li>Renamed ElementsHelper to ShinyElementHelper</li> <li>Refactored AkismetHelper to allow checking generic form submissions as well as comments</li> <li>Pulled methods from ShinyMainSiteHelper into their own files:<ul> <li>Added ShinyConsentHelper for retrieving ConsentVersion details</li> <li>Added ShinySettingsHelper for retrieving config settings</li> </ul> </li> </ul> </li> <li>Comments/Discussions:<ul> <li>Changes to names of settings and code relating to who can post a comment (anon/etc)</li> <li>Moved comment author details into a separate model</li> </ul> </li> <li>Mailer templates:<ul> <li>Added fancier MJML templates for discussion, user, and email recipient mailers</li> </ul> </li> </ul> </li> <li> <p>New since 20.10:</p> <ul> <li>General:<ul> <li>Added .env.test file, replacing some setup code in spec/spec_helper.rb</li> </ul> </li> <li>Gems:<ul> <li>acts_as_paranoid (add soft delete to models)</li> <li>kaminari_route_prefix (fix kaminari pagination with Rails Engines routes)</li> <li>sidekiq-status (display additional details in sidekiq web dashboard)</li> </ul> </li> <li>Supporting code (Helpers, Concerns, etc):<ul> <li>Added ShinyPaging concern, to set up kaminari pagination on a model</li> <li>Added ShinySoftDelete concern, to set up acts_as_paranoid on a model</li> <li>Added ShinyClassName concern, for easy access to an i18n-translated name for a type of site content from its model (e.g. 'blog post')</li> <li>Added ShinyTemplateElement, to group common behaviour of template elements</li> <li>Added ShinyPostAtomFeed and ShinyPostAtomFeedEntry, for constructing atom feeds</li> </ul> </li> <li>Admin Area:<ul> <li>Added pagination to index/list pages for most plugins/features</li> <li>Added search to index/list pages for most plugins/features</li> <li>Added new page for viewing and managing non-user-account Email Recipients</li> <li>Added new 'Email' menu section, containing above page &amp; mailer previews</li> <li>Added menu item for Sidekiq web dashboard</li> </ul> </li> <li>Plugins:<ul> <li>ShinyBlog &amp; ShinyNews<ul> <li>Added atom feed generation (can be written to local disk or AWS S3)</li> <li>Added pagination on main site</li> </ul> </li> <li>ShinyForms<ul> <li>Added reCAPTCHA and Akismet checking for form submissions</li> </ul> </li> <li>ShinyNewsletters<ul> <li>Added 'drag to sort' in admin area, for:<ul> <li>Elements on Newsletter Edition and Newsletter Template edit pages</li> </ul> </li> </ul> </li> <li>ShinyPages<ul> <li>Added 'drag to sort' in admin area, for:<ul> <li>Elements on Page and Page Template edit pages</li> <li>Pages and Sections on main Page/Section list page (/admin/pages)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Fixes since 20.10:</p> <ul> <li>Fixed names of user mailer methods in various places (by adding '_instructions')</li> <li>Added missing edit-capability templates in a few plugins, that were causing admins to lose capabilities when edited and saved via the web UI</li> </ul> </li> </ul>"},{"location":"release-notes/#2020-10-01-2010-october-2020-the-first-birthday-release","title":"2020-10-01  20.10  October 2020: The 'First Birthday' release","text":"<ul> <li> <p>This is the first release, in celebration of 1 whole year working on this project!</p> </li> <li> <p>GitHub tag: https://github.com/denny/ShinyCMS-ruby/releases/tag/v20.10</p> </li> </ul>"},{"location":"tldr/","title":"ShinyCMS Documentation","text":""},{"location":"tldr/#installation-the-tldr-version","title":"Installation: the tl,dr version","text":"<pre><code>git clone https://github.com/denny/ShinyCMS-ruby\ncd ShinyCMS-ruby\ncp docs/env.sample .env.development.local\n# Edit .env.development.local in case you want/need to change anything\nbundle install\nyarn install\nrails db:setup\nrails shiny:demo:load     # if you want the demo data loaded\nrails shiny:admin:create  # if you didn't load the demo data\nrails s\n</code></pre> <p>You should now have a ShinyCMS site at http://localhost:3000, with an admin area at http://localhost:3000/admin</p>"},{"location":"Developers/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/#useful-links","title":"Useful Links","text":"<p>GitHub:     * Project board     * Issues</p>"},{"location":"Developers/#goals-and-progress","title":"Goals and Progress","text":"<p>This is as close as we get to a roadmap, for now :) * Project goals</p> <p>Semi-retired progress-tracking files: * Done * ~In progress~ (all moved to project board) * To do (short-to-medium term tasks moved to project board, rest to follow in due course)</p>"},{"location":"Developers/#technical-guides","title":"Technical Guides","text":"<ul> <li> <p>Instructions for creating a new plugin (and related useful info)</p> </li> <li> <p>Notes about the demo site data</p> <ul> <li>Rake tasks for developers (export new/extended demo data)</li> </ul> </li> <li> <p>Guidance and tools for testing (this project has 100% test coverage)</p> </li> <li> <p>Tools for checking code quality</p> </li> </ul>"},{"location":"Developers/#helpers-concerns-and-other-useful-modules","title":"Helpers, Concerns, and other useful modules:","text":"<ul> <li>Overview<ul> <li>Helpers</li> <li>Model Concerns</li> <li>Controller Concerns</li> <li>Mailers</li> <li>Other modules</li> </ul> </li> </ul>"},{"location":"Developers/#code-of-conduct","title":"Code of Conduct","text":"<p>This project has a Code of Conduct, which is intended to make using ShinyCMS, or contributing to it, a harassment-free experience for everybody involved - regardless of who they are and what they do or don't know.</p> <p>Please read and follow the code of conduct - thank you.</p>"},{"location":"Developers/Concerns-and-Helpers/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/Concerns-and-Helpers/#supporting-code-concerns-helpers-and-other-modules","title":"Supporting code: concerns, helpers, and other modules","text":"<p>There are a fairly large number of supporting modules provided with ShinyCMS (at the time of writing there are 25 model concerns, 6 controller concerns, 22 helpers, and 3 other support modules).</p> <p>Most of these 'DRY up' functionality that is used (or that could be used) in multiple places - often in multiple feature plugins.</p> <p>As well as that, they are intended to make it easier for other developers to build new feature plugins that work similarly to the existing features. This should help new plugins, and ShinyCMS as a whole, be 'less astonishing' - for users, and for developers.</p> <ul> <li> <p>Model concerns</p> </li> <li> <p>Controller concerns</p> </li> <li> <p>Helpers</p> </li> <li> <p>Other modules</p> </li> </ul> <p>\"A user interface is well-designed when the program behaves exactly how the user thought it would.\" -- Joel on Software</p>"},{"location":"Developers/Mailers/","title":"ShinyCMS Development Documentation","text":""},{"location":"Developers/Mailers/#fitting-into-shinycms","title":"Fitting into ShinyCMS","text":"<p>If you inherit from ShinyCMS::Mailer then you'll need to implement a couple of (simple) methods used by before/after actions, that will mean: a) Your mailer is included in the site-wide feature flag for all email-sending features (useful in case of runaway spam emergency or whatever) b) Your mailer will honour the DoNotContact list (very important!) c) Your site will check and honour double opt-in (also important!)</p>"},{"location":"Developers/Mailers/#working-on-mailers","title":"Working on Mailers","text":"<p>Mailers have special config in dev and test environments, because sending test content to your real mailing list is embarrassing at best, and quite probably against the law too.</p>"},{"location":"Developers/Mailers/#dev-site-outbox","title":"Dev site 'Outbox'","text":"<p>If you're working on a new mailer or anything that sends email, you'll probably find http://localhost:3000/dev/outbox useful - any email sent by your dev site will end up captured there instead of actually being sent. It's all presented via a webmail-ish interface, so you can check the content easily.</p> <p>This feature is powered by the letter_opener_web gem.</p>"},{"location":"Developers/Mailers/#test-suite-mailer-config","title":"Test suite mailer config","text":"<p>The test environment includes the following two lines, which run your .deliver_later mailer jobs now not later, and put your test suite emails somewhere testable (ActionMailer::Base.deliveries):</p> <p>config.active_job.queue_adapter = :test   config.action_mailer.delivery_method = :test</p> <p>You can look at the tests in the ShinyNewsletters plugin for examples of how to test email jobs are queued and processed correctly.</p>"},{"location":"Developers/Plugins/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/Plugins/#writing-a-new-plugin","title":"Writing a new plugin","text":""},{"location":"Developers/Plugins/#generator","title":"Generator","text":"<p>Move into the base directory of your copy of the ShinyCMS code: <code>cd ShinyCMS-ruby</code></p> <p>Then, run the plugin generator: <code>rails g shiny:plugin plugins/ShinyThing</code></p> <p>(Currently your plugin must be named Shiny{Something} for some filepath-dependent hacks to work.)</p> <p>The plugin generator is a cut-down version of the standard Rails Engine generator (rails new plugin --mountable) with some added boilerplate to fit the resulting plugin into ShinyCMS. You can pass it flags which the rails plugin generator understands, to skip features that your plugin doesn't need - e.g: <code>rails g shiny:plugin --skip-action-mailer --skip-action-mailbox --skip-action-cable plugins/ShinyThing</code></p>"},{"location":"Developers/Plugins/#documentation","title":"Documentation","text":"<p>You should put the appropriate details in <code>plugins/ShinyThing/shiny_thing.gemspec</code>, and you'll probably want to edit <code>plugins/ShinyThing/README.md</code> as well.</p>"},{"location":"Developers/Plugins/#tests","title":"Tests","text":"<p>Your tests go in <code>plugins/ShinyThing/spec/</code> and you can run them from the ShinyCMS root directory:</p> <pre><code>rspec plugins/ShinyThing  # to run tests for just your new plugin\nrspec spec plugins  # to run tests for the main app and all plugins\n</code></pre>"},{"location":"Developers/Plugins/#code","title":"Code!","text":"<p>Most of your code probably goes in <code>plugins/ShinyThing/app/</code>, with routes and locale files in <code>plugins/ShinyThing/config/</code></p>"},{"location":"Developers/Plugins/#special-files","title":"Special files","text":"<p>Some special files are looked for and (if they exist) loaded as specified below, to help your plugin hook into the CMS:</p> <p>Views (partials): * <code>ShinyThing/app/views/shiny_thing/menu/_section.html.erb</code> will be rendered as a new section in the main site menu * <code>ShinyThing/app/views/shiny_thing/profile/_content.html.erb</code> will be rendered in the 'content posted by this user' section of the user's profile page, if the ShinyProfiles plugin is loaded * <code>ShinyThing/app/views/shiny_thing/search/result/shiny_thing/_model_name.html.erb</code> will be rendered when content from your plugin appears in the search results, if the ShinySearch plugin is loaded and you have hooked your models into it * <code>ShinyThing/app/views/shiny_thing/admin/menu/_section.html.erb</code> will be rendered as a new section in the admin area menu * <code>ShinyThing/app/views/shiny_thing/admin/menu/_other_item.html.erb</code> will be rendered as an item in the Other section of the admin area menu * <code>ShinyThing/app/views/shiny_thing/admin/toolbar/_section.html.erb</code> will be rendered in the admin toolbar</p> <p>Helpers: * Methods in <code>ShinyThing/app/helper/shiny_thing/MainSiteHelper.rb</code> will be available to all main site views, not just those rendered by your plugin's controllers</p>"},{"location":"Developers/Plugins/#boundaries","title":"Boundaries","text":"<p>ShinyCMS uses a gem called Packwerk to check on coupling across architectural boundaries.</p> <p>The short version is that you should only be using interfaces exposed as public by other plugins that you have explicitly declared a dependency on, rather than 'reaching into the middle' of other plugins or depending on them unexpectedly.</p> <p>The core ShinyCMS plugin has quite a lot of exposed interfaces for your plugin to leverage; base controllers you can inherit from, concerns and helpers you can use, etc etc. You can find all of this code in its <code>app/public</code> directory. Most other plugins will have far less public code exposed, as the idea is to keep them independent of each other as much possible, so that people only have to enable the ones that they want to use for a particular site.</p> <p>Packwerk uses <code>package.yml</code> files in each plugin to know what is and isn't inside its boundaries, and which other plugins it explicitly depends on (for example, ShinyNewsletters depends on ShinyLists).</p> <p>The command <code>bin/packwerk validate</code> will check to make sure those <code>package.yml</code> files are all syntaxually valid, and the command <code>bin/packwerk check</code> will check the boundaries and report any violations it finds. Typically these are when code in one plugin directly accesses a class or module from another plugin without declaring a dependency on that plugin, or accesses a class or module that the other plugin has not made public.</p>"},{"location":"Developers/Plugins/#share-and-enjoy","title":"Share and Enjoy!","text":"<p>If possible, please share your plugin with other ShinyCMS users, by making a PR back to the main ShinyCMS-ruby repo on GitHub! :)</p>"},{"location":"Developers/ProjectGoals/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/ProjectGoals/#project-goals","title":"Project Goals","text":"<p>This rewrite of ShinyCMS started out as as an educational exercise, giving me an opportunity to build a Ruby on Rails application from scratch and largely by myself. As it's gone on, it's been nice to have time for proper testing (100% coverage!), regular refactoring, and all the other things I don't get to do enough of at work :)</p> <p>The original, Perl version of ShinyCMS was built to satisfy the varied requirements of a number of clients during 10 years of working as a freelance web developer, so it's not a small project. Even though I built the vast majority of it, I was still surprised at the length of the feature list when I tried to list it all out near the start of this project.</p> <p>My intention is to re-implement all of those features in the Ruby version (with some improvements), as 'Phase 1' of this project - then move onto adding new features after that.</p> <p>I am completely open to new features being written by other people; fork the code and go for it! I'd love to hear from you when you start, but it's not compulsory :)</p> <p>If you want to get involved in implementation of one of the features that I'm already halfway through re-implementing, or one that's on the original feature list but not yet started in this version of the CMS, please have a quick chat with me first (and I'll probably say \"Great, thanks!\")</p>"},{"location":"Developers/ProjectGoals/#progress-so-far","title":"Progress so far","text":"<p>See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable.</p> <p>See 'to-do' column one on the project board for features from the original ShinyCMS that I haven't started implementing in this version yet. Column two has ideas for new features (that I'm trying to resist building until I've caught up with the Perl feature list). The third to-do column is plans for refactoring and other improvements that I hope to make to the code I've already written. Lots to do!</p> <p>All my 'in progress' tasks are on the board too (column 5), usually with notes about how far I've got / what comes next / what I'm stuck on.</p> <p>(There are still some to-do items in the old TODO document as well; I'll get them all transferred to the project board eventually!)</p>"},{"location":"Developers/TODO/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/TODO/#todo","title":"TODO","text":"<p>Note: a lot of the TODO list has been moved to the ShinyCMS project board (as has the entire 'in progress' list)</p>"},{"location":"Developers/TODO/#new-features-that-id-like-to-add-at-some-point","title":"New features that I'd like to add at some point...","text":""},{"location":"Developers/TODO/#small-ish","title":"Small-ish","text":"<ul> <li> <p>Make a generic sidebar template that renders any partials in a specified directory</p> </li> <li> <p>Add links to the in-page alerts, where helpful? e.g. \"You must log in first\"</p> <ul> <li>https://guides.rubyonrails.org/i18n.html#using-safe-html-translations</li> <li>https://www.ruby-toolbox.com/projects/it</li> </ul> </li> <li> <p>Re-assess use of helpers (vs models/libs/whatever) for Akismet and reCaptcha (and others?)</p> </li> <li> <p>On email recipients admin page, link to a summary of their comments and newsletter subscriptions (if any exist)</p> </li> <li> <p>Allow an EmailRecipient to reset their token (in case they forward an email containing it to somebody else)</p> </li> <li> <p>When not-logged-in users post a comment or subscribe to a list, offer to create an account for them</p> </li> <li> <p>Check site config for internal consistency on startup</p> <ul> <li>e.g. if reCAPTCHA is enabled for registrations, the reCAPTCHA keys must be set</li> </ul> </li> <li> <p>Configurable (per-site and per-user) menu order in admin area</p> <ul> <li>( Per-site is currently partially possible, by changing the order plugins appear in ENV['SHINYCMS_PLUGINS'] )</li> </ul> </li> <li> <p>In admin area, load the full dataset for user capabilities, feature flags,   and possibly site settings, and stick them in some hashes, with some helper   methods to check them. The menu already makes a crazy amount of hits on the   db and there are still a load of 'feature hidden by flag/capability/etc'   conditionals to implement.</p> </li> <li> <p>Add tests for form actions being what they're supposed to be on new/edit pages,   and for delete links being correct on list pages (to catch path helper issues)</p> </li> <li> <p>Make textarea inputs grow as needed</p> <ul> <li>http://www.cryer.co.uk/resources/javascript/script21_auto_grow_text_box.htm</li> </ul> </li> <li> <p>Switch pagination to use JS helpers, to give site builders more flexibility?</p> </li> <li> <p>Delete ahoy and session data when Akismet reports blatant spam? (make configurable)</p> </li> </ul>"},{"location":"Developers/TODO/#medium-ish","title":"Medium-ish","text":"<ul> <li> <p>Refactor show/hide/visible/published/etc stuff</p> <ul> <li>CanHide could become a polymorphic acts_as_showable sort of thing?<ul> <li>show_on( :site ), show_in( :menus ), show_on( :sitemap ), etc</li> </ul> </li> </ul> </li> <li> <p>Add folding to page sections on /admin/pages</p> <ul> <li>Add 'fold all' and 'open all' options (here, and anywhere else that has folding too)</li> <li>Decide 'intelligently' whether to fold all/none/some<ul> <li>(e.g. if there are &gt;20 pages in total, fold any section containing &gt;10 pages; if there are &gt;10 sections and &gt;100 pages in total, fold all sections; etc)</li> </ul> </li> </ul> </li> <li> <p>Blazer:</p> <ul> <li>Investigate alternatives? https://github.com/ankane/blazer/pull/316 :(<ul> <li>daru-view ?? https://github.com/SciRuby/daru-view#readme</li> </ul> </li> <li>Fix admin ACL; currently if you can view, you can add/update/delete too<ul> <li>Wrap in a thin ShinyStats plugin, to give it standard auth and feature flagging</li> </ul> </li> </ul> </li> <li> <p>Add a polymorphic metatags model+helpers so they can be added to anything that might want them for SEO</p> <ul> <li>pages/sections, shop items/categories, etc</li> </ul> </li> <li> <p>Multi-channel notifications: https://github.com/excid3/noticed#readme</p> </li> <li> <p>Tests for rake tasks</p> <ul> <li>https://thoughtbot.com/blog/test-rake-tasks-like-a-boss ? (old)</li> </ul> </li> <li> <p>Improve UX for slug auto-generation</p> <ul> <li>Look at Fae CMS slugger: https://www.faecms.com/documentation/features-slugger</li> </ul> </li> <li> <p>A/B testing</p> <ul> <li>Field Test: https://github.com/ankane/field_test</li> </ul> </li> <li> <p>Replace hand-rolled slug generation with FriendlyId ?</p> <ul> <li>https://norman.github.io/friendly_id</li> </ul> </li> <li> <p>Fix geolocation (for web stats) via Cloudflare?</p> <ul> <li>https://support.cloudflare.com/hc/en-us/articles/200168236-Configuring-Cloudflare-IP-Geolocation</li> </ul> </li> </ul>"},{"location":"Developers/TODO/#large-ish","title":"Large-ish","text":"<ul> <li> <p>Investigate RBS - https://github.com/ruby/rbs#readme</p> <ul> <li>https://honeyryderchuck.gitlab.io/httpx/2020/10/16/rbs-duck-typing-at-httpx.html</li> </ul> </li> <li> <p>View Components sound very interesting... https://viewcomponent.org</p> </li> <li> <p>Re-think mailer preview features</p> <ul> <li>Can I use https://guides.rubyonrails.org/action_mailer_basics.html#previewing-emails instead of REP?</li> </ul> </li> <li> <p>Image galleries / multimedia galleries / etc</p> </li> <li> <p>Can I merge EmailRecipient, CommentAuthor, and VotableIP, to make 'Visitor' ?</p> <ul> <li>Think about privacy implications of linking prior actions to current visitor</li> </ul> </li> <li> <p>GDPR compliance</p> <ul> <li>https://github.com/prey/gdpr_rails ?</li> </ul> </li> <li> <p>Switch main site templates from ERB to liquid / handlebars / similar ?</p> </li> <li> <p>Allow in-situ editing of Page (and other?) content</p> <ul> <li>Mercury: https://jejacks0n.github.io/mercury</li> </ul> </li> <li> <p>Replace hand-rolled trees and recursion (page sections, etc) with ClosureTree ?</p> <ul> <li>https://github.com/ClosureTree/closure_tree</li> </ul> </li> <li> <p>Integrate a wiki?</p> <ul> <li>https://www.ruby-toolbox.com/categories/wiki_apps</li> </ul> </li> <li> <p>Integrate a static site generator?</p> <ul> <li>https://www.ruby-toolbox.com/categories/static_website_generation</li> </ul> </li> <li> <p>Run multiple ShinySites from one ShinyCMS installation?</p> <ul> <li>https://www.ruby-toolbox.com/categories/Multitenancy</li> </ul> </li> </ul>"},{"location":"Developers/TODO/#done-in-progress","title":"Done / In Progress","text":"<p>See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable.</p> <p>See the 'In Progress' column of the ShinyCMS project board for features that I am currently working on (with notes on where I'm up to, links to useful docs, etc).</p>"},{"location":"Developers/Testing/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/Testing/#testing","title":"Testing","text":"<p>ShinyCMS, including all the plugins, has 100% test coverage, with a minimal amount of :nocov: cheating (mostly the rake tasks).</p>"},{"location":"Developers/Testing/#how-do-i-run-the-tests","title":"How do I run the tests?","text":"<p>To run the test suite: <code>rspec</code></p> <p>To run the linter: <code>rubocop</code></p> <p>Both of these should be run from the project's root directory - they will check all the plugins in one run.</p> <p>To test a single plugin, run <code>rspec plugins/Shiny{Thing}</code> from the project's root directory.</p>"},{"location":"Developers/Testing/#how-often-should-i-run-the-tests","title":"How often should I run the tests?","text":"<p>At minimum, you should run rubocop and the test suite, and fix any issues they find, before submitting a pull request. I recommend running them much more often than that :) They're particularly useful (and reassuring) when refactoring - as discussed by Bob Martin: 'Fearless Competence'.</p>"},{"location":"Developers/Testing/#how-do-i-get-git-to-do-this-for-me","title":"How do I get git to do this for me? :)","text":"<p>To run various checks and tests automatically whenever you commit or push new code, install Overcommit and follow its instructions - an Overcommit config file is included with ShinyCMS.</p>"},{"location":"Developers/Testing/#what-should-i-test","title":"What should I test?","text":"<p>Please write tests for any and all new code that you add. At the very least, test the golden path with a request spec. If you're catching errors and turning them into helpful warnings for the user, you should also test that's working as intended. (And if you're not doing that, you probably should be.)</p> <p>You should put extra testing around anything that has particularly bad consequences if it goes wrong (e.g. data loss, data leaks, privilege escalation, etc).</p> <p>It's also helpful to put extra tests around anything that's a bit unusual - your tests can potentially double up as practical usage documentation when other people are looking at your code.</p>"},{"location":"Developers/Testing/#parallel-test-runs","title":"Parallel test runs","text":""},{"location":"Developers/Testing/#experimental-feature","title":"(Experimental feature!)","text":"<p>For a speedier test run, you can try the <code>tools/parallel-rspec</code> utility script. This uses the parallel_tests gem to run the tests in parallel, spread across all the cores on your machine. On my laptop this cuts the total time taken to run the test suite down from around 3 minutes to around 90 seconds, at the cost of working the CPU nearly flat out on all 12 cores - which doesn't really seem worth the fan noise, but YMMV.</p> <p>The <code>parallel_tests</code> gem uses multiple databases (one per core) to achieve its magic; you will need to create these using <code>tools/parallel-rspec-create</code>, and refresh them with <code>tools/parallel-rspec-prepare</code> if you change the database structure.</p> <p>(See <code>rails --tasks | grep parallel</code> for other available rake tasks for <code>parallel_tests</code>. If you use any of these rake tasks, make sure you pass them the same ENV vars that are passed into each command by the <code>tools/parallel-rspec*</code> utility scripts - in particular, <code>parallel_tests</code> doesn't seem to default to the test environment!)</p> <p>Note: while adding this feature I had a few problems with 'flickering' tests - failing once, fine on a re-run. If you find <code>parallel-rspec</code> is unreliable for you, stick with normal <code>rspec</code> instead :)</p>"},{"location":"Developers/code-quality/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/code-quality/#code-quality","title":"Code Quality","text":"<p>ShinyCMS includes config files and/or gems for a number of code quality tools and services.</p>"},{"location":"Developers/code-quality/#rubocop","title":"Rubocop","text":"<p>Rubocop is a linter which helps keep the code style consistent throughout the project, and in line with best practices that have been largely agreed in the Ruby community. There are a few items in the ShinyCMS rubocop configuration that are not default, mostly around whitespace and alignment.</p> <p>Please make sure your code passes rubocop with the ShinyCMS config before submitting a PR; you can usually just use <code>rubocop -a</code> to autocorrect the whitespace for you.</p>"},{"location":"Developers/code-quality/#ruby-critic","title":"Ruby Critic","text":"<p>This is a tool you install and run locally. Currently it's having some dependency version issues with Ruby 3.0 and has been commented out in the ShinyCMS Gemfile, so you'll need to install it manually: <code>gem install rubycritic</code></p> <p>Ruby Critic runs three static code analysis tools - flog, reek - and then generates easy-to-read HTML reports of what they find. A config file is included at .rubycritic.yml which specifies which paths it should run the tools against - mainly it's the <code>app</code> directory in the main app and each plugin.</p> <p>You generate an up-to-date report by running <code>rubycritic</code>. You can then find the report in <code>ShinyCMS/tmp/rubycritic/</code> and open it in any web browser to find files with potential code quality issues (complexity, duplication, etc).</p>"},{"location":"Developers/code-quality/#other-services","title":"Other services","text":"<p>ShinyCMS is also checked for code quality with CodeClimate, CodeBeat, and CodeFactor, and there are config files for some of these where necessary/helpful (usually to ignore certain files).</p> <p>ShinyCMS is also checked with Hakiri and Dependabot for potential security issues in the ShinyCMS code and/or its dependencies.</p>"},{"location":"Developers/controller-concerns/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/controller-concerns/#supporting-code-controller-concerns","title":"Supporting code: controller concerns","text":"<p>There are several controller concerns provided with ShinyCMS. As with well as DRYing up common features, I hope these will make it easier for other developers to build new features that [work similarly][Why does this matter?] to the existing features (from both a user and developer perspective).</p>"},{"location":"Developers/controller-concerns/#in-the-core-plugin","title":"In the core plugin","text":""},{"location":"Developers/controller-concerns/#for-main-site-controllers-or-both","title":"For main site controllers (or both)","text":"<ul> <li> <p>ShinyCMS::FeatureFlags</p> <ul> <li>Provides the <code>enforce_feature_flags</code> method used in any controller which implements feature-flagged functionality</li> </ul> </li> <li> <p>ShinyCMS::Paging</p> <ul> <li>Includes Pagy::Backend, and provides a couple of helper methods for getting items-per-page values from params or defaults from settings</li> <li>May well become obsolete once Pagy's items extra is integrated - if the supporting methods go, it would be clearer to include Pagy::Backend directly in the controllers</li> </ul> </li> <li> <p>ShinyCMS::PasswordReportAction</p> <ul> <li>Provides the <code>password_report</code> action, which can be mixed into any controller to provide a JSON endpoint for obtaining password reports containing complexity scores and advice (powered by zxcvbn)</li> </ul> </li> <li> <p>ShinyCMS::Votes</p> <ul> <li>Provides <code>url_param_to_class_name</code> method, which reverses <code>name_to_url_param</code> from the ShinyCMS::HasVotes model concern.</li> </ul> </li> </ul>"},{"location":"Developers/controller-concerns/#for-admin-controllers-only","title":"For admin controllers only","text":"<ul> <li> <p>ShinyCMS::Admin::Discussions</p> <ul> <li>Provides methods for dealing with the show/hide flags for discussions when editing a related resource</li> <li>(This seems like poor separation of concerns - and it'll be even worse when Discussions gets its own plugin)</li> </ul> </li> <li> <p>ShinyCMS::Admin::Posts</p> <ul> <li>Provides methods to handle attempts to set an author other than the logged-in user for e.g. a News Post (a capability controlled by the Pundit ACL)</li> </ul> </li> <li> <p>ShinyCMS::Admin::Sorting</p> <ul> <li>Provides methods to help implement the drag-to-sort feature</li> </ul> </li> <li> <p>ShinyCMS::Admin::Tags</p> <ul> <li>Provides a method to render tags or hidden tags (into the tag_list field on the edit page) depending on the show/hide status of the resource being edited</li> </ul> </li> </ul>"},{"location":"Developers/demo-data/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/demo-data/#demo-site-data","title":"Demo site data","text":"<p>The demo site data can be loaded and updated using the <code>rails shiny:demo:*</code> rake tasks:</p>"},{"location":"Developers/demo-data/#to-load-the-existing-demo-data","title":"To load the existing demo data","text":"<p>Run <code>rails shiny:demo:load</code> (and reply 'Y' to the 'Are you sure?' question) - this will first run <code>rails db:reset</code> (losing any data that is currently in the database!) and then it will load in the demo site data. Finally, it will prompt you to enter login details for a new super-admin account, and it will create that for you.</p> <p>If you're reloading the demo data frequently for some reason, you may wish to set some or all of the following ENV vars to save you from having to type the details in each time the admin account is recreated: SHINYCMS_ADMIN_USERNAME, SHINYCMS_ADMIN_EMAIL, SHINYCMS_ADMIN_PASSWORD.</p> <p>Using these ENV vars has obvious security implications - particularly the last one! Please do not use them in a production environment, or on a shared server, or anywhere else that it might be a bad idea to publicly share the login details for your CMS admin account.</p>"},{"location":"Developers/demo-data/#to-create-a-new-version-of-the-demo-data","title":"To create a new version of the demo data","text":"<p>Run <code>rails shiny:demo:dump</code> - this will dump the current contents of the database into <code>db/demo_data.rb</code> (for each model that includes the ShinyDemoDataProvider concern)</p>"},{"location":"Developers/done/","title":"ShinyCMS: Project Progress","text":""},{"location":"Developers/done/#done","title":"Done","text":"<p>(Note: this document is out of date and doesn't include all currently-implemented features.)</p>"},{"location":"Developers/done/#features-from-the-perl-version-that-are-now-available-in-the-ruby-version","title":"Features from the Perl version that are now available in the Ruby version","text":"<p>(Noting improvements from the Perl version, if any)</p> <ul> <li>Pages, with page templates, page sections, and dynamically-generated menus<ul> <li>Improvements: the Perl version requires all pages to be in a section, and you can only nest sections two levels deep. The Ruby version allows you to have pages at the top-level of your site, and to nest sections to any depth</li> </ul> </li> <li>Inserts (re-usable content fragments that can be pulled into any template)<ul> <li>Improvements: snappier name? ;) (Renamed from Shared Content to Inserts)</li> </ul> </li> <li>Access control for content on main site (separate from auth system for admin area)</li> <li>Basic form handlers<ul> <li>Improvements: MJML email templates</li> </ul> </li> <li>Blog<ul> <li>Improvements: Split up single-blog and multi-blog versions (the latter of which was never fully implemented in the Perl version but just cluttered up the codebase a bit) into two separate plugins. Now the multi-blog feature is in an unmerged development branch and the merged single-blog code is much cleaner</li> </ul> </li> <li>News section</li> <li>Newsletters and mailing lists<ul> <li>Improvements:<ul> <li>Email address verification (AKA double opt-in) for email recipients</li> <li>MJML templates</li> <li>Records exact consent text agreed to for list subscriptions (for GDPR compliance)</li> </ul> </li> </ul> </li> <li>Nested comment threads<ul> <li>Currently enabled on blog posts and news posts</li> <li>Ready to add to any other content type going forward</li> <li>Improvements:<ul> <li>Perl's main ORM doesn't have native support for polymorphism, and in fact I'd never heard of polymorphism at the time - but to get the comments feature to work how I wanted, I basically came up with all the same ideas. The Ruby version uses ActiveRecord's native polymorphism, which is no doubt better than my hand-rolled version :)</li> <li>MJML templates for reply notification emails</li> <li>Double opt-in required before sending notification emails</li> </ul> </li> </ul> </li> <li>Tags<ul> <li>Currently enabled on blog posts and news posts</li> <li>Ready to add to any other content type going forward</li> <li>Improvements: more generic implementation (powered by ActAsTaggableOn)</li> </ul> </li> <li>'Likes'<ul> <li>Currently enabled on comments, blog posts, and news posts</li> <li>Ready to add to any other content type going forward</li> <li>Improvements: adds optional 'downvote' feature; more generic implementation (powered by ActsAsVoteable)</li> </ul> </li> <li>Site search<ul> <li>Improvements: Support for multiple search back-ends</li> </ul> </li> <li>User accounts and administration<ul> <li>Improvements:</li> <li>The Perl version has role-based authorisation. The Ruby version has   more flexible ACL-based authorisation (powered by Pundit).</li> <li>MJML templates for all user account emails (welcome, forgot password, etc)</li> </ul> </li> <li>User profile pages<ul> <li>With links to user-generated content, e.g. recent comments/blog posts/etc</li> </ul> </li> <li>reCAPTCHA bot protection for registrations, comments, and forms<ul> <li>Improvements: supports reCAPTCHA v3 with scores. Tries an invisible CAPTCHA first, falling back to an interactive CAPTCHA if that fails.</li> </ul> </li> <li>Akismet support, to flag potential spam comments and form submissions<ul> <li>Comment moderation queue in admin area</li> <li>Confirming/removing flag sends ham/spam training data to Akismet</li> <li>Improvements: the Perl version doesn't feed back to Akismet (yet)</li> </ul> </li> </ul>"},{"location":"Developers/done/#features-that-the-perl-version-didnt-have-but-the-ruby-version-does","title":"Features that the Perl version didn't have, but the Ruby version does","text":"<ul> <li>Support for themes<ul> <li>Low-lift; override the core templates on a per-file, as-needed basis</li> <li>Two themes included</li> </ul> </li> <li>ShinyConcerns<ul> <li>While re-implementing various features I've tried to pull useful common   functionality out into concerns, that might be handy building blocks for   anybody else who wants to write a ShinyCMS plugin</li> </ul> </li> <li>Recoverable soft delete on almost all models (powered by ActsAsParanoid)</li> <li>Admin page for viewing/managing (non-user) email recipients</li> <li>Double opt-in for comment notification emails, newsletter subscriptions, etc</li> <li>Email open and click tracking (powered by Ahoy::Email)<ul> <li>Disabled by default (privacy, yay!)</li> </ul> </li> <li>Web tracking (powered by Ahoy) - track visits, visitors, page views, etc<ul> <li>Disabled by default, and has support for GDPR-friendly stats (IP masking, etc)</li> </ul> </li> <li>Build your own charts and dashboards to dig into the data gathered by Ahoy (powered by Blazer)</li> </ul>"},{"location":"Developers/done/#todo-in-progress","title":"TODO / In Progress","text":"<p>See the multiple 'To-do' columns of the ShinyCMS project board for features from the original ShinyCMS that I haven't started implementing in this version yet, and ideas for new features too (theoretically to be built after the first list, but... things happen) ;)</p> <p>There are also still to-do items in the old TODO document, which are slowly being transferred to the board as I get a chance.</p> <p>Everything from the old 'in-progress' document has now been moved to the 'In Progress' column of the project board.</p>"},{"location":"Developers/helpers/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/helpers/#supporting-code-helpers","title":"Supporting code: helpers","text":"<p>Most of the helpers provide formatters, presentation logic, or wrappers around common uses of a model from a view (adding some much-needed isolation/abstraction in this last case).</p> <p>Hopefully they will make it easier for people to build themes even if they're not hugely familiar with ActiveRecord). For example, this code using a helper: <code>&lt;% posts = recent_blog_posts( 5 ) %&gt;</code> returns the same results as this code using a model: <code>&lt;% posts = ShinyBlog::Post.readonly.recent.limit( 5 ) %&gt;</code></p>"},{"location":"Developers/helpers/#from-core-plugin","title":"From core plugin","text":"<ul> <li> <p>MainSiteHelper     - no code, but includes all the helpers below that are useful on the main site</p> </li> <li> <p>AdminAreaHelper    - helper methods for admin area views and controllers</p> </li> <li> <p>PluginsHelper      - the <code>plugin_loaded?</code> method</p> </li> <li> <p>DatesHelper        - turn DateTime objects into human-readable dates and times</p> </li> <li>DiscussionsHelper  - methods to get discussion settings and fetch recent comments</li> <li>ElementsHelper     - the <code>element_types</code> method, for populating drop-down menu</li> <li>FeatureFlagsHelper - the <code>feature_enabled?</code> method</li> <li>PagingHelper       - methods to help with pagination</li> <li>SiteNameHelper     - the <code>site_name</code> method</li> <li> <p>UsersHelper        - provides user-capability checks and profile link generation</p> </li> <li> <p>AkismetHelper      - methods related to the Akismet spam-flagging service</p> </li> <li>RecaptchaHelper    - methods related to Google's reCAPTCHA bot detection service</li> </ul>"},{"location":"Developers/helpers/#from-feature-plugins","title":"From feature plugins","text":"<p>Methods defined in feature plugin helpers called <code>MainSiteHelper</code> are automatically loaded and made available to views throughout the entire CMS.</p> <ul> <li> <p>ShinyBlog::MainSiteHelper     - get most recent published posts, for use in sidebars etc</p> </li> <li> <p>ShinyForms::MainSiteHelper    - look up a form by slug</p> </li> <li> <p>ShinyInserts::MainSiteHelper  - get the content for an insert element, or check its type</p> </li> <li> <p>ShinyLists::MainSiteHelper    - look up a mailing list by slug (or fall back to most recent list)</p> </li> <li> <p>ShinyNews::MainSiteHelper     - get most recent published posts, for use in sidebars etc</p> </li> <li> <p>ShinyPages::MainSiteHelper    - page and page sections (default_page, default_section, etc)</p> </li> <li> <p>ShinyProfiles::MainSiteHelper - find plugins with user-content partials to include on profile pages</p> </li> <li> <p>ShinySearch::MainSiteHelper   - check which search backends are enabled, and related methods</p> </li> </ul>"},{"location":"Developers/in-progress/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/in-progress/#in-progress","title":"In progress","text":"<p>Everything that was in this document has now been moved to the 'In Progress' column of the ShinyCMS project board</p>"},{"location":"Developers/in-progress/#done-todo","title":"Done / TODO","text":"<p>See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable.</p> <p>See the multiple 'To-do' columns of the ShinyCMS project board for features from the original ShinyCMS that I haven't started implementing in this version yet, and ideas for new features too (theoretically to be built after the first list, but... things happen) ;)</p> <p>There are also still to-do items in the old TODO document, which are slowly being transferred to the board as I get a chance.</p>"},{"location":"Developers/model-concerns/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/model-concerns/#supporting-code-model-concerns","title":"Supporting code: model concerns","text":""},{"location":"Developers/model-concerns/#in-the-core-plugin","title":"In the core plugin","text":"<ul> <li>CanHide         - check or change visible/hidden status of content</li> <li>HasEmail        - sets/searches/validates canonical_email as well as email</li> <li>HasPublicName   - <code>.name</code> method - returns public_name if set, internal_name otherwise</li> <li>HasReadableName - get a human-readable (and optionally, localised) version of model's class name</li> <li>HasTags         - pulls in ActsAsTaggableOn and adds helper methods to hide tags on hidden content</li> <li>HasTeaser       - generate a 'teaser' from first N paragraphs of a longer post</li> <li>HasToken        - common behaviour for models with UUID token attributes</li> <li>HasVotes        - pulls in ActsAsVotable, plus method to get URL-safe class name</li> <li> <p>SoftDelete      - adds soft delete (from acts_as_paranoid gem)</p> </li> <li> <p>HasSlug                - for models with a slug attribute (usually for URLs)</p> </li> <li>HasSlugUniqueInMonth   - slug is only unique within a month (includes HasSlug)</li> <li> <p>HasSlugUniqueInSection - slug is only unique within a section (includes HasSlug)</p> </li> <li> <p>ProvidesDemoSiteData   - for models that may provide data for the demo site</p> </li> <li> <p>ProvidesSitemapData    - for models that may provide data for the sitemap</p> </li> <li> <p>Post            - common behaviour for 'posts' (e.g. ShinyBlog::Post, ShinyNews::Post) (includes CanHide, HasReadableName, HasSlugUniqueInMonth, HasTags, HasTeaser, HasVotes, and SoftDelete)</p> </li> </ul>"},{"location":"Developers/model-concerns/#templates-and-templated-content","title":"Templates and templated content","text":"<ul> <li>Template        - common attributes and behaviour for any kind of layout template</li> <li>HTMLTemplate    - HTML-based layout templates (e.g. ShinyPages::Template) (includes Template)</li> <li> <p>MJMLTemplate    - MJML-based layout templates (e.g. ShinyNewsletters::Template) (includes Template)</p> </li> <li> <p>HasTemplate     - content that has its layout defined by a template (e.g. ShinyPages::Page, ShinyNewsletters::Edition)</p> </li> <li> <p>Element         - common behaviour for elements of templates and templated content</p> </li> <li>TemplateElement - elements of a layout template (e.g. ShinyPages::TemplateElement, ShinyNewsletters::TemplateElement) (includes Element)</li> </ul>"},{"location":"Developers/model-concerns/#in-feature-plugins","title":"In feature plugins","text":"<ul> <li>ShinySearch::Searchable - for models that want to be discoverable by the search feature</li> </ul>"},{"location":"Developers/other-modules/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/other-modules/#supporting-code-other-modules","title":"Supporting code: other modules","text":""},{"location":"Developers/other-modules/#in-the-core-plugin","title":"In the core plugin","text":"<p>Location: <code>plugins/ShinyCMS/app/lib/shinycms/</code></p> <ul> <li> <p>ShinyCMS::DemoSiteData - methods used by the shinycms:demo:* rake tasks to import or export the demo site data</p> </li> <li> <p>ShinyCMS::MainAppRootURL - helper methods to return the root_url for the website, whether ShinyCMS is in charge of that path or not</p> </li> <li> <p>ShinyCMS::RouteDelegator - a mildly complicated routing bodge which helps ShinyCMS embed non-ShinyCMS engines into the ShinyCMS admin area, even if they weren't designed with that sort of embedded usage in mind</p> </li> </ul>"},{"location":"Developers/rake-tasks/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/rake-tasks/#rake-tasks","title":"Rake tasks","text":"<p>ShinyCMS includes some rake tasks which are probably only useful to people developing new CMS features.</p>"},{"location":"Developers/rake-tasks/#demo-site-data","title":"Demo site data","text":"<pre><code>rails shinycms:demo:export    # ShinyCMS: export current database content into db/demo_site_data.rb\n</code></pre> <p>This export task is useful if you are a developer who is adding a new feature to ShinyCMS, and you want to add some demo data for that new feature, to make it easier for people to try it out.</p>"},{"location":"Developers/Notes/bullet/","title":"ShinyCMS Developer Notes","text":""},{"location":"Developers/Notes/bullet/#bullet-recommendations","title":"Bullet recommendations","text":"<p>Docs: https://github.com/flyerhzm/bullet#log</p>"},{"location":"Developers/Notes/bullet/#n1-and-counter_cache-warnings","title":"N+1 and counter_cache warnings","text":"<p>None. Which feels slightly suspicious; it seems unlikely that I didn't slip up anywhere.</p>"},{"location":"Developers/Notes/bullet/#use-eager-loading","title":"Use eager loading","text":"<p>GET /newsletters USE eager loading detected   ShinyNewsletters::Send =&gt; [:edition]   Add to your query: .includes([:edition]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/newsletters/index.html.erb:14:in <code>block in _plugins__hiny_ewsletters_app_views_shiny_newsletters_newsletters_index_html_erb___1313984291077648699_509180'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/newsletters/index.html.erb:12:in</code>each'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/newsletters/index.html.erb:12:in <code>_plugins__hiny_ewsletters_app_views_shiny_newsletters_newsletters_index_html_erb___1313984291077648699_509180'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/spec/requests/shiny_newsletters/newsletters_controller_spec.rb:28:in</code>block (3 levels) in ' <p>GET /newsletters USE eager loading detected   ShinyNewsletters::Send =&gt; [:edition]   Add to your query: .includes([:edition]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/newsletters/index.html.erb:14:in <code>block in _plugins__hiny_ewsletters_app_views_shiny_newsletters_newsletters_index_html_erb___1313984291077648699_509180'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/newsletters/index.html.erb:12:in</code>each'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/newsletters/index.html.erb:12:in <code>_plugins__hiny_ewsletters_app_views_shiny_newsletters_newsletters_index_html_erb___1313984291077648699_509180'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/spec/requests/shiny_newsletters/newsletters_controller_spec.rb:48:in</code>block (4 levels) in ' <p>GET /admin/newsletters/sends USE eager loading detected   ShinyNewsletters::Send =&gt; [:list]   Add to your query: .includes([:list]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/admin/sends/_sends.html.erb:23:in <code>block in _plugins__hiny_ewsletters_app_views_shiny_newsletters_admin_sends__sends_html_erb__1293562048999176340_469980'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/admin/sends/_sends.html.erb:17:in</code>_plugins__hiny_ewsletters_app_views_shiny_newsletters_admin_sends__sends_html_erb__1293562048999176340_469980'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/app/views/shiny_newsletters/admin/sends/index.html.erb:14:in <code>_plugins__hiny_ewsletters_app_views_shiny_newsletters_admin_sends_index_html_erb___1839985450544989618_469920'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/spec/requests/shiny_newsletters/admin/sends_controller_spec.rb:213:in</code>block (3 levels) in '"},{"location":"Developers/Notes/bullet/#avoid-eager-loading","title":"Avoid eager loading","text":"<p>GET /blog/2021/03/kakistocrat AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/comments_controller_spec.rb:165:in `block (3 levels) in ' <p>GET /blog/2021/03/nervous-energy AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/comments_controller_spec.rb:182:in `block (3 levels) in ' <p>GET /news/2021/03/arrested-development AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/comments_controller_spec.rb:196:in `block (3 levels) in ' <p>GET /news/2021/03/t3ou-4 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/comments_controller_spec.rb:212:in `block (3 levels) in ' <p>GET /blog/2021/03/thank-you-and-goodnight AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/comments_controller_spec.rb:226:in `block (3 levels) in ' <p>GET /discussion/54 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/discussions_controller_spec.rb:51:in `block (3 levels) in ' <p>GET /discussion/55 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/discussions_controller_spec.rb:64:in `block (3 levels) in ' <p>GET /discussion/56 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/admin/discussions_controller_spec.rb:80:in `block (3 levels) in ' <p>GET /news/2021/03/teething-problems AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:45:in `block (3 levels) in ' <p>GET /discussion/61 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:75:in `block (3 levels) in ' <p>GET /discussion/63/2 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:94:in `block (3 levels) in ' <p>GET /discussion/65 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:125:in `block (3 levels) in ' <p>GET /discussion/66 USE eager loading detected   ShinyCMS::User =&gt; [:profile]   Add to your query: .includes([:profile]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/models/shinycms/user.rb:41:in <code>name'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/helpers/shinycms/users_helper.rb:27:in</code>user_profile_link'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/views/shinycms/discussions/comment/_posted_by.html.erb:5:in <code>_plugins__hiny____app_views_shinycms_discussions_comment__posted_by_html_erb___4188795360876021136_321580'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/views/shinycms/discussions/comment/_header.erb:10:in</code>_plugins__hiny_appviews_shinycms_discussions_commentheader_erb2556141725059801205321560'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/views/shinycms/discussions/_comment.html.erb:4:in <code>_plugins__hiny____app_views_shinycms_discussions__comment_html_erb___2468144538814618845_321520'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/views/shinycms/discussions/_comment_thread.html.erb:4:in</code>_pluginshiny_appviews_shinycms_discussionscomment_thread_html_erb__2061937146636906666_321500'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/views/shinycms/discussions/_top_level.html.erb:3:in <code>block in _plugins__hiny____app_views_shinycms_discussions__top_level_html_erb___1714185828006341270_321400'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/views/shinycms/discussions/_top_level.html.erb:1:in</code>_plugins__hiny_appviews_shinycms_discussionstop_level_html_erb___1714185828006341270_321400'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/app/views/shinycms/discussions/show.html.erb:4:in <code>_plugins__hiny____app_views_shinycms_discussions_show_html_erb__4004307419795142360_259880'   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:148:in</code>block (3 levels) in ' <p>GET /discussion/66 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:148:in `block (3 levels) in ' <p>GET /discussion/67 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:170:in `block (3 levels) in ' <p>POST /discussion/68 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:178:in `block (3 levels) in ' <p>GET /discussion/69 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:207:in `block (3 levels) in ' <p>GET /discussion/70 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:233:in `block (3 levels) in ' <p>POST /discussion/71 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:256:in `block (3 levels) in ' <p>POST /discussion/72/2 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:author]   Remove from your query: .includes([:author]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:280:in `block (3 levels) in ' <p>GET /discussion/72 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:289:in `block (3 levels) in ' <p>POST /discussion/73/2 AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/discussions_controller_spec.rb:297:in `block (3 levels) in ' <p>GET /news/2021/03/thorough-but-unreliable AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/votes_controller_spec.rb:32:in `block (3 levels) in ' <p>GET /news/2021/03/thorough-but-unreliable AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/votes_controller_spec.rb:41:in `block (3 levels) in ' <p>GET /news/2021/03/excuses-and-accusations AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/votes_controller_spec.rb:57:in `block (3 levels) in ' <p>GET /news/2021/03/meatfucker AVOID eager loading detected   ShinyCMS::Comment =&gt; [:comments]   Remove from your query: .includes([:comments]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyCMS/spec/requests/shinycms/votes_controller_spec.rb:74:in `block (3 levels) in ' <p>POST /list/appeal-to-reason/subscribe AVOID eager loading detected   ShinyLists::Subscription =&gt; [:subscriber]   Remove from your query: .includes([:subscriber]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyLists/spec/requests/shiny_lists/subscriptions_controller_spec.rb:66:in `block (3 levels) in ' <p>POST /list/grey-area/subscribe AVOID eager loading detected   ShinyLists::Subscription =&gt; [:subscriber]   Remove from your query: .includes([:subscriber]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyLists/spec/requests/shiny_lists/subscriptions_controller_spec.rb:85:in `block (3 levels) in ' <p>POST /admin/newsletters/editions AVOID eager loading detected   ShinyNewsletters::TemplateElement =&gt; [:image_attachment]   Remove from your query: .includes([:image_attachment]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/spec/requests/shiny_newsletters/admin/editions_controller_spec.rb:61:in `block (3 levels) in ' <p>POST /admin/newsletters/editions AVOID eager loading detected   ShinyNewsletters::TemplateElement =&gt; [:image_attachment]   Remove from your query: .includes([:image_attachment]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyNewsletters/spec/requests/shiny_newsletters/admin/editions_controller_spec.rb:108:in `block (3 levels) in ' <p>POST /admin/pages AVOID eager loading detected   ShinyPages::TemplateElement =&gt; [:image_attachment]   Remove from your query: .includes([:image_attachment]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyPages/spec/requests/shiny_pages/admin/pages_controller_spec.rb:83:in `block (3 levels) in ' <p>POST /admin/pages AVOID eager loading detected   ShinyPages::TemplateElement =&gt; [:image_attachment]   Remove from your query: .includes([:image_attachment]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyPages/spec/requests/shiny_pages/admin/pages_controller_spec.rb:101:in `block (3 levels) in ' <p>GET /admin/profiles/697/edit AVOID eager loading detected   ShinyProfiles::Profile =&gt; [:links]   Remove from your query: .includes([:links]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyProfiles/spec/requests/shiny_profiles/admin/profiles_controller_spec.rb:22:in `block (3 levels) in ' <p>PUT /admin/profiles/699 AVOID eager loading detected   ShinyProfiles::Profile =&gt; [:links]   Remove from your query: .includes([:links]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyProfiles/spec/requests/shiny_profiles/admin/profiles_controller_spec.rb:35:in `block (3 levels) in ' <p>GET /admin/profiles/699/edit AVOID eager loading detected   ShinyProfiles::Profile =&gt; [:links]   Remove from your query: .includes([:links]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyProfiles/spec/requests/shiny_profiles/admin/profiles_controller_spec.rb:43:in `block (3 levels) in ' <p>GET /profile/marlin/edit AVOID eager loading detected   ShinyProfiles::Profile =&gt; [:links, :profile_pic_attachment]   Remove from your query: .includes([:links, :profile_pic_attachment]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyProfiles/spec/requests/shiny_profiles/profiles_controller_spec.rb:67:in `block (4 levels) in ' <p>PUT /profile/ladawn.price AVOID eager loading detected   ShinyProfiles::Profile =&gt; [:links]   Remove from your query: .includes([:links]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyProfiles/spec/requests/shiny_profiles/profiles_controller_spec.rb:114:in `block (3 levels) in ' <p>PUT /profile/carlos_conn AVOID eager loading detected   ShinyProfiles::Profile =&gt; [:links]   Remove from your query: .includes([:links]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyProfiles/spec/requests/shiny_profiles/profiles_controller_spec.rb:159:in `block (3 levels) in ' <p>PUT /profile/carmina_glover AVOID eager loading detected   ShinyProfiles::Profile =&gt; [:links, :profile_pic_attachment]   Remove from your query: .includes([:links, :profile_pic_attachment]) Call stack   /home/denny/code/denny/ShinyCMS-ruby/plugins/ShinyProfiles/spec/requests/shiny_profiles/profiles_controller_spec.rb:136:in `block (4 levels) in '"},{"location":"Developers/Notes/import-from-perl-shinycms/","title":"ShinyCMS Developer Notes","text":""},{"location":"Developers/Notes/import-from-perl-shinycms/#copying-data-from-perl-version-to-ruby-version","title":"Copying data from Perl version to Ruby version","text":""},{"location":"Developers/Notes/import-from-perl-shinycms/#general","title":"General","text":"<p>We're assuming MySQL at Perl end, Postgres at Ruby end.</p>"},{"location":"Developers/Notes/import-from-perl-shinycms/#tables-for-features-that-have-been-re-implemented","title":"Tables (for features that have been re-implemented)","text":"<p>user -&gt; User</p> <p>role -&gt; [ set of Capability ]</p> <p>user_role -&gt; [ set of UserCapability ]</p> <p>cms_page -&gt; ShinyPages::Page     id (int-&gt; bigint)     name     url_title -&gt; slug     title     description     template -&gt; template_id     section -&gt; section_id     menu_position -&gt; sort_order     show_on_site (tinyint -&gt; boolean)     -&gt; show_in_menus     created -&gt; created_at, updated_at</p> <p>cms_page_element -&gt; ShinyPages::PageElements     id (int-&gt; bigint)     page - page_id     name     content     type -&gt; element_type     created -&gt; created_at, updated_at</p> <p>cms_template -&gt; ShinyPages::Template     id (int-&gt; bigint)     name     -&gt; description     template_file -&gt; filename     created -&gt; created_at, updated_at</p> <p>cms_template_element -&gt; ShinyPages::TemplateElement     id (int-&gt; bigint)     template -&gt; template_id     name     -&gt; content     type -&gt; element_type     created -&gt; created_at, updated_at</p> <p>cms_section -&gt; ShinyPages::Section     id (int-&gt; bigint)     name     description     -&gt; title     url_name -&gt; slug     default_page -&gt; default_page_id     -&gt; section_id     menu_position -&gt; sort_order     show_on_site (tinyint -&gt; boolean)     -&gt; show_in_menus     created -&gt; created_at, updated_at</p> <p>shared_content -&gt; ShinyInserts::Element     id (int-&gt; bigint)     name     content     type -&gt; element_type     -&gt; set_id     created -&gt; created_at, updated_at</p> <p>blog_post -&gt; ShinyBlog::Post     id (int -&gt; bigint)     title     url_title -&gt; slug     body     hidden -&gt; show_on_site (tinyint -&gt; boolean)     blog -&gt; [ gone ]     author -&gt; user_id     posted -&gt; posted_at, created_at, updated_at     discussion -&gt; [ gone - replaced by wibbly-wobbly polymorphy stuff ]</p> <p>news_item -&gt; ShinyNews::Post     id (int -&gt; bigint)     title     url_title -&gt; slug     body     hidden -&gt; show_on_site (tinyint -&gt; boolean)     author -&gt; user_id     posted -&gt; posted_at, created_at, updated_at     discussion -&gt; [ gone - replaced by wibbly-wobbly polymorphy stuff ]</p> <p>discussion -&gt; Discussion     id (int -&gt; bigint)     resource_id (int -&gt; bigint)     resource_type (DBIC class -&gt; AR class)</p> <p>comment -&gt; Comment         -&gt; CommentAuthor     uid -&gt; id (int -&gt; bigint)     id -&gt; number     discussion -&gt; discussion_id (int -&gt; bigint)     ...</p> <p>mail_recipient -?&gt; EmailRecipient -&gt; confirmed_at ?? :-\\</p> <p>mailing_list -&gt; ShinyLists::List subscription -&gt; ShinyLists::Subscription -&gt; ConsentVersion?? :-\\</p> <p>newsletter -&gt; ShinyNewsletters::Edition            -&gt; ShinyNewsletters::Send newsletter_element -&gt; ShinyNewsletters::EditionElement newsletter_template -&gt; ShinyNewsletters::Template newsletter_template_element -&gt; ShinyNewsletters::TemplateElement</p> <p>tag tagset -&gt; taggings ?? -&gt; acts-as-taggable-on gem</p> <p>comment_like -&gt; votable gem :-\\</p>"},{"location":"Developers/Notes/mailing-list-notes/","title":"ShinyCMS Developer Notes","text":""},{"location":"Developers/Notes/mailing-list-notes/#mailing-lists-discussion-groups-forums","title":"Mailing Lists ( / Discussion Groups / Forums )","text":""},{"location":"Developers/Notes/mailing-list-notes/#warning-massive-creature-feep-occurring-here","title":"(Warning! MASSIVE creature feep occurring here!)","text":"<p>Things which aren't optional: * Double opt-in subscriptions are a basic human right ;) * Instantly-effective unsubscribe links and headers in all list emails * Settings with privacy implications should default to the more private setting</p> <p>General thoughts: * UUIDs for anything that doesn't have slugs - do not expose sequential IDs!   * Good time to switch the whole system to UUIDs under the hood?     * Having read around on this, not convinced it's a good idea   * HashIDs instead? https://github.com/jcypret/hashid-rails</p> <p>Lists / Groups: * Enabled (emails will be delivered): yes/no * List details page   * Useful info: description, owner/admins, etc   * Useful links: sub/unsub, view archives, view subscribers, etc     * Subscriber list is: visible/hidden * Hidden: yes/no * Publicised (listed on hub page of some sort): yes/no * Open for subscriptions: yes/no / see 'List subscriptions' below</p> <p>List categories: * e.g. Announcements/Promo/Discussion/etc * Partly for display purposes, partly for potential ACL stuff (see 'Admins')</p> <p>List subscriptions: * Can ask to subscribe: anybody / registered website users / nobody * Subscriptions require approval: yes/no   * Subscriptions can be approved by: any subscriber / established subscribers     / &gt;N/&gt;N% subscribers / registered users / admins only * Subscribers can be removed by: [ see previous list ] * When somebody unsubscribes by any interface other than the 'manage all subs'   page, we should include details of any other lists they are still subscribed   to in the unsub confirmation email, and give them both the 'manage your   subscriptions' link and also a one-click 'unsubscribe from everything' link   (if they're leaving, they're leaving - making it harder for them is pointless) * List is notified of subscriptions and unsubscriptions: yes/no</p> <p>List archives:   * Web view of previous posts to a list   * Provides 'view this email in your browser' functionality   * Viewable by: anybody / subscribers / admins / nobody     * Subscribers can see posts from before they subscribed: yes/no</p> <p>List posts: * Can post to list: any subscriber / subscribers over X duration / subscribers   over N previous posts / admins only * Reply-to munging (trollolol): yes/no * Show email of sender: yes/partial/obfuscated/no * Show name of sender: yes/no</p> <p>Moderation: * Posts to list require approval if they are from: anybody / unregistered   users / new subscribers (N or &gt;N% subscribers /   registered users / admins only <p>Tracking (for marketing?) and Engagement (list quality/sender reputation): * Opens are tracked: yes/no  * Is it possible to filter out 'opens' by spam-scanning software (etc) that    downloads images (including our tracking pixels)? Look at user-agents maybe? * Clicks are tracked: yes/no   * Again, can we filter out link-following by software?   * Track all the details of a click (probably for marketing) or just the fact     that 'a click happened' (enough for engagement): detail/no detail   * If opens and/or clicks are tracked, use them to disable emails to     potentially-unengaged people after X duration / N emails: yes/no     * Ask people before disabling emails to them: yes/no * If people don't engage with emails OR web UI, disable their subscription   entirely? (Do I want the word 'subscription' here or 'membership'- I'm back   to wondering whether 'lists' and 'groups' are the same thing, or should be)</p>"},{"location":"Developers/Notes/mailing-list-notes/#per-subscriber-per-list-config","title":"Per subscriber per list config","text":"<ul> <li>Receive emails sent to list: yes/no</li> <li>Receive emails in digest format (daily/weekly?)  yes/no</li> </ul>"},{"location":"Developers/Notes/mailing-list-notes/#admins","title":"'Admins'","text":"<p>(This is a near-fractal timesink of potential granularity and configurability - it will definitely need its own ACL system/subsystem eventually.)</p> <p>e.g. * A list/group can have: owner(s?) / admins / moderators   * owners can create/remove admins   * admins can delete list? * Categories can have: ditto, and:   * owners can edit category, create/remove admins   * admins can create/delete lists * The whole system has: same again? plus:   * owners can create categories   * etc</p>"},{"location":"Developers/Notes/mailing-list-notes/#enhancements-for-later-because-this-list-isnt-long-enough-already","title":"Enhancements for later (because this list isn't long enough already)","text":"<ul> <li>Web UI</li> <li>'Forum style' web interface that can be used to read and post to list too</li> <li>Extension of 'view archives' above, or replacement for it?<ul> <li>Somewhere around here this turns from a mailing list feature into a 'groups' feature</li> </ul> </li> <li>Ratings:</li> <li>Rate posts (this is only really viable if there's a web interface I think)</li> <li>Rate people (reputation systems omg)</li> <li>More options for posts:</li> <li>Restrict post length to: NN characters<ul> <li>Posts over this length are: rejected/truncated</li> </ul> </li> <li>Only NN posts per subscriber per HH hours</li> <li>Delay before distributing each post: NN minutes</li> <li>More options for subscriptions:</li> <li>Pay to subscribe (once the system has payment handlers implemented)</li> <li>Autoresponders</li> <li>'Timed series' emails<ul> <li>Could be triggered by</li> <li>System (new user signs up -&gt; triggers onboarding series</li> <li>Admin shrug</li> <li>User request<ul> <li>Via web UI</li> <li>Via autoresponder</li> <li>Via 'pay to subscribe' (\"Buy our six week 'learn to cook' course!\", etc)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Developers/Notes/menu-icons/","title":"ShinyCMS Developer Notes","text":""},{"location":"Developers/Notes/menu-icons/#admin-area-menu-icons","title":"Admin area menu icons","text":"<p>All of the icons I've used in the admin-area sidebar menu (and a few other places in the admin area) are part of the free icon set from CoreUI. If you're adding a new feature (or want to change the icon for an existing one) you can look here to see what's available: https://coreui.io/icons/free</p>"},{"location":"Developers/Notes/needs-indexing/","title":"ShinyCMS Developer Notes","text":"<p>Ruby console snippet to find database tables that need indexes...</p> <pre><code>c = ActiveRecord::Base.connection\n\nc.tables.collect do |t|\n  columns = c.columns(t).collect(&amp;:name).select {|x| x.ends_with?(\"_id\" || x.ends_with(\"_type\"))}\n  indexed_columns = c.indexes(t).collect(&amp;:columns).flatten.uniq\n  unindexed = columns - indexed_columns\n  unless unindexed.empty?\n    puts \"#{t}: #{unindexed.join(\", \")}\"\n  end\nend\n</code></pre>"},{"location":"Developers/Notes/new-site/","title":"ShinyCMS Developer Notes","text":""},{"location":"Developers/Notes/new-site/#steps-currently-required-to-create-and-deploy-a-new-site-on-heroku","title":"Steps currently required to create and deploy a new site on Heroku","text":"<p>I'm creating a copy of a simple site that is currently hosted on the Perl version of ShinyCMS: * to identify any missing bits of functionality in the existing features and plugins * to identify any steps that could usefully be partly or fully automated</p> <p>(And, if the client agrees to swap them over for a month once it's all working, to do a running costs comparison vs. my leased server with a dozen ShinyCMS sites on it.)</p>"},{"location":"Developers/Notes/new-site/#1-create-a-private-repo-and-copy-shinycms-into-it","title":"1. Create a private repo and copy ShinyCMS into it","text":"<p>This step is only necessary for building and deploying a production site based on ShinyCMS for a client who does not want their site assets (templates, images, etc) in a public repo on GitHub.</p> <p>If you want to just want to try ShinyCMS out and play with the demo site initially, then you can just fork the repo normally.</p> <p>If you're considering doing ShinyCMS development then you must fork the repo normally, otherwise contributing your changes back is going to be a PITA :)</p> <p>First, create an empty private GitHub repo for your new site: https://docs.github.com/en/free-pro-team@latest/github/creating-cloning-and-archiving-repositories/creating-a-new-repository</p> <p>Then copy ShinyCMS into it:</p> <pre><code># Fetch a bare copy of the ShinyCMS code\ngit clone --bare https://github.com/denny/ShinyCMS-ruby.git\n# Mirror-push to the new repository\ncd ShinyCMS-ruby.git\ngit push --mirror https://github.com/{your-username}/{your-site-name}.git\n# Remove the temporary copy you created earlier\ncd ..\nrm -rf ShinyCMS-ruby.git\n# Fetch your new repo\ngit clone git@github.com:{your-username}/{your-site-name}.git\ncd {your-site-name}\n</code></pre>"},{"location":"Developers/Notes/new-site/#2-remove-the-themes-included-with-the-cms","title":"2. Remove the themes included with the CMS","text":"<p>... unless you're using one of them, in which case skip step 3.</p> <pre><code>git rm -r themes/*\n</code></pre>"},{"location":"Developers/Notes/new-site/#3-create-new-theme","title":"3. Create new theme","text":"<pre><code># Pretty much every site will have some 'brochure' pages, and custom header and footer content\nmkdir -p themes/{site-name}/views/shiny_pages/pages\nmkdir -p themes/{site-name}/views/includes\n# If you're not happy with the default layout, you can override that in here\nmkdir -p themes/{site-name}/views/layouts\n# You only need the next one if your new site will be using the ShinyNewsletters plugin\nmkdir -p themes/{site-name}/views/shiny_newsletters/newsletter_mailer\n\n# Page templates; most sites will want one for homepage and at least one for other pages\ntouch themes/{site-name}/views/shiny_pages/pages/homepage-template.html.erb\ntouch themes/{site-name}/views/shiny_pages/pages/standard-page-template.html.erb\n# Partials for top and bottom of page - most sites will probably want to override these\ntouch themes/{site-name}/views/includes/_header.html.erb\ntouch themes/{site-name}/views/includes/_footer.html.erb\n# Layout - if the default one isn't right for you, override it here\ntouch themes/{site-name}/views/layouts/main_site.html.erb\n# Newsletter templates - at least one pair (MJML for HTML part, ERB for plain text part)\ntouch themes/{site-name}/views/shiny_newsletters/newsletter_mailer/newsletter-template.html.mjml\ntouch themes/{site-name}/views/shiny_newsletters/newsletter_mailer/newsletter-template.text.erb\n</code></pre>"},{"location":"Developers/Notes/new-site/#4-build-your-site-locally","title":"4. Build your site locally","text":"<ul> <li>Figure out what ENV settings you want/need in .env.development.local<ul> <li>Some of these will feed into setting your config vars on Heroku later</li> </ul> </li> <li>Set up the Site Settings and Feature Flags appropriately</li> <li>Fill out those template files that got touched above<ul> <li>And create any more that you need</li> </ul> </li> <li>Create the Page Templates and Pages in the CMS admin area<ul> <li>Likewise for Newsletter Templates, if you're using that feature</li> </ul> </li> <li>etc etc</li> </ul>"},{"location":"Developers/Notes/new-site/#5-create-new-heroku-pipeline-with-staging-and-production-apps","title":"5. Create new Heroku pipeline, with staging and production apps","text":"<ul> <li>Connect pipeline to new GitHub repo</li> <li>Add Postgres and Redis add-ons to each app</li> <li>Set as many config vars as possible (copypasta desired var names from docs/env.sample)</li> <li>...</li> </ul>"},{"location":"Developers/Notes/new-site/#6-set-up-aws-s3-buckets-and-aws-iam-access-keys-for-files-and-feeds","title":"6. Set up AWS S3 buckets (and AWS IAM access keys) for files and feeds","text":"<p>Files may be uploaded by ShinyPages, ShinyInserts, ShinyBlog, ShinyNews, and ShinyProfiles. The current default S3 settings for permissions etc are correct for the files bucket.</p> <p>ShinyBlog and ShinyNews will generate Atom feeds. The feeds bucket needs to be made public.</p> <p>S3:  https://s3.console.aws.amazon.com/s3/home</p> <p>IAM: https://console.aws.amazon.com/iam/home</p>"},{"location":"Developers/Notes/new-site/#6b-optionally-add-cname-entries-to-dns-for-someall-buckets","title":"6b. Optionally, add CNAME entries to DNS for some/all buckets","text":"<p>For this to work, AWS docs say that the bucket name must match the FQDN, e.g. files.example.com</p> <p>Your CNAME entry is then files -&gt; files.example.com.s3.{aws-region}.amazonaws.com</p> <p>If you don't set up custom AWS S3 subdomains, your files and feeds will be served directly from AWS subdomains of the same format - {bucket-name}.s3.{aws-region}.amazonaws.com</p> <p>If you want the main site to serve over SSL, without paying Heroku extra for the privilege, you'll need to proxy it via Cloudflare and use their enforce_ssl feature. The code for URL generation in mailers and feeds has a small hack to support this approach; the _url helpers in these areas of the CMS default to HTTPS unless you explicitly override that with a config var. NB: This set-up does not mean that Heroku serves your site over SSL! People can still reach the bare herokuapps domain, if they know or guess it, over HTTP.</p>"},{"location":"Developers/Notes/plugin-sizes/","title":"ShinyCMS developer notes","text":""},{"location":"Developers/Notes/plugin-sizes/#plugin-sizes","title":"Plugin sizes","text":""},{"location":"Developers/Notes/plugin-sizes/#2021-05-04","title":"2021-05-04","text":"<pre><code>               Disk     LOC*\n</code></pre> <p>ShinyCMS           2.7M  13,005 ShinyNewsletters   516K   2,361 ShinyPages         464K   2,307 ShinyBlog          448K   1,158 ShinyNewsletters   448K   2,361 ShinyLists         392K   1,247 ShinyForms         364K     958 ShinyAccess        344K     960 ShinyProfiles      300K     748 ShinyInserts       296K     535 ShinySearch        288K     431 ShinySEO           176K     222</p> <ul> <li>LOC is counting code only - not comments or blank lines</li> </ul>"},{"location":"Developers/Notes/user-personas/","title":"ShinyCMS Developer Documentation","text":""},{"location":"Developers/Notes/user-personas/#user-personas","title":"User personas","text":"<p>I sometimes get tangled up in worrying about what to call different types of people who could be a 'user' of this project... so I'm throwing some thoughts into this file to get them out of my head :)</p> <p>In future, for each of these personas, it could be useful to think about: * What features might they want * What documentation might help them * What tools might help them</p>"},{"location":"Developers/Notes/user-personas/#developers-cms-developers","title":"Developers / CMS Developers","text":"<p>People who are adding new features to ShinyCMS, or modifying existing features.</p> <p>The main/direct 'users' for these people are Site Builders - but depending on what features they're working on, they almost certainly need to think about all the different types of Admins and Users as well.</p>"},{"location":"Developers/Notes/user-personas/#theme-developers","title":"Theme Developers","text":"<p>People who contribute ready-to-use themes (view templates, CSS and image assets, etc) to ShinyCMS.</p>"},{"location":"Developers/Notes/user-personas/#site-builders-site-developers","title":"Site Builders / Site Developers","text":"<p>People who are building a site on top of ShinyCMS.</p> <p>The main/direct 'users' for these people are Admins, although obviously they will need to think about Users as well.</p> <p>Note: To a site admin, these are their 'developers'</p>"},{"location":"Developers/Notes/user-personas/#admins","title":"Admins","text":"<p>People with admin capabilities on a ShinyCMS site.</p> <p>For these people, 'users' probably means a combination of logged-in Users and Visitors</p>"},{"location":"Developers/Notes/user-personas/#moderators","title":"Moderators","text":"<p>People with comment moderation capabilities on a ShinyCMS site (a 'low-powered' type of Admin).</p>"},{"location":"Developers/Notes/user-personas/#users","title":"Users","text":""},{"location":"Developers/Notes/user-personas/#authenticated-users-logged-in-users","title":"Authenticated Users / Logged-in Users","text":"<p>People with (and logged into) a user account on a ShinyCMS site.</p>"},{"location":"Developers/Notes/user-personas/#visitors","title":"Visitors","text":"<p>People visiting a ShinyCMS site who do not have a user account (or who are not logged into their user account).</p>"},{"location":"Developers/Notes/user-personas/#email-recipients","title":"Email recipients","text":"<p>People without a user account (Visitors) who have requested to receive emails from a ShinyCMS site (newsletters, comment reply notifications, etc).</p>"},{"location":"Developers/Notes/user-personas/#involuntary-users","title":"Involuntary users (!)","text":"<p>People who receive email from a ShinyCMS site who did not request that email - whether through mistake (typos etc) or malice (DDoS inbox flooding, etc).</p> <p>We should be aiming for this to be as non-terrible an experience for them as is possible under the circumstances: * Reassuring default text in registration emails     * (\"If you do not click the link the account will be deleted in X days\", etc) * Clear signposting to the 'do not contact' feature in case they're being maliciously attacked     * (or in case they want to block us 'just to be sure'; it's their inbox, if we've mistakenly invaded it then let's do our best to reassure them it won't happen again, however they prefer to achieve that)</p>"},{"location":"Features/MainApp/Charts/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/Charts/#charts-and-dashboards","title":"Charts and Dashboards","text":"<p>ShinyCMS has Blazer built-in, so that you can build your own custom queries, charts, and dashboards.</p>"},{"location":"Features/MainApp/Charts/#demo-content","title":"Demo content","text":"<p>Currently there is not a default or demo dashboard (but it is on the TODO list).</p>"},{"location":"Features/MainApp/Charts/#plugin-status","title":"Plugin status","text":"<p>This feature is likely to be moved into a plugin at some point.</p>"},{"location":"Features/MainApp/Comments/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/Comments/#comments","title":"Comments","text":"<p>The comments feature can be enabled/disabled on blog and news posts in general, and also turned on or off for specific posts while generally enabled.</p> <p>Comments replies are properly nested, so you can clearly see who is replying to who.</p> <p>Comment posting has bot protection via reCAPTCHA, and spam-flagging via Akismet.</p> <p>Comments flagged as spam go into a moderation queue at /admin/comments. When comments in the queue are moderated, training data is generated and sent back to Akismet - to help them improve the accuracy of their service over time.</p>"},{"location":"Features/MainApp/Comments/#plugin-status","title":"Plugin status","text":"<p>This feature will be moved into a plugin soon.</p>"},{"location":"Features/MainApp/EmailStats/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/EmailStats/#email-stats","title":"Email stats","text":"<p>Email open and click tracking is built-in, using Ahoy::Email to gather the data.</p> <p>By default these features are disabled for privacy reasons. You can enable them on the Site Settings page in the admin area.</p> <p>Even when click-tracking is enabled in the settings, clicks will not be tracked for emails whose links might contain 'sensitive' data - e.g. password reset emails - but you can track opens for these emails.</p>"},{"location":"Features/MainApp/EmailStats/#plugin-status","title":"Plugin status","text":"<p>This feature is likely to be moved into a plugin at some point.</p>"},{"location":"Features/MainApp/FeatureFlags/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/FeatureFlags/#feature-flags","title":"Feature Flags","text":"<p>Quickly and easily enable or disable CMS features (e.g. 'new user registrations') in the admin area.</p>"},{"location":"Features/MainApp/FeatureFlags/#rake-task","title":"Rake task","text":"<p>Feature flags can be checked and controlled on the command line too, via a rake task:</p> <pre><code>rails shiny:features:list\nrails shiny:feature:off[user_registrations]\n</code></pre>"},{"location":"Features/MainApp/FeatureFlags/#plugin-status","title":"Plugin status","text":"<p>This feature would be the very last one to be converted into a plugin - after User Accounts and Site Settings.</p>"},{"location":"Features/MainApp/SiteSettings/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/SiteSettings/#site-settings","title":"Site Settings","text":"<p>Change most site settings from within the CMS admin area (e.g. 'allow anonymous comments')</p> <p>Allows you to specify which settings can be overridden by users - e.g. site_theme</p>"},{"location":"Features/MainApp/SiteSettings/#plugin-status","title":"Plugin status","text":"<p>This feature would be second from last to be converted into a plugin - after User Accounts but before Feature Flags.</p>"},{"location":"Features/MainApp/Tags/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/Tags/#tags","title":"Tags","text":"<p>The tag features are powered by acts-as-taggable-on</p>"},{"location":"Features/MainApp/Tags/#plugin-status","title":"Plugin status","text":"<p>This feature will probably be moved into a plugin at some point.</p>"},{"location":"Features/MainApp/Upvotes/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/Upvotes/#upvotes","title":"Upvotes","text":"<p>(AKA 'likes', '+1', etc)</p> <p>The upvote features are powered by ActsAsVotable.</p> <p>The gem also offers downvotes; ShinyCMS has separate settings to turn on just the upvote feature, or both upvotes and downvotes.</p> <p>( TODO: should be a feature flag to turn on/off the whole voteable feature-set, and then a setting for 'allow_downvotes' )</p>"},{"location":"Features/MainApp/Upvotes/#plugin-status","title":"Plugin status","text":"<p>This feature will probably be moved into a plugin at some point.</p>"},{"location":"Features/MainApp/UserAccounts/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/UserAccounts/#user-accounts","title":"User accounts","text":"<p>User accounts handle authentication, registration, etc. They are powered by Devise.</p> <p>All of Devise's standard features are enabled by default, with the exception of Omniauth.</p> <p>ShinyCMS extends Devise to allow site users to identity themselves with either a username or an email address during login (as standard, Devise will only accept an email address).</p> <p>ShinyCMS also wraps Devise in its own feature flags code, allowing site admins with appropriate access to enable or disable the user logins and user registration features quickly and easily via either the CMS admin area on the website, or the feature flags rake task on the command-line.</p>"},{"location":"Features/MainApp/UserAccounts/#plugin-status","title":"Plugin status","text":"<p>User accounts may eventually be moved into a plugin (probably as a set of concerns and helpers that could be added to any site with Devise-powered authentication), but this isn't a high priority. The main app will remain necessary for some time just to handle user accounts, site settings, and feature flags.</p>"},{"location":"Features/MainApp/UserAccounts/#profile-pages","title":"Profile pages","text":"<p>User profile pages are handled by the ShinyProfiles plugin, not by the user account code in the main app, but separating these two sets of features is still a work in progress (the controllers and view templates are separate now, but the models and database tables are not).</p>"},{"location":"Features/MainApp/WebStats/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/WebStats/#web-stats","title":"Web stats","text":"<p>Recording of web traffic stats is built-in, using Ahoy to gather the data.</p> <p>By default these features are disabled for privacy reasons. You can enable them on the Site Settings page in the admin area.</p> <p>There are also some additional settings to enable/disable some GDPR/privacy-related features offered by Ahoy.</p>"},{"location":"Features/MainApp/WebStats/#plugin-status","title":"Plugin status","text":"<p>This feature is likely to be moved into a plugin at some point.</p>"},{"location":"Features/MainApp/admin-features/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/admin-features/#admin-features","title":"Admin features","text":""},{"location":"Features/MainApp/admin-features/#admin-area","title":"Admin area","text":"<p>The CMS has an admin area, imaginatively located at https://{your-domain-name}/admin</p> <p>Any CMS feature that allows you update content or change settings should make itself available to you in this admin area - either by adding its own menu section, or by adding an item to the 'Other' menu section.</p> <p>Plugins appear in the admin menu in the order that they are loaded, which is specified by <code>SHINYCMS_PLUGINS</code> in your .env.* files or Heroku config vars. If you don't set <code>SHINYCMS_PLUGINS</code> then ShinyCMS will refuse to start.</p>"},{"location":"Features/MainApp/admin-features/#admin-toolbar","title":"Admin toolbar","text":"<p>If you are logged into a user account with suitable admin privileges, a toolbar will appear at the bottom of every page on the main site. This toolbar will usually include some context-aware links to relevant admin features, allowing you to easily jump straight to the admin pages for the content you are currently looking at (assuming that you have the access to do so).</p>"},{"location":"Features/MainApp/admin-features/#access-control-list","title":"Access Control List","text":"<p>Access to all of the admin features is controlled by a fine-grain ACL. You can add/remove capabilities from an individual user on their Edit User page, granting or removing access to particular features or sets of features.</p>"},{"location":"Features/MainApp/mjml/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/mjml/#mjml-email-templates","title":"MJML email templates","text":"<p>All of the emails generated by ShinyCMS are templated using MJML - a simple markup language that gets converted into responsive HTML email markup at the time of sending.</p> <p>The key advantage of using MJML is that the generated HTML is tailored according to the recipient's email address, compensating for known differences in HTML email rendering on some of the most popular webmail sites and email apps: * Gmail (Android, iPhone, and website) * Outlook (Android, iPhone, and website) and Outlook 365 * Android (default email client) * Apple Mail (OS X and iOS) * AOL Mail * Yahoo Mail</p>"},{"location":"Features/MainApp/mjml/#more-information","title":"More information","text":"<p>You can read more about MJML on the MJML website.</p> <p>The MJML website also has some example templates, although unfortunately the licensing on them is not clear.</p> <p>ShinyCMS uses the mjml-rails gem to generate HTML emails from MJML markup, which in turn uses the Node MJML parser, so you'll also need to install that. In dev this is handled by <code>yarn install</code>, but on Heroku it means adding another buildpack - see the gem docs for helpful instructions.</p>"},{"location":"Features/MainApp/pagination/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/pagination/#pagination","title":"Pagination","text":"<p>Pagination features in ShinyCMS are powered by Pagy.</p> <p>Pagination is used in the admin area by almost all ShinyCMS features. On the main site, pagination is built into the default templates for features provided by the ShinyBlog, ShinyNews, ShinyNewsletter, and ShinySearch plugins.</p>"},{"location":"Features/MainApp/pagination/#more-information","title":"More information","text":"<p>If you want to modify the pagers on your main site, check the Pagy docs for details of the various options available to you - including integrations with a number of popular front-end frameworks.</p>"},{"location":"Features/MainApp/rack-attack/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/rack-attack/#rackattack-filtering-and-blocking","title":"Rack::Attack - filtering and blocking","text":"<p>Rack::Attack is used to defend ShinyCMS sites against at least some of the crushing waves of spammy bot traffic that plague the Internet now.</p> <p>Currently it just quickly and silently drops traffic (with a 204 response code) from the very worst offenders, which seems to be a variety of bots looking for the admin area of WordPress sites, presumably to exploit. Suppressing the 404 errors that would otherwise be caused by this traffic makes it easier to spot more useful errors in your logs or monitoring, that you might actually want to (and be able to) fix.</p>"},{"location":"Features/MainApp/rack-attack/#more-information","title":"More information","text":"<p>You can read the intro to Rack::Attack blogpost from Kickstarter.</p> <p>And there are more details in the Rack::Attack docs.</p> <p>Here's the ShinyCMS Rack::Attack config</p>"},{"location":"Features/MainApp/soft-delete/","title":"ShinyCMS Features","text":""},{"location":"Features/MainApp/soft-delete/#soft-delete","title":"Soft Delete","text":"<p>All ShinyCMS models have soft-delete built-in, with the exception of upvotes.</p> <p>When you delete an item via the web interface, or via the rails console, it is marked as deleted and no longer returned in results, but the data is still in your database (except for email addresses, which are obfuscated immediately when the record is marked as deleted).</p> <p>This means that in the event of deleting something that you later wish you hadn't deleted, it is possible to recover it in the console - by using the <code>.with_deleted</code> scope to search for it, and the <code>.recover</code> method to undelete it.</p>"},{"location":"Features/MainApp/soft-delete/#more-information","title":"More information","text":"<p>Soft delete is powered by the ActsAsParanoid gem; their docs have more details on how it works and how to recover your data if you need to.</p>"},{"location":"Features/Plugins/ShinyAccess/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyAccess/#shinyaccess","title":"ShinyAccess","text":"<p>This plugin provides access control features to a site built on ShinyCMS (as opposed to access control for the admin area, which is built-in).</p>"},{"location":"Features/Plugins/ShinyAccess/#admin-area","title":"Admin Area","text":"<p>With ShinyAccess loaded you can create Access Groups, and add/remove a user's membership of those groups.</p>"},{"location":"Features/Plugins/ShinyAccess/#main-site","title":"Main Site","text":"<p>You can use the <code>current_user_has_access( :access_group_slug )</code> helper method to grant or refuse access to content in your view templates - anything from hiding the entire page and redirecting, down to showing or hiding images, paragraphs, or even individual words.</p>"},{"location":"Features/Plugins/ShinyBlog/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyBlog/#shinyblog","title":"ShinyBlog","text":"<p>This plugin adds the normal blog features to a ShinyCMS site.</p> <p>Blog posts have titles, body text, tags, an author, and a posted date. They can be hidden, and they can be future-dated / scheduled.</p> <p>On the main site, you can view recent blog posts (the default) or view all posts in a specified month or year, as well as viewing individual posts.</p>"},{"location":"Features/Plugins/ShinyBlog/#integration-with-other-cms-features","title":"Integration with other CMS features","text":"<p>Blog posts can have comment threads, provided by the Comments feature. You can choose to enable/disable these per-post, as well as setting the default for all new posts in your site settings.</p>"},{"location":"Features/Plugins/ShinyForms/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyForms/#shinyforms","title":"ShinyForms","text":"<p>This plugin provides some basic form handlers, allowing you to do things like 'send form content to site admin' when a form is submitted (useful for contact forms, order enquiries, etc).</p>"},{"location":"Features/Plugins/ShinyInserts/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyInserts/#shinyinserts","title":"ShinyInserts","text":"<p>Reusable content fragments for inclusion in any template in any section of the main site</p>"},{"location":"Features/Plugins/ShinyInserts/#admin-page","title":"Admin page","text":""},{"location":"Features/Plugins/ShinyInserts/#template-tag","title":"Template tag","text":"<p>&lt;%= insert( :name_of_insert ) %&gt;</p>"},{"location":"Features/Plugins/ShinyLists/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyLists/#shinylists","title":"ShinyLists","text":"<p>This plugin provides mailing list features (broadcast, not discussion). It is intended to be paired with ShinyNewsletters, for sending promotional emails.</p> <ul> <li>Double opt-in<ul> <li>Stores details of exact consent given (GDPR)</li> </ul> </li> <li>Allows users to manage their subscriptions online<ul> <li>Identifies people without user accounts using a unique token included in their links</li> </ul> </li> <li>Permanent 'do not contact' option</li> </ul>"},{"location":"Features/Plugins/ShinyNews/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyNews/#shinynews","title":"ShinyNews","text":"<p>This plugin adds a news / press release section to a ShinyCMS site.</p> <p>News posts have titles, body text, tags, an author, and a posted date. They can be hidden, and they can be future-dated / scheduled.</p> <p>On the main site, you can view recent news posts (the default) or view all posts in a specified month or year, as well as viewing individual posts.</p>"},{"location":"Features/Plugins/ShinyNews/#integration-with-other-cms-features","title":"Integration with other CMS features","text":"<p>News posts can have comment threads, provided by the Comments feature. You can choose to enable/disable these per-post, as well as setting the default for all new posts in your site settings.</p>"},{"location":"Features/Plugins/ShinyNewsletters/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyNewsletters/#shinynewsletters","title":"ShinyNewsletters","text":"<p>This plugin adds the ability to send promotional HTML emails.</p> <p>It requires ShinyLists to be enabled too, to manage mailing lists and subscriptions.</p> <ul> <li>Build HTML mailshots based on MJML templates (provided by a theme or custom built for you)</li> <li>Simple admin interface to fill in the editable content areas in each edition</li> </ul>"},{"location":"Features/Plugins/ShinyNewsletters/#scheduled-sends","title":"Scheduled sends","text":"<p>You can start any scheduled sends that are due by running the rake task <code>rails shiny_newsletters:scheduled:send</code></p> <p>On Heroku, you can use their Heroku Scheduler add-on to run this task daily, hourly, or every 10 minutes. The add-on itself is free, but you pay for the dyno time taken to run the task each time (unless you configure it to use the 'free' dyno type).</p> <p>In other environments you could set this task to run regularly via cron or a similar tool.</p>"},{"location":"Features/Plugins/ShinyPages/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyPages/#shinypages","title":"ShinyPages","text":"<p>This plugin provides content-managed 'brochure' pages, with layout controlled by page templates.</p> <p>Pages can be organised into sections or left at the top-level. Sections can also be organised into sections, to any depth. Menus are dynamically generated.</p> <p>Pages have defined content areas (headings, paragraphs, illustrative images, etc). These can be edited by site admins via an easy-to-use web UI.</p> <p>Layout and appearance of Pages is controlled by Page Templates. These can be provided by a theme or custom-built by a web developer/</p>"},{"location":"Features/Plugins/ShinyProfiles/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinyProfiles/#shinyprofiles","title":"ShinyProfiles","text":"<p>The ShinyProfiles plugin displays a profile page for each registered user of a ShinyCMS site.</p> <p>This feature is primarily intended for use on sites that want to encourage interaction with and between their users (linking into features such as comments, forums, etc), to 'put faces to names'.</p> <p>It can also be used to power an 'our people' section on a company website.</p>"},{"location":"Features/Plugins/ShinyProfiles/#work-in-progress","title":"Work in progress!","text":"<p>This feature was originally part of the user accounts feature in the main app, and separating them is still a work in progress. Currently the views and controllers are separate, but the models and database tables are not.</p>"},{"location":"Features/Plugins/ShinySearch/","title":"ShinyCMS Plugins","text":""},{"location":"Features/Plugins/ShinySearch/#shinysearch","title":"ShinySearch","text":"<p>This plugin provides the search feature for the main site.</p> <p>It has support for using a variety of backends to power the actual searching, but currently only the default search backend (pg_search) is implemented. This is powered by the pg_search gem.</p> <p>There is some stub code showing where support for Algolia (Search as a Service) could be added next, but no actual implementation.</p>"},{"location":"Features/Plugins/ShinySearch/#integration-with-other-features","title":"Integration with other features","text":"<p>Models in other plugins (and the main app) can provide a template for rendering themselves as a search result, which this plugin will look for and use if/when that model comes up in the results for a search.</p>"},{"location":"Licensing/","title":"ShinyCMS: Licensing","text":"<p>ShinyCMS is copyright 2009-2025 Denny de la Haye (https://denny.me)</p> <p>ShinyCMS is free software; you can redistribute it and/or modify it under the terms of the GPL (version 2 or later). There are copies of both v2 and v3 of the GPL included with the ShinyCMS code, or you can read them online: * GNU GPL v2 / https://opensource.org/licenses/gpl-2.0 * GNU GPL v3 / https://opensource.org/licenses/gpl-3.0</p>"},{"location":"Licensing/#license-terms-for-code-from-other-projects","title":"License terms for code from other projects","text":"<p>ShinyCMS includes code from other open source and free software projects, which have their own licensing terms:</p>"},{"location":"Licensing/#ckeditor","title":"CKEditor","text":"<p>ShinyCMS currently uses CKEditor to provide WYSIWYG editing in the admin area. As of version 5, CKEditor is also licensed under the terms of the GPL, version 2.0 or later: https://ckeditor.com/legal/ckeditor-oss-license/</p>"},{"location":"Licensing/#html5-up-halcyonic-and-coming-soon-themes","title":"HTML5 UP: Halcyonic and Coming Soon themes","text":"<p>The templates for the Halcyonic theme were built using the Halcyonic theme from HTML5 UP. The templates for the Coming Soon theme were built using the Eventually theme from HTML5 UP. Both of these HTML5 UP themes are licensed CC-BY-3.0 (Creative Commons Attribution 3.0 Unported): CC-BY-3.0 / https://html5up.net/license</p>"},{"location":"Licensing/#coreui-admin-template","title":"CoreUI admin template","text":"<p>CoreUI is covered by the MIT license: MIT / https://opensource.org/licenses/MIT</p>"},{"location":"Licensing/gnu-gpl-v2.0/","title":"GNU General Public License","text":"<p>Version 2, June 1991 Copyright \u00a9 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"Licensing/gnu-gpl-v2.0/#preamble","title":"Preamble","text":"<p>The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.  This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it.  (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.)  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.</p> <p>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software.  If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.</p> <p>Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary.  To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"Licensing/gnu-gpl-v2.0/#terms-and-conditions-for-copying-distribution-and-modification","title":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","text":"<p>0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License.  The \u201cProgram\u201d, below, refers to any such program or work, and a \u201cwork based on the Program\u201d means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language.  (Hereinafter, translation is included without limitation in the term \u201cmodification\u201d.)  Each licensee is addressed as \u201cyou\u201d.</p> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.</p> <p>1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.</p> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <p>2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <ul> <li>a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.</li> <li>b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</li> <li>c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License.  (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)</li> </ul> <p>These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.</p> <p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <p>3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p> <ul> <li>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</li> <li>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</li> <li>c) Accompany it with the information you received as to the offer to distribute corresponding source code.  (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</li> </ul> <p>The source code for a work means the preferred form of the work for making modifications to it.  For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.  However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p> <p>4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License.  Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> <p>5. You are not required to accept this License, since you have not signed it.  However, nothing else grants you permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.</p> <p>6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions.  You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.</p> <p>7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all.  For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <p>8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.</p> <p>9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies a version number of this License which applies to it and \u201cany later version\u201d, you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.</p> <p>10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p>"},{"location":"Licensing/gnu-gpl-v2.0/#no-warranty","title":"NO WARRANTY","text":"<p>11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <p>12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"Licensing/gnu-gpl-v2.0/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program is interactive, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>Gnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w</code> and <code>show c</code> should show the appropriate parts of the General Public License.  Of course, the commands you use may be called something other than <code>show w</code> and <code>show c</code>; they could even be mouse-clicks or menu items--whatever suits your program.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary.  Here is a sample; alter the names:</p> <pre><code>Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n&lt;signature of Ty Coon&gt;, 1 April 1989\nTy Coon, President of Vice\n</code></pre> <p>This General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.</p>"},{"location":"Licensing/gnu-gpl-v3.0/","title":"GNU General Public License","text":"<p>Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"Licensing/gnu-gpl-v3.0/#0-definitions","title":"0. Definitions","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#1-source-code","title":"1. Source Code","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d.</li> <li>c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#7-additional-terms","title":"7. Additional Terms","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#11-patents","title":"11. Patents","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d.</p> <p>A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"Licensing/gnu-gpl-v3.0/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"Licensing/gnu-gpl-v3.0/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w</code> and <code>show c</code> should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.</p>"},{"location":"Licensing/mit/","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 <code>&lt;year&gt;</code> <code>&lt;copyright holders&gt;</code></p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}
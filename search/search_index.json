{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ShinyCMS Documentation Using ShinyCMS Getting Started tl,dr - for the impatient :) Installation - installing a local dev system Configuration - where different things are configured External services - required services and optional extras Demo site - loading the demo site templates and data Themes - start building your hosted site by creating a theme for it CMS Features User accounts Admin features Basic CMS features ('brochure sites') Pages Inserts Form handlers Search Post regular updates Blog News section Send promotional emails Mailing lists Newsletters Build a community Profile pages Comments Tags Upvotes ('likes') Settings and configuration Feature flags Site settings Stats and tracking Email stats Web stats Charts and dashboards MJML email templates Contributing to ShinyCMS (developer documentation) Index Project goals Project progress: Done In progress To do Plugins Testing Other Credits Licensing GPL v2 GPL v3 Code of Conduct This project has a Code of Conduct , which is intended to make using ShinyCMS, or contributing to it, a harassment-free experience for everybody involved - regardless of who they are and what they do or don't know. Please read and follow the code of conduct - thank you.","title":"Index"},{"location":"#shinycms-documentation","text":"","title":"ShinyCMS Documentation"},{"location":"#using-shinycms","text":"","title":"Using ShinyCMS"},{"location":"#getting-started","text":"tl,dr - for the impatient :) Installation - installing a local dev system Configuration - where different things are configured External services - required services and optional extras Demo site - loading the demo site templates and data Themes - start building your hosted site by creating a theme for it","title":"Getting Started"},{"location":"#cms-features","text":"User accounts Admin features Basic CMS features ('brochure sites') Pages Inserts Form handlers Search Post regular updates Blog News section Send promotional emails Mailing lists Newsletters Build a community Profile pages Comments Tags Upvotes ('likes') Settings and configuration Feature flags Site settings Stats and tracking Email stats Web stats Charts and dashboards MJML email templates","title":"CMS Features"},{"location":"#contributing-to-shinycms-developer-documentation","text":"Index Project goals Project progress: Done In progress To do Plugins Testing","title":"Contributing to ShinyCMS (developer documentation)"},{"location":"#other","text":"Credits Licensing GPL v2 GPL v3","title":"Other"},{"location":"#code-of-conduct","text":"This project has a Code of Conduct , which is intended to make using ShinyCMS, or contributing to it, a harassment-free experience for everybody involved - regardless of who they are and what they do or don't know. Please read and follow the code of conduct - thank you.","title":"Code of Conduct"},{"location":"Configuration/","text":"ShinyCMS Documentation Configuration Configuration is split between the following locations: ENV vars Mostly used for secrets (database details, API keys etc) Usually loaded from .env* files, or from Settings > Config Vars on Heroku See docs/env.sample for a full list of available ENV settings Feature Flags Turn CMS features on (or off) for all users, logged-in only, or admin only Controlled in the CMS admin area - /admin/feature-flags Can also be turned on or off, and listed, from the command line: rails shiny:features:list rails shiny:feature:off[user_logins] Site Settings Configuration of CMS options and features Controlled in the CMS admin area - /admin/site-settings Services The external services listed below are optional. If you add config details for them (via a .env* file (see env.sample ), or via your Config Vars on Heroku) then the related CMS features will be enabled or enhanced, otherwise those features will be unavailable or will have more limited functionality. AWS S3 - file storage User uploaded files can be stored on AWS S3 instead of locally. To enable this feature you will need to have an an AWS account, create an S3 bucket, and add the relevant keys to the ENV/config. reCAPTCHA - bot protection User registration and posting comments can be protected from bots using Google's reCAPTCHA service. To enable this feature you will need to obtain keys and add them to your ENV/config. You will get the best results with a pair of V3 keys and a pair of V2 keys (this allows you to set a minimum score for each protected feature in your Site Settings area). At first reCAPTCHA tries an 'invisible' (non-interactive) check (V3 with score if configured, V2 otherwise), falling back to a V2 checkbox if that fails. Akismet - spam flagging Comments can be passed to Akismet for its assessment of whether they are likely to be spam or not. Comments flagged as spam will be hidden on the main site and shown in an admin moderation queue. Processing comments in the moderation queue will send training data back to Akismet, which they use to improve their accuracy over time. Other services used (no config required) Have I Been Pwned - password leak checking The user registration and login features use Devise::PwnedPassword to check user's passwords against https://haveibeenpwned.com/Passwords and warn the user if they find a match, but this doesn't require any setup on your part.","title":"Configuration"},{"location":"Configuration/#shinycms-documentation","text":"","title":"ShinyCMS Documentation"},{"location":"Configuration/#configuration","text":"Configuration is split between the following locations:","title":"Configuration"},{"location":"Configuration/#env-vars","text":"Mostly used for secrets (database details, API keys etc) Usually loaded from .env* files, or from Settings > Config Vars on Heroku See docs/env.sample for a full list of available ENV settings","title":"ENV vars"},{"location":"Configuration/#feature-flags","text":"Turn CMS features on (or off) for all users, logged-in only, or admin only Controlled in the CMS admin area - /admin/feature-flags Can also be turned on or off, and listed, from the command line: rails shiny:features:list rails shiny:feature:off[user_logins]","title":"Feature Flags"},{"location":"Configuration/#site-settings","text":"Configuration of CMS options and features Controlled in the CMS admin area - /admin/site-settings","title":"Site Settings"},{"location":"Configuration/#services","text":"The external services listed below are optional. If you add config details for them (via a .env* file (see env.sample ), or via your Config Vars on Heroku) then the related CMS features will be enabled or enhanced, otherwise those features will be unavailable or will have more limited functionality.","title":"Services"},{"location":"Configuration/#aws-s3-file-storage","text":"User uploaded files can be stored on AWS S3 instead of locally. To enable this feature you will need to have an an AWS account, create an S3 bucket, and add the relevant keys to the ENV/config.","title":"AWS S3 - file storage"},{"location":"Configuration/#recaptcha-bot-protection","text":"User registration and posting comments can be protected from bots using Google's reCAPTCHA service. To enable this feature you will need to obtain keys and add them to your ENV/config. You will get the best results with a pair of V3 keys and a pair of V2 keys (this allows you to set a minimum score for each protected feature in your Site Settings area). At first reCAPTCHA tries an 'invisible' (non-interactive) check (V3 with score if configured, V2 otherwise), falling back to a V2 checkbox if that fails.","title":"reCAPTCHA - bot protection"},{"location":"Configuration/#akismet-spam-flagging","text":"Comments can be passed to Akismet for its assessment of whether they are likely to be spam or not. Comments flagged as spam will be hidden on the main site and shown in an admin moderation queue. Processing comments in the moderation queue will send training data back to Akismet, which they use to improve their accuracy over time.","title":"Akismet - spam flagging"},{"location":"Configuration/#other-services-used-no-config-required","text":"","title":"Other services used (no config required)"},{"location":"Configuration/#have-i-been-pwned-password-leak-checking","text":"The user registration and login features use Devise::PwnedPassword to check user's passwords against https://haveibeenpwned.com/Passwords and warn the user if they find a match, but this doesn't require any setup on your part.","title":"Have I Been Pwned - password leak checking"},{"location":"INSTALL/","text":"ShinyCMS Documentation Installation (local dev system) Get the code from GitHub: git clone https://github.com/denny/ShinyCMS-ruby.git cd ShinyCMS-ruby Copy the example config file and edit it to suit your requirements (in particular, you might need to set your DATABASE_URL): cp docs/env.sample .env.development.local Install the required Ruby and JavaScript libraries: bundle install yarn install Create your database: rails db:setup If you want to load the demo data : rails shiny:demo:load If you didn't load the demo data, create an admin account: rails shiny:admin:create Start the server: rails s You should now have a ShinyCMS site at http://localhost:3000, with an admin area at http://localhost:3000/admin Job queues (for sending email) If you want the system to send emails, you will need to run Sidekiq, which in turn requires you to run Redis: sudo service start redis # or whatever your OS prefers sidekiq Creating an admin account When you load or reload the seed data (any of rails db:setup , rails db:reset , and rails db:seed will do this), the system checks that you have at least one 'super admin' user (an admin with the ability to add/remove admin users). If one does not already exist, you will be shown the command to create one: rails shiny:admin:create When you run this command you will be prompted for a username, email address, and password for your new admin user, and then the account will be created with a full set of admin capabilities. (The password will be checked against the PwnedPassword service, even for dev/demo sites, and simple or common passwords are very likely to fail this check. Use a good password to avoid frustration!) If you are resetting your database or reloading the demo data a lot, you can save your chosen admin account details into your .env.development.local file and they will be picked up automatically during admin account creation, to save you typing them each time. This has obvious security implications , depending on who else might have (or gain) access to your filesystem. Blazer database user (for charts and dashboards) If you intend to use Blazer to generate charts and dashboards, you will need to create a read-only database user for Blazer (sample SQL) and add its details to your ENV/config as BLAZER_DATABASE_URL . Configuration Configuration is split between ENV vars (usually in .env* files), Feature Flags, and Site Settings. See configuration for more details of each. Themes To build a site on top of ShinyCMS, you should start by creating a theme for it. This keeps your site layout and design tweaks separate from the default CMS templates, making future updates to the CMS easier to manage.","title":"Local installation"},{"location":"INSTALL/#shinycms-documentation","text":"","title":"ShinyCMS Documentation"},{"location":"INSTALL/#installation-local-dev-system","text":"Get the code from GitHub: git clone https://github.com/denny/ShinyCMS-ruby.git cd ShinyCMS-ruby Copy the example config file and edit it to suit your requirements (in particular, you might need to set your DATABASE_URL): cp docs/env.sample .env.development.local Install the required Ruby and JavaScript libraries: bundle install yarn install Create your database: rails db:setup If you want to load the demo data : rails shiny:demo:load If you didn't load the demo data, create an admin account: rails shiny:admin:create Start the server: rails s You should now have a ShinyCMS site at http://localhost:3000, with an admin area at http://localhost:3000/admin","title":"Installation (local dev system)"},{"location":"INSTALL/#job-queues-for-sending-email","text":"If you want the system to send emails, you will need to run Sidekiq, which in turn requires you to run Redis: sudo service start redis # or whatever your OS prefers sidekiq","title":"Job queues (for sending email)"},{"location":"INSTALL/#creating-an-admin-account","text":"When you load or reload the seed data (any of rails db:setup , rails db:reset , and rails db:seed will do this), the system checks that you have at least one 'super admin' user (an admin with the ability to add/remove admin users). If one does not already exist, you will be shown the command to create one: rails shiny:admin:create When you run this command you will be prompted for a username, email address, and password for your new admin user, and then the account will be created with a full set of admin capabilities. (The password will be checked against the PwnedPassword service, even for dev/demo sites, and simple or common passwords are very likely to fail this check. Use a good password to avoid frustration!) If you are resetting your database or reloading the demo data a lot, you can save your chosen admin account details into your .env.development.local file and they will be picked up automatically during admin account creation, to save you typing them each time. This has obvious security implications , depending on who else might have (or gain) access to your filesystem.","title":"Creating an admin account"},{"location":"INSTALL/#blazer-database-user-for-charts-and-dashboards","text":"If you intend to use Blazer to generate charts and dashboards, you will need to create a read-only database user for Blazer (sample SQL) and add its details to your ENV/config as BLAZER_DATABASE_URL .","title":"Blazer database user (for charts and dashboards)"},{"location":"INSTALL/#configuration","text":"Configuration is split between ENV vars (usually in .env* files), Feature Flags, and Site Settings. See configuration for more details of each.","title":"Configuration"},{"location":"INSTALL/#themes","text":"To build a site on top of ShinyCMS, you should start by creating a theme for it. This keeps your site layout and design tweaks separate from the default CMS templates, making future updates to the CMS easier to manage.","title":"Themes"},{"location":"Services/","text":"ShinyCMS Documentation Required services You will need a web server. As far as I am aware, any Rails-compatible web server should work. You will need a database server. Currently this almost certainly needs to be Postgres-compatible (patches to be more database-agnostic welcome). If you enable any feature that sends email (user registrations, comment notifications, newsletters, etc), then you will need an email server. Anything supported by ActionMailer should work. For email, and possibly for other features, you will also need a job queue and a caching backend for it. Only Sidekiq + Redis have been tested, but anything compatible with ActionJob could potentially work. Optional services The external services listed below are optional. If you add config details for them (via a .env* file locally (see env.sample ), or via Config Vars on Heroku) then the related CMS features will be enabled or enhanced. Otherwise those features will be unavailable or will have more limited functionality. AWS S3 - file storage User uploaded files can be stored on AWS S3 instead of locally. To enable this feature you will need to have an an AWS account, create an S3 bucket, and add the relevant keys to your ENV/config vars. AWS S3 offers a limited amount of free usage, followed by fairly inexpensive usage-based pricing. reCAPTCHA - bot protection User registration and posting comments can be protected from bots using Google's reCAPTCHA service. To enable this feature you will need to obtain keys and add them to your ENV/config vars. You will get the best results with a pair of V3 keys and a pair of V2 keys (this allows you to set a minimum score for each protected feature in your Site Settings area). At first reCAPTCHA tries an 'invisible' (non-interactive) check (V3 with score if configured, V2 otherwise), falling back to a V2 checkbox if that fails. Google reCAPTCHA is free at any usage level. Akismet - spam flagging Comments can be passed to Akismet for its assessment of whether they are likely to be spam or not. Comments flagged as spam will be hidden on the main site and shown in an admin moderation queue. Processing comments in the moderation queue will send training data back to Akismet, which they use to improve their accuracy over time. To enable these features you will need to create an account at Akismet, and set the appropriate keys in your ENV/config vars. Akismet offer a limited free service, and a variety of paid plans for busier sites. Other services Have I Been Pwned - password leak checking The user registration, login, and change password features use Devise::PwnedPassword to check user's passwords against the PwnedPasswords service. If a match is found during registration or a password change then the user will have to choose a different password to complete the process. If a match is found during login, the user will be warned about the match. You do not need to set up or configure anything to use this service in ShinyCMS - it is enabled by default - and it is free.","title":"External services"},{"location":"Services/#shinycms-documentation","text":"","title":"ShinyCMS Documentation"},{"location":"Services/#required-services","text":"You will need a web server. As far as I am aware, any Rails-compatible web server should work. You will need a database server. Currently this almost certainly needs to be Postgres-compatible (patches to be more database-agnostic welcome). If you enable any feature that sends email (user registrations, comment notifications, newsletters, etc), then you will need an email server. Anything supported by ActionMailer should work. For email, and possibly for other features, you will also need a job queue and a caching backend for it. Only Sidekiq + Redis have been tested, but anything compatible with ActionJob could potentially work.","title":"Required services"},{"location":"Services/#optional-services","text":"The external services listed below are optional. If you add config details for them (via a .env* file locally (see env.sample ), or via Config Vars on Heroku) then the related CMS features will be enabled or enhanced. Otherwise those features will be unavailable or will have more limited functionality.","title":"Optional services"},{"location":"Services/#aws-s3-file-storage","text":"User uploaded files can be stored on AWS S3 instead of locally. To enable this feature you will need to have an an AWS account, create an S3 bucket, and add the relevant keys to your ENV/config vars. AWS S3 offers a limited amount of free usage, followed by fairly inexpensive usage-based pricing.","title":"AWS S3 - file storage"},{"location":"Services/#recaptcha-bot-protection","text":"User registration and posting comments can be protected from bots using Google's reCAPTCHA service. To enable this feature you will need to obtain keys and add them to your ENV/config vars. You will get the best results with a pair of V3 keys and a pair of V2 keys (this allows you to set a minimum score for each protected feature in your Site Settings area). At first reCAPTCHA tries an 'invisible' (non-interactive) check (V3 with score if configured, V2 otherwise), falling back to a V2 checkbox if that fails. Google reCAPTCHA is free at any usage level.","title":"reCAPTCHA - bot protection"},{"location":"Services/#akismet-spam-flagging","text":"Comments can be passed to Akismet for its assessment of whether they are likely to be spam or not. Comments flagged as spam will be hidden on the main site and shown in an admin moderation queue. Processing comments in the moderation queue will send training data back to Akismet, which they use to improve their accuracy over time. To enable these features you will need to create an account at Akismet, and set the appropriate keys in your ENV/config vars. Akismet offer a limited free service, and a variety of paid plans for busier sites.","title":"Akismet - spam flagging"},{"location":"Services/#other-services","text":"","title":"Other services"},{"location":"Services/#have-i-been-pwned-password-leak-checking","text":"The user registration, login, and change password features use Devise::PwnedPassword to check user's passwords against the PwnedPasswords service. If a match is found during registration or a password change then the user will have to choose a different password to complete the process. If a match is found during login, the user will be warned about the match. You do not need to set up or configure anything to use this service in ShinyCMS - it is enabled by default - and it is free.","title":"Have I Been Pwned - password leak checking"},{"location":"Themes/","text":"ShinyCMS: Themes The recommended way to start building a site on ShinyCMS is to create a theme for it... this keeps your own site's markup separate from the CMS templates, making it easier to apply future updates. Making a theme Templates The ShinyCMS theme engine falls back to the default template set if a template is not present in the current theme, which means that you can start building your own theme by simply creating a subdirectory for it in app/views/themes - e.g. app/views/themes/my_site . Even an empty directory is a valid theme! Because themes start with a directory in the themes folder, valid theme names must be valid directory names on whatever operating system you intend to deploy ShinyCMS on. Something in snake-case like my_theme_name is usually a safe bet. Once you've created your theme directory, you can copy any template that you want to edit or override into that directory from app/views/shinycms , and then edit the copied versions. ShinyCMS will pick up your modified version whenever you tell it to use your theme. This system allows you to pick up any updates to the ShinyCMS core templates, with minimal risk of that conflicting with your own customisations to your site's appearance. Supporting files (images, stylesheets, JavaScript) If your theme requires any images, you should create a directory for them in app/assets/images with the same name as your theme, and likewise you should put theme-specific CSS into a directory in app/assets/stylesheets - for our example 'my_site' theme, these would be app/assets/images/my_site and app/assets/stylesheets/my_site . You'll need to add these directories to app/assets/config/manifest.js to get Rails to pick them up. If your theme needs some JavaScript, that goes in app/javascript/theme_name , and is loaded by Webpacker (based on the files in app/javascript/packs ). Using your theme The default theme can be set in ENV['SHINYCMS_THEME'] and on the Settings page in the admin area. If both are set, the latter takes priority. You can also choose to make this setting user-overridable, in which case a user's setting will take priority for them.","title":"Themes"},{"location":"Themes/#shinycms-themes","text":"The recommended way to start building a site on ShinyCMS is to create a theme for it... this keeps your own site's markup separate from the CMS templates, making it easier to apply future updates.","title":"ShinyCMS: Themes"},{"location":"Themes/#making-a-theme","text":"","title":"Making a theme"},{"location":"Themes/#templates","text":"The ShinyCMS theme engine falls back to the default template set if a template is not present in the current theme, which means that you can start building your own theme by simply creating a subdirectory for it in app/views/themes - e.g. app/views/themes/my_site . Even an empty directory is a valid theme! Because themes start with a directory in the themes folder, valid theme names must be valid directory names on whatever operating system you intend to deploy ShinyCMS on. Something in snake-case like my_theme_name is usually a safe bet. Once you've created your theme directory, you can copy any template that you want to edit or override into that directory from app/views/shinycms , and then edit the copied versions. ShinyCMS will pick up your modified version whenever you tell it to use your theme. This system allows you to pick up any updates to the ShinyCMS core templates, with minimal risk of that conflicting with your own customisations to your site's appearance.","title":"Templates"},{"location":"Themes/#supporting-files-images-stylesheets-javascript","text":"If your theme requires any images, you should create a directory for them in app/assets/images with the same name as your theme, and likewise you should put theme-specific CSS into a directory in app/assets/stylesheets - for our example 'my_site' theme, these would be app/assets/images/my_site and app/assets/stylesheets/my_site . You'll need to add these directories to app/assets/config/manifest.js to get Rails to pick them up. If your theme needs some JavaScript, that goes in app/javascript/theme_name , and is loaded by Webpacker (based on the files in app/javascript/packs ).","title":"Supporting files (images, stylesheets, JavaScript)"},{"location":"Themes/#using-your-theme","text":"The default theme can be set in ENV['SHINYCMS_THEME'] and on the Settings page in the admin area. If both are set, the latter takes priority. You can also choose to make this setting user-overridable, in which case a user's setting will take priority for them.","title":"Using your theme"},{"location":"code-of-conduct/","text":"ShinyCMS: Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behaviour that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behaviour by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behaviour and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behaviour. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviour that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Reporting Instances of abusive, harassing, or otherwise unacceptable behaviour may be reported by contacting the project lead at 2020@denny.me - all complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project lead is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code-of-conduct/#shinycms-code-of-conduct","text":"","title":"ShinyCMS: Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behaviour that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behaviour by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behaviour and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behaviour. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviour that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code-of-conduct/#reporting","text":"Instances of abusive, harassing, or otherwise unacceptable behaviour may be reported by contacting the project lead at 2020@denny.me - all complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project lead is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.","title":"Reporting"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"credits/","text":"ShinyCMS Documentation Credits An incomplete list of people who have helped, directly or indirectly, with the creation of this software. Eliot Sykes (@esykes), for extensive advice on too many parts of the system to name, plus generally making me a better Ruby developer over the last few years. I cannot recommend him highly enough as a coach for new or new-to-Ruby developers. aj (@ajkln) of HTML5 UP for the Halcyonic theme that the demo site uses. Entirely aj's work, I just had to cut it up to stick it in the various template files, and fix a few CSS collisions of my own making. I'm hoping to make a few more ShinyCMS themes from HTML5 UP themes in future. Maximo (@maxvlc) and Luigi (@007lva), for reporting issues with running the demo site. Michael Snook (@michaelsnook) and Ed Saperia (@edsaperia), for numerous contributions to the brainstorming around mailing lists and related features. Everybody who contributed code, thinking, bug reports, and feature requests to the original ShinyCMS.","title":"Credits"},{"location":"credits/#shinycms-documentation","text":"","title":"ShinyCMS Documentation"},{"location":"credits/#credits","text":"An incomplete list of people who have helped, directly or indirectly, with the creation of this software. Eliot Sykes (@esykes), for extensive advice on too many parts of the system to name, plus generally making me a better Ruby developer over the last few years. I cannot recommend him highly enough as a coach for new or new-to-Ruby developers. aj (@ajkln) of HTML5 UP for the Halcyonic theme that the demo site uses. Entirely aj's work, I just had to cut it up to stick it in the various template files, and fix a few CSS collisions of my own making. I'm hoping to make a few more ShinyCMS themes from HTML5 UP themes in future. Maximo (@maxvlc) and Luigi (@007lva), for reporting issues with running the demo site. Michael Snook (@michaelsnook) and Ed Saperia (@edsaperia), for numerous contributions to the brainstorming around mailing lists and related features. Everybody who contributed code, thinking, bug reports, and feature requests to the original ShinyCMS.","title":"Credits"},{"location":"demo-site/","text":"ShinyCMS Documentation Demo site Theme / templates The demo site uses the Halcyonic theme, whose templates are currently included with a standard install of the CMS. This may change in future, but for now you will already have the demo site theme templates in place. Demo data There is a set of demo data available, which adds a small amount of content for each of the CMS features. This allows you to try out most of these features without having to invent and input your own test data first. NB: Loading the demo data will wipe the current contents of the database. Before you run this rake task, back up any data that you don't want to lose. To load the demo data: rails shiny:demo:load (and reply 'Y' to the 'Are you sure?' question) Heroku You can run a test/demo install of ShinyCMS on Heroku for free, using free dynos for web and worker, and 'Hobby Dev' add-ons for Postgres and Redis. A suitable Procfile is provided. Loading the demo site data on Heroku To load the demo data into a Heroku Postgres add-on, first load it locally using the instructions above and in the installation guide , then use the following commands to upload it to your Heroku Postgres add-on database (substituting your own app name and heroku pg instance name, obviously): heroku pg:reset postgresql-something-99999 --app my-app-name --confirm my-app-name heroku pg:push shinycms postgresql-something-99999 --app my-app-name","title":"Demo site"},{"location":"demo-site/#shinycms-documentation","text":"","title":"ShinyCMS Documentation"},{"location":"demo-site/#demo-site","text":"","title":"Demo site"},{"location":"demo-site/#theme-templates","text":"The demo site uses the Halcyonic theme, whose templates are currently included with a standard install of the CMS. This may change in future, but for now you will already have the demo site theme templates in place.","title":"Theme / templates"},{"location":"demo-site/#demo-data","text":"There is a set of demo data available, which adds a small amount of content for each of the CMS features. This allows you to try out most of these features without having to invent and input your own test data first. NB: Loading the demo data will wipe the current contents of the database. Before you run this rake task, back up any data that you don't want to lose. To load the demo data: rails shiny:demo:load (and reply 'Y' to the 'Are you sure?' question)","title":"Demo data"},{"location":"demo-site/#heroku","text":"You can run a test/demo install of ShinyCMS on Heroku for free, using free dynos for web and worker, and 'Hobby Dev' add-ons for Postgres and Redis. A suitable Procfile is provided.","title":"Heroku"},{"location":"demo-site/#loading-the-demo-site-data-on-heroku","text":"To load the demo data into a Heroku Postgres add-on, first load it locally using the instructions above and in the installation guide , then use the following commands to upload it to your Heroku Postgres add-on database (substituting your own app name and heroku pg instance name, obviously): heroku pg:reset postgresql-something-99999 --app my-app-name --confirm my-app-name heroku pg:push shinycms postgresql-something-99999 --app my-app-name","title":"Loading the demo site data on Heroku"},{"location":"tldr/","text":"ShinyCMS Documentation Installation: the tl,dr version git clone https://github.com/denny/ShinyCMS-ruby.git cd ShinyCMS-ruby cp docs/env.sample .env.development.local # Edit .env.development.local in case you want/need to change anything bundle install yarn install rails db:setup rails shiny:demo:load # if you want the demo data loaded rails shiny:admin:create # if you didn't load the demo data rails s You should now have a ShinyCMS site at http://localhost:3000, with an admin area at http://localhost:3000/admin","title":"tl,dr"},{"location":"tldr/#shinycms-documentation","text":"","title":"ShinyCMS Documentation"},{"location":"tldr/#installation-the-tldr-version","text":"git clone https://github.com/denny/ShinyCMS-ruby.git cd ShinyCMS-ruby cp docs/env.sample .env.development.local # Edit .env.development.local in case you want/need to change anything bundle install yarn install rails db:setup rails shiny:demo:load # if you want the demo data loaded rails shiny:admin:create # if you didn't load the demo data rails s You should now have a ShinyCMS site at http://localhost:3000, with an admin area at http://localhost:3000/admin","title":"Installation: the tl,dr version"},{"location":"Developers/Concerns/","text":"ShinyCMS Developer Documentation Concerns There are a number of concerns provided with ShinyCMS. These are intended to make it easier for people to build new features that work similarly to the existing features, from both a user and developer perspective. In the main app ShinyClassName - return a 'human friendly', translatable version of model's class name ShinyDemoDataProvider - identifies models that may provide data to the demo site ShinyEmail - sets/searches/validates models by canonical_email as well as email ShinyName - .name method, returns public_name if one is set, internal_name otherwise ShinyShowHide - check or change show/hide status of content on the site/in menus/etc ShinyTeaser - generate a truncated 'teaser' of a longer post, and related methods ShinyToken - generate/reset/check UUID token attributes with optional expiry times ShinySlug - for models with a URL slug attribute ShinySlugInMonth - enforces slug uniqueness within each month (includes ShinySlug) ShinySlugInSection - enforces slug uniqueness within each section (includes ShinySlug) ShinyPost - common behaviour for 'posts' (includes ShinyClassName, ShinyShowHide, ShinySlugInMonth, and ShinyTeaser) (included by ShinyBlog::Post, ShinyNews::Post) ShinyWithTemplate - for models that use a template for layout (included by ShinyPages::Page, ShinyNewsletters::Edition) ShinyElement - for models that are elements of templates or templated content ShinyTemplate - common attributes and behaviours for models that are any kind of layout template ShinyHTMLTemplate - for HTML-based layout templates (includes ShinyTemplate) (included by ShinyPages::Template) ShinyMJMLTemplate - for MJML-based layout templates (includes ShinyTemplate) (included by ShinyNewsletters::Template) ShinyTemplateElement - for models that are elements of a layout template (includes ShinyElement) (included by ShinyPages::TemplateElement, ShinyNewsletters::TemplateElement) At some point in the future, most of these Concerns will probably move into some sort of ShinyTools plugin or plugins (which can then be depended on by whichever other plugins need them), as part of the long-term plan to move most or all of the main app code into plugins. In plugins ShinySearch::Searchable - for models that want to be discoverable by the search feature","title":"Concerns"},{"location":"Developers/Concerns/#shinycms-developer-documentation","text":"","title":"ShinyCMS Developer Documentation"},{"location":"Developers/Concerns/#concerns","text":"There are a number of concerns provided with ShinyCMS. These are intended to make it easier for people to build new features that work similarly to the existing features, from both a user and developer perspective.","title":"Concerns"},{"location":"Developers/Concerns/#in-the-main-app","text":"ShinyClassName - return a 'human friendly', translatable version of model's class name ShinyDemoDataProvider - identifies models that may provide data to the demo site ShinyEmail - sets/searches/validates models by canonical_email as well as email ShinyName - .name method, returns public_name if one is set, internal_name otherwise ShinyShowHide - check or change show/hide status of content on the site/in menus/etc ShinyTeaser - generate a truncated 'teaser' of a longer post, and related methods ShinyToken - generate/reset/check UUID token attributes with optional expiry times ShinySlug - for models with a URL slug attribute ShinySlugInMonth - enforces slug uniqueness within each month (includes ShinySlug) ShinySlugInSection - enforces slug uniqueness within each section (includes ShinySlug) ShinyPost - common behaviour for 'posts' (includes ShinyClassName, ShinyShowHide, ShinySlugInMonth, and ShinyTeaser) (included by ShinyBlog::Post, ShinyNews::Post) ShinyWithTemplate - for models that use a template for layout (included by ShinyPages::Page, ShinyNewsletters::Edition) ShinyElement - for models that are elements of templates or templated content ShinyTemplate - common attributes and behaviours for models that are any kind of layout template ShinyHTMLTemplate - for HTML-based layout templates (includes ShinyTemplate) (included by ShinyPages::Template) ShinyMJMLTemplate - for MJML-based layout templates (includes ShinyTemplate) (included by ShinyNewsletters::Template) ShinyTemplateElement - for models that are elements of a layout template (includes ShinyElement) (included by ShinyPages::TemplateElement, ShinyNewsletters::TemplateElement) At some point in the future, most of these Concerns will probably move into some sort of ShinyTools plugin or plugins (which can then be depended on by whichever other plugins need them), as part of the long-term plan to move most or all of the main app code into plugins.","title":"In the main app"},{"location":"Developers/Concerns/#in-plugins","text":"ShinySearch::Searchable - for models that want to be discoverable by the search feature","title":"In plugins"},{"location":"Developers/Contributing/","text":"ShinyCMS Developer Documentation Contributing If you're interested in contributing to ShinyCMS ... let me start by saying \"Thank you!\" :) Here are some things to read that you might find useful: Project goals Project progress: Done In progress Still to do Instructions for creating a new plugin (and related useful info) Tools and tips for working on mailers (features that send email) Tools and rules for testing (this project has 100% test coverage) Are you new to coding? You might want to start by looking at the issues tagged ' good first issue '; they're the ones that I think are particularly unlikely to turn into a nasty complicated mess halfway through. :) If you find something that you'd like to tackle, but you're not feeling entirely confident about it, please do get in touch with me. I'd love to help you if I can, whether that's by talking the problem through in more detail to make sure you feel like you understand it, or discussing possible solutions, or even pair-coding with you on the solution you (or we) decide to try - whatever you think is most likely to help you, both with the issue at hand, and more generally as a software developer. When I first started contributing to open source projects, I received a lot of incredibly valuable help and advice from more experienced developers - I would welcome more chances to pay that forward. Code of Conduct This project has a Code of Conduct , which is intended to make using ShinyCMS, or contributing to it, a harassment-free experience for everybody involved - regardless of who they are and what they do or don't know. Please read and follow the code of conduct - thank you.","title":"Contributing"},{"location":"Developers/Contributing/#shinycms-developer-documentation","text":"","title":"ShinyCMS Developer Documentation"},{"location":"Developers/Contributing/#contributing","text":"If you're interested in contributing to ShinyCMS ... let me start by saying \"Thank you!\" :) Here are some things to read that you might find useful: Project goals Project progress: Done In progress Still to do Instructions for creating a new plugin (and related useful info) Tools and tips for working on mailers (features that send email) Tools and rules for testing (this project has 100% test coverage)","title":"Contributing"},{"location":"Developers/Contributing/#are-you-new-to-coding","text":"You might want to start by looking at the issues tagged ' good first issue '; they're the ones that I think are particularly unlikely to turn into a nasty complicated mess halfway through. :) If you find something that you'd like to tackle, but you're not feeling entirely confident about it, please do get in touch with me. I'd love to help you if I can, whether that's by talking the problem through in more detail to make sure you feel like you understand it, or discussing possible solutions, or even pair-coding with you on the solution you (or we) decide to try - whatever you think is most likely to help you, both with the issue at hand, and more generally as a software developer. When I first started contributing to open source projects, I received a lot of incredibly valuable help and advice from more experienced developers - I would welcome more chances to pay that forward.","title":"Are you new to coding?"},{"location":"Developers/Contributing/#code-of-conduct","text":"This project has a Code of Conduct , which is intended to make using ShinyCMS, or contributing to it, a harassment-free experience for everybody involved - regardless of who they are and what they do or don't know. Please read and follow the code of conduct - thank you.","title":"Code of Conduct"},{"location":"Developers/Helpers/","text":"ShinyCMS Developer Documentation Helpers There are a number of helpers included with the project. These are intended to make it easier for people to build new features that work similarly to the existing features, from both a user and developer perspective. In many cases the helper methods are there as an easy-to-use wrapper around the most common use cases for a more complex invocation of some model code - for example, <% posts = recent_blog_posts( 5 ) %> is the same as <% posts = ShinyBlog::Post.readonly.recent.limit( 5 ) %> - hopefully this will make it easier for people to build themes even if they're not familiar with ActiveRecord. In the main app ShinyMainSiteHelper - common behaviour for main site controllers; includes many of the helpers below AdminAreaHelper - common behaviour for admin area controllers ShinyMailerHelper - common behaviour for Mailers ShinySiteNameHelper - provides the <%= site_name %> method (included by ShinyMainSiteHelper and ShinyMailerHelper) ShinyPluginHelper - methods wrapping common uses (in views) of the ShinyPlugin model ShinyDateHelper - turns model timestamps into human-friendly time and date strings ShinyDiscussionHelper - discussion-related settings and searches ShinyElementHelper - methods related to *Element models ShinyFeatureFlagHelper - check and enforce feature flags ShinyPagingHelper - methods to help with pagination ShinyUserHelper - user-capability checks and profile link generation AkismetHelper - methods related to the Akismet spam-flagging service RecaptchaHelper - methods related to Google's reCAPTCHA bot detection service SidekiqHelper - method to check whether Sidekiq job queues are enabled At some point in the future, most of these Helpers will probably move into some sort of ShinyTools plugin or plugins (which can then be depended on by whichever other plugins need them), as part of the long-term plan to move most or all of the main app code into plugins. In plugins ShinyPages::MainSiteHelper - page and page sections (default_page, default_section, etc) ShinyInserts::MainSiteHelper - get the content for an insert element, or check its type ShinyForms::MainSiteHelper - look up a form by slug ShinySearch::MainSiteHelper - check which search backends are enabled, and related methods ShinyBlog::MainSiteHelper - get most recent (published) posts, for use in sidebars etc ShinyNews::MainSiteHelper - get most recent (published) posts, for use in sidebars etc ShinyLists::MainSiteHelper - look up a mailing list by slug (or fall back to most recent list) ShinyProfiles::MainSiteHelper - find plugins with user-content partials to include on profile pages","title":"Helpers"},{"location":"Developers/Helpers/#shinycms-developer-documentation","text":"","title":"ShinyCMS Developer Documentation"},{"location":"Developers/Helpers/#helpers","text":"There are a number of helpers included with the project. These are intended to make it easier for people to build new features that work similarly to the existing features, from both a user and developer perspective. In many cases the helper methods are there as an easy-to-use wrapper around the most common use cases for a more complex invocation of some model code - for example, <% posts = recent_blog_posts( 5 ) %> is the same as <% posts = ShinyBlog::Post.readonly.recent.limit( 5 ) %> - hopefully this will make it easier for people to build themes even if they're not familiar with ActiveRecord.","title":"Helpers"},{"location":"Developers/Helpers/#in-the-main-app","text":"ShinyMainSiteHelper - common behaviour for main site controllers; includes many of the helpers below AdminAreaHelper - common behaviour for admin area controllers ShinyMailerHelper - common behaviour for Mailers ShinySiteNameHelper - provides the <%= site_name %> method (included by ShinyMainSiteHelper and ShinyMailerHelper) ShinyPluginHelper - methods wrapping common uses (in views) of the ShinyPlugin model ShinyDateHelper - turns model timestamps into human-friendly time and date strings ShinyDiscussionHelper - discussion-related settings and searches ShinyElementHelper - methods related to *Element models ShinyFeatureFlagHelper - check and enforce feature flags ShinyPagingHelper - methods to help with pagination ShinyUserHelper - user-capability checks and profile link generation AkismetHelper - methods related to the Akismet spam-flagging service RecaptchaHelper - methods related to Google's reCAPTCHA bot detection service SidekiqHelper - method to check whether Sidekiq job queues are enabled At some point in the future, most of these Helpers will probably move into some sort of ShinyTools plugin or plugins (which can then be depended on by whichever other plugins need them), as part of the long-term plan to move most or all of the main app code into plugins.","title":"In the main app"},{"location":"Developers/Helpers/#in-plugins","text":"ShinyPages::MainSiteHelper - page and page sections (default_page, default_section, etc) ShinyInserts::MainSiteHelper - get the content for an insert element, or check its type ShinyForms::MainSiteHelper - look up a form by slug ShinySearch::MainSiteHelper - check which search backends are enabled, and related methods ShinyBlog::MainSiteHelper - get most recent (published) posts, for use in sidebars etc ShinyNews::MainSiteHelper - get most recent (published) posts, for use in sidebars etc ShinyLists::MainSiteHelper - look up a mailing list by slug (or fall back to most recent list) ShinyProfiles::MainSiteHelper - find plugins with user-content partials to include on profile pages","title":"In plugins"},{"location":"Developers/Mailers/","text":"ShinyCMS Development Documentation Working on Mailers Mailers have special config in dev and test environments, because sending test content to your real mailing list is embarrassing at best, and quite probably against the law too. Dev site 'Outbox' If you're working on a new mailer or anything that sends email, you'll probably find http://localhost:3000/dev/outbox useful - any email sent by your dev site will end up captured there instead of actually being sent. It's all presented via a webmail-ish interface, so you can check the content easily. This feature is powered by the letter_opener_web gem. Test suite mailer config The test environment includes the following two lines, which run your .deliver_later mailer jobs now not later, and put your test suite emails somewhere testable (ActionMailer::Base.deliveries): config.active_job.queue_adapter = :test config.action_mailer.delivery_method = :test You can look at the tests in the ShinyNewsletters plugin for examples of how to test email jobs are queued and processed correctly.","title":"Mailers"},{"location":"Developers/Mailers/#shinycms-development-documentation","text":"","title":"ShinyCMS Development Documentation"},{"location":"Developers/Mailers/#working-on-mailers","text":"Mailers have special config in dev and test environments, because sending test content to your real mailing list is embarrassing at best, and quite probably against the law too.","title":"Working on Mailers"},{"location":"Developers/Mailers/#dev-site-outbox","text":"If you're working on a new mailer or anything that sends email, you'll probably find http://localhost:3000/dev/outbox useful - any email sent by your dev site will end up captured there instead of actually being sent. It's all presented via a webmail-ish interface, so you can check the content easily. This feature is powered by the letter_opener_web gem.","title":"Dev site 'Outbox'"},{"location":"Developers/Mailers/#test-suite-mailer-config","text":"The test environment includes the following two lines, which run your .deliver_later mailer jobs now not later, and put your test suite emails somewhere testable (ActionMailer::Base.deliveries): config.active_job.queue_adapter = :test config.action_mailer.delivery_method = :test You can look at the tests in the ShinyNewsletters plugin for examples of how to test email jobs are queued and processed correctly.","title":"Test suite mailer config"},{"location":"Developers/Plugins/","text":"ShinyCMS Developer Documentation Writing a new plugin Generator Move into the base directory of your copy of the ShinyCMS code: cd ShinyCMS-ruby Then, run the plugin generator: rails g shiny:plugin plugins/ShinyThing (Currently your plugin must be named Shiny{Something} for some filepath-dependent hacks to work.) The plugin generator is a cut-down version of the standard Rails Engine generator (rails new plugin --mountable) with some added boilerplate to fit the resulting plugin into ShinyCMS. You can pass it flags which the rails plugin generator understands, to skip features that your plugin doesn't need - e.g: rails g shiny:plugin --skip-action-mailer --skip-action-mailbox --skip-action-cable plugins/ShinyThing Documentation You should put the appropriate details in plugins/ShinyThing/shiny_thing.gemspec , and you'll probably want to edit plugins/ShinyThing/README.md as well. Tests Your tests go in plugins/ShinyThing/spec/ and you can run them from the ShinyCMS root directory: rspec plugins/ShinyThing # to run tests for just your new plugin rspec spec plugins # to run tests for the main app and all plugins Code! Most of your code probably goes in plugins/ShinyThing/app/ , with routes and locale files in plugins/ShinyThing/config/ Special files Some special files are looked for and (if they exist) loaded as specified below, to help your plugin hook into the CMS: Views (partials): * ShinyThing/app/views/shiny_thing/menu/_section.html.erb will be rendered as a new section in the main site menu * ShinyThing/app/views/shiny_thing/profile/_content.html.erb will be rendered in the 'content posted by this user' section of the user's profile page, if the ShinyProfiles plugin is loaded * ShinyThing/app/views/shiny_thing/search/result/shiny_thing/_model_name.html.erb will be rendered when content from your plugin appears in the search results, if the ShinySearch plugin is loaded and you have hooked your models into it * ShinyThing/app/views/shiny_thing/admin/menu/_section.html.erb will be rendered as a new section in the admin area menu * ShinyThing/app/views/shiny_thing/admin/menu/_other_item.html.erb will be rendered as an item in the Other section of the admin area menu * ShinyThing/app/views/shiny_thing/admin/toolbar/_section.html.erb will be rendered in the admin toolbar Helpers: * Methods in ShinyThing/app/helper/shiny_thing/MainSiteHelper.rb will be available to all main site views, not just those rendered by your plugin's controllers Share and Enjoy! If possible, please share your plugin with other ShinyCMS users by making a PR back to the main ShinyCMS-ruby repo on GitHub :)","title":"Plugins"},{"location":"Developers/Plugins/#shinycms-developer-documentation","text":"","title":"ShinyCMS Developer Documentation"},{"location":"Developers/Plugins/#writing-a-new-plugin","text":"","title":"Writing a new plugin"},{"location":"Developers/Plugins/#generator","text":"Move into the base directory of your copy of the ShinyCMS code: cd ShinyCMS-ruby Then, run the plugin generator: rails g shiny:plugin plugins/ShinyThing (Currently your plugin must be named Shiny{Something} for some filepath-dependent hacks to work.) The plugin generator is a cut-down version of the standard Rails Engine generator (rails new plugin --mountable) with some added boilerplate to fit the resulting plugin into ShinyCMS. You can pass it flags which the rails plugin generator understands, to skip features that your plugin doesn't need - e.g: rails g shiny:plugin --skip-action-mailer --skip-action-mailbox --skip-action-cable plugins/ShinyThing","title":"Generator"},{"location":"Developers/Plugins/#documentation","text":"You should put the appropriate details in plugins/ShinyThing/shiny_thing.gemspec , and you'll probably want to edit plugins/ShinyThing/README.md as well.","title":"Documentation"},{"location":"Developers/Plugins/#tests","text":"Your tests go in plugins/ShinyThing/spec/ and you can run them from the ShinyCMS root directory: rspec plugins/ShinyThing # to run tests for just your new plugin rspec spec plugins # to run tests for the main app and all plugins","title":"Tests"},{"location":"Developers/Plugins/#code","text":"Most of your code probably goes in plugins/ShinyThing/app/ , with routes and locale files in plugins/ShinyThing/config/","title":"Code!"},{"location":"Developers/Plugins/#special-files","text":"Some special files are looked for and (if they exist) loaded as specified below, to help your plugin hook into the CMS: Views (partials): * ShinyThing/app/views/shiny_thing/menu/_section.html.erb will be rendered as a new section in the main site menu * ShinyThing/app/views/shiny_thing/profile/_content.html.erb will be rendered in the 'content posted by this user' section of the user's profile page, if the ShinyProfiles plugin is loaded * ShinyThing/app/views/shiny_thing/search/result/shiny_thing/_model_name.html.erb will be rendered when content from your plugin appears in the search results, if the ShinySearch plugin is loaded and you have hooked your models into it * ShinyThing/app/views/shiny_thing/admin/menu/_section.html.erb will be rendered as a new section in the admin area menu * ShinyThing/app/views/shiny_thing/admin/menu/_other_item.html.erb will be rendered as an item in the Other section of the admin area menu * ShinyThing/app/views/shiny_thing/admin/toolbar/_section.html.erb will be rendered in the admin toolbar Helpers: * Methods in ShinyThing/app/helper/shiny_thing/MainSiteHelper.rb will be available to all main site views, not just those rendered by your plugin's controllers","title":"Special files"},{"location":"Developers/Plugins/#share-and-enjoy","text":"If possible, please share your plugin with other ShinyCMS users by making a PR back to the main ShinyCMS-ruby repo on GitHub :)","title":"Share and Enjoy!"},{"location":"Developers/ProjectGoals/","text":"ShinyCMS Developer Documentation Project Goals This rewrite of ShinyCMS started out as as an educational exercise, giving me an opportunity to build a Ruby on Rails application from scratch and largely by myself. It's also been nice to have time for proper testing (100% coverage!), regular refactoring, and all the other things I don't get to do enough of at work :) The original, Perl version of ShinyCMS was built to satisfy the varied requirements of a number of clients during 10 years of working as a freelance web developer, so it's not a small project. Even though I built the vast majority of it, I was still surprised at the length of the feature list when I tried to list it all out near the start of this project. My intention is to re-implement all of those features in the Ruby version (with some improvements), as 'Phase 1' of this project - then move onto adding new features after that. I am completely open to new features being written by other people; fork the code and go for it! I'd love to hear from you when you start, but it's not compulsory :) If you want to get involved in implementation of one of the features that I'm already halfway through re-implementing, or one that's on the original feature list but not yet started in this version of the CMS, please have a quick chat with me first (and I'll probably say \"Great, thanks!\") Progress so far See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable. See the in-progress list for features that I am currently working on (with notes on where I'm up to, and links to useful docs). See the TODO list for features from the original ShinyCMS that I haven't started implementing in this version yet... as well as ideas for new features (that I'm trying to resist building until I've caught up with the Perl feature list), and notes about fixes and refactoring that I want to do on the code I've already written.","title":"Project Goals"},{"location":"Developers/ProjectGoals/#shinycms-developer-documentation","text":"","title":"ShinyCMS Developer Documentation"},{"location":"Developers/ProjectGoals/#project-goals","text":"This rewrite of ShinyCMS started out as as an educational exercise, giving me an opportunity to build a Ruby on Rails application from scratch and largely by myself. It's also been nice to have time for proper testing (100% coverage!), regular refactoring, and all the other things I don't get to do enough of at work :) The original, Perl version of ShinyCMS was built to satisfy the varied requirements of a number of clients during 10 years of working as a freelance web developer, so it's not a small project. Even though I built the vast majority of it, I was still surprised at the length of the feature list when I tried to list it all out near the start of this project. My intention is to re-implement all of those features in the Ruby version (with some improvements), as 'Phase 1' of this project - then move onto adding new features after that. I am completely open to new features being written by other people; fork the code and go for it! I'd love to hear from you when you start, but it's not compulsory :) If you want to get involved in implementation of one of the features that I'm already halfway through re-implementing, or one that's on the original feature list but not yet started in this version of the CMS, please have a quick chat with me first (and I'll probably say \"Great, thanks!\")","title":"Project Goals"},{"location":"Developers/ProjectGoals/#progress-so-far","text":"See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable. See the in-progress list for features that I am currently working on (with notes on where I'm up to, and links to useful docs). See the TODO list for features from the original ShinyCMS that I haven't started implementing in this version yet... as well as ideas for new features (that I'm trying to resist building until I've caught up with the Perl feature list), and notes about fixes and refactoring that I want to do on the code I've already written.","title":"Progress so far"},{"location":"Developers/TODO/","text":"ShinyCMS: Project Progress TODO Urgent / Important Heroku Scheduler / Cron / Whenever / whatever for running scheduled Newsletter Send jobs Features the Perl version has, which the Ruby version doesn't. Yet. :) Small-ish Some sort of file-picker (for image elements, CKEditor, etc) https://ckeditor.com/docs/ckeditor5/latest/Features/MainApp/image-upload/ckfinder.html Integrate functionality from MahBucket here? Site map https://github.com/kjvarga/sitemap_generator ? Affiliate cookie Medium-ish Access control groups Can be used to control access to file downloads and secure whole pages, but also to show/hide individual pieces of page content Polls Large-ish Online shop Payment handling plugins Options include recurring subscriptions to access control groups (AKA paid membership) Forums Autoresponders Check out Heya - may or may not be useful to use / build on top of https://github.com/honeybadger-io/heya Oh, except the licence doesn't look great. Investigate that first. Event listings New features that I'd like to add / features that I'd like to totally rebuild Small-ish Make a generic sidebar template that renders any partials in a specified directory When not-logged-in users post a comment or subscribe to a list, offer to create an account for them Allow an EmailRecipient to reset their token (in case they forward an email containing it to somebody else) 'Deploy to Heroku' button: https://devcenter.heroku.com/articles/heroku-button Generate a technical documentation site from the contents of /docs https://www.mkdocs.org + material theme https://squidfunk.github.io/mkdocs-material 2FA: https://github.com/tinfoil/devise-two-factor Configurable (per-site and per-user) menu order in admin area In admin area, load the full dataset for user capabilities, feature flags, and possibly site settings, and stick them in some hashes, with some helper methods to check them. The menu already makes a crazy amount of hits on the db and there are still a load of 'feature hidden by flag/capability/etc' conditionals to implement. Add a polymorphic metatags model(s?)+concern+helper that can be added to anything that might want them for SEO (pages/sections, shop items/categories, etc) More themes! \u00a1espa\u00f1ol! :D Add tests for form actions being what they're supposed to be on new/edit pages, and for delete links being correct on list pages (to catch path helper issues) Medium-ish Add folding to page sections on /admin/pages Add 'fold all' and 'open all' options (here, and anywhere else that has folding too) Decide 'intelligently' whether to fold all/none/some (e.g. if there are >20 pages in total, fold any section containing >10 pages; if there are >10 sections and >100 pages in total, fold all sections; etc) ShowHide could be abstracted more AND be more useful, as a polymorphic acts_as_showable sort of thing - giving us show_on( :site ), show_in( :menus ), show_on( :sitemap ), etc Tests for rake tasks https://thoughtbot.com/blog/test-rake-tasks-like-a-boss ? (old) Improve UX for slug auto-generation Look at Fae CMS slugger: https://www.faecms.com/documentation/features-slugger A/B testing Field Test: https://github.com/ankane/field_test Cookie consent https://github.com/infinum/cookies_eu ? Replace hand-rolled slug generation with FriendlyId ? https://norman.github.io/friendly_id Fix geolocation (for web stats) via Cloudflare? https://support.cloudflare.com/hc/en-us/articles/200168236-Configuring-Cloudflare-IP-Geolocation Large-ish Re-think mailer preview features Can I use https://guides.rubyonrails.org/action_mailer_basics.html#previewing-emails instead of REP? Can I merge EmailRecipient, CommentAuthor, and VotableIP into a single Visitor model? Think carefully about privacy implications of linking previous actions to current visitor Surveys / Questionnaires GDPR compliance https://github.com/prey/gdpr_rails Switch from ERB to handlebars or similar for main site templates Allow theme templates to be stored in database and edited in admin UI Allow theme templates to be imported from an S3 folder Allow in-situ editing of Page (and other?) content Mercury: https://jejacks0n.github.io/mercury Replace hand-rolled trees and recursion (page sections, etc) with ClosureTree ? https://github.com/ClosureTree/closure_tree Done / In Progress See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable. See the in-progress list for features that I am currently working on (with notes on where I'm up to, links to useful docs, etc).","title":"TODO"},{"location":"Developers/TODO/#shinycms-project-progress","text":"","title":"ShinyCMS: Project Progress"},{"location":"Developers/TODO/#todo","text":"","title":"TODO"},{"location":"Developers/TODO/#urgent-important","text":"Heroku Scheduler / Cron / Whenever / whatever for running scheduled Newsletter Send jobs","title":"Urgent / Important"},{"location":"Developers/TODO/#features-the-perl-version-has-which-the-ruby-version-doesnt-yet","text":"","title":"Features the Perl version has, which the Ruby version doesn't. Yet. :)"},{"location":"Developers/TODO/#small-ish","text":"Some sort of file-picker (for image elements, CKEditor, etc) https://ckeditor.com/docs/ckeditor5/latest/Features/MainApp/image-upload/ckfinder.html Integrate functionality from MahBucket here? Site map https://github.com/kjvarga/sitemap_generator ? Affiliate cookie","title":"Small-ish"},{"location":"Developers/TODO/#medium-ish","text":"Access control groups Can be used to control access to file downloads and secure whole pages, but also to show/hide individual pieces of page content Polls","title":"Medium-ish"},{"location":"Developers/TODO/#large-ish","text":"Online shop Payment handling plugins Options include recurring subscriptions to access control groups (AKA paid membership) Forums Autoresponders Check out Heya - may or may not be useful to use / build on top of https://github.com/honeybadger-io/heya Oh, except the licence doesn't look great. Investigate that first. Event listings","title":"Large-ish"},{"location":"Developers/TODO/#new-features-that-id-like-to-add-features-that-id-like-to-totally-rebuild","text":"","title":"New features that I'd like to add / features that I'd like to totally rebuild"},{"location":"Developers/TODO/#small-ish_1","text":"Make a generic sidebar template that renders any partials in a specified directory When not-logged-in users post a comment or subscribe to a list, offer to create an account for them Allow an EmailRecipient to reset their token (in case they forward an email containing it to somebody else) 'Deploy to Heroku' button: https://devcenter.heroku.com/articles/heroku-button Generate a technical documentation site from the contents of /docs https://www.mkdocs.org + material theme https://squidfunk.github.io/mkdocs-material 2FA: https://github.com/tinfoil/devise-two-factor Configurable (per-site and per-user) menu order in admin area In admin area, load the full dataset for user capabilities, feature flags, and possibly site settings, and stick them in some hashes, with some helper methods to check them. The menu already makes a crazy amount of hits on the db and there are still a load of 'feature hidden by flag/capability/etc' conditionals to implement. Add a polymorphic metatags model(s?)+concern+helper that can be added to anything that might want them for SEO (pages/sections, shop items/categories, etc) More themes! \u00a1espa\u00f1ol! :D Add tests for form actions being what they're supposed to be on new/edit pages, and for delete links being correct on list pages (to catch path helper issues)","title":"Small-ish"},{"location":"Developers/TODO/#medium-ish_1","text":"Add folding to page sections on /admin/pages Add 'fold all' and 'open all' options (here, and anywhere else that has folding too) Decide 'intelligently' whether to fold all/none/some (e.g. if there are >20 pages in total, fold any section containing >10 pages; if there are >10 sections and >100 pages in total, fold all sections; etc) ShowHide could be abstracted more AND be more useful, as a polymorphic acts_as_showable sort of thing - giving us show_on( :site ), show_in( :menus ), show_on( :sitemap ), etc Tests for rake tasks https://thoughtbot.com/blog/test-rake-tasks-like-a-boss ? (old) Improve UX for slug auto-generation Look at Fae CMS slugger: https://www.faecms.com/documentation/features-slugger A/B testing Field Test: https://github.com/ankane/field_test Cookie consent https://github.com/infinum/cookies_eu ? Replace hand-rolled slug generation with FriendlyId ? https://norman.github.io/friendly_id Fix geolocation (for web stats) via Cloudflare? https://support.cloudflare.com/hc/en-us/articles/200168236-Configuring-Cloudflare-IP-Geolocation","title":"Medium-ish"},{"location":"Developers/TODO/#large-ish_1","text":"Re-think mailer preview features Can I use https://guides.rubyonrails.org/action_mailer_basics.html#previewing-emails instead of REP? Can I merge EmailRecipient, CommentAuthor, and VotableIP into a single Visitor model? Think carefully about privacy implications of linking previous actions to current visitor Surveys / Questionnaires GDPR compliance https://github.com/prey/gdpr_rails Switch from ERB to handlebars or similar for main site templates Allow theme templates to be stored in database and edited in admin UI Allow theme templates to be imported from an S3 folder Allow in-situ editing of Page (and other?) content Mercury: https://jejacks0n.github.io/mercury Replace hand-rolled trees and recursion (page sections, etc) with ClosureTree ? https://github.com/ClosureTree/closure_tree","title":"Large-ish"},{"location":"Developers/TODO/#done-in-progress","text":"See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable. See the in-progress list for features that I am currently working on (with notes on where I'm up to, links to useful docs, etc).","title":"Done / In Progress"},{"location":"Developers/Testing/","text":"ShinyCMS Developer Documentation Testing ShinyCMS, including all the plugins, has 100% test coverage (with a minimal amount of cheating, mostly around rake tasks) What should I test? Please write tests for any and all new code that you add. At the very least, test the golden path with a request spec. If you're catching errors and turning them into helpful warnings for the user, you should also test that's working as intended. (And if you're not doing that, you probably should be.) You should put extra testing around anything that has particularly bad consequences (e.g. data leaks, data loss, privilege escalation, etc) if it goes wrong. It's also helpful to put extra tests around anything that's a bit unusual - the tests can double up as practical usage documentation. When should I test? At minimum, you should run rubocop and the test suite, and fix any issues they find, before submitting a pull request. I recommend running them much more often than that. :) How do I test? To run the linter: rubocop To run the test suite: rspec spec plugins (from the project root directory) To install git hooks to run rubocop and the tests automatically when you commit or push new code, install Overcommit and follow its instructions - an Overcommit config file is included with ShinyCMS.","title":"Testing"},{"location":"Developers/Testing/#shinycms-developer-documentation","text":"","title":"ShinyCMS Developer Documentation"},{"location":"Developers/Testing/#testing","text":"ShinyCMS, including all the plugins, has 100% test coverage (with a minimal amount of cheating, mostly around rake tasks)","title":"Testing"},{"location":"Developers/Testing/#what-should-i-test","text":"Please write tests for any and all new code that you add. At the very least, test the golden path with a request spec. If you're catching errors and turning them into helpful warnings for the user, you should also test that's working as intended. (And if you're not doing that, you probably should be.) You should put extra testing around anything that has particularly bad consequences (e.g. data leaks, data loss, privilege escalation, etc) if it goes wrong. It's also helpful to put extra tests around anything that's a bit unusual - the tests can double up as practical usage documentation.","title":"What should I test?"},{"location":"Developers/Testing/#when-should-i-test","text":"At minimum, you should run rubocop and the test suite, and fix any issues they find, before submitting a pull request. I recommend running them much more often than that. :)","title":"When should I test?"},{"location":"Developers/Testing/#how-do-i-test","text":"To run the linter: rubocop To run the test suite: rspec spec plugins (from the project root directory) To install git hooks to run rubocop and the tests automatically when you commit or push new code, install Overcommit and follow its instructions - an Overcommit config file is included with ShinyCMS.","title":"How do I test?"},{"location":"Developers/done/","text":"ShinyCMS: Project Progress Done Features from the Perl version that are now available in the Ruby version (Noting improvements from the Perl version, if any) Pages, with page templates, page sections, and dynamically-generated menus Improvements: the Perl version requires all pages to be in a section, and you can only nest sections two levels deep. The Ruby version allows you to have pages at the top-level of your site, and to nest sections to any depth Inserts (re-usable content fragments that can be pulled into any template) Improvements: snappier name? ;) (Renamed from Shared Content to Inserts) Basic form handlers Improvements: MJML email templates Blog Improvements: Split up single-blog and multi-blog versions (the latter of which was never fully implemented in the Perl version but just cluttered up the codebase a bit) into two separate plugins. Now the multi-blog feature is in an unmerged development branch and the merged single-blog code is much cleaner News section Newsletters and mailing lists Improvements: Email address verification (AKA double opt-in) for email recipients MJML templates Records exact consent text agreed to for list subscriptions (for GDPR compliance) Nested comment threads Currently enabled on blog posts and news posts Ready to add to any other content type going forward Improvements: Perl's main ORM doesn't have native support for polymorphism, and in fact I'd never heard of polymorphism at the time - but to get the comments feature to work how I wanted, I basically came up with all the same ideas. The Ruby version uses ActiveRecord's native polymorphism, which is no doubt better than my hand-rolled version :) MJML templates for reply notification emails Tags Currently enabled on blog posts and news posts Ready to add to any other content type going forward Improvements: more generic implementation (powered by ActAsTaggableOn) 'Likes' Currently enabled on comments, blog posts, and news posts Ready to add to any other content type going forward Improvements: adds optional 'downvote' feature; more generic implementation (powered by ActsAsVoteable) Site search Improvements: Support for multiple search back-ends User accounts and administration Improvements: The Perl version has role-based authorisation. The Ruby version has more flexible ACL-based authorisation (powered by Pundit). MJML templates for all user account emails (welcome, forgot password, etc) reCAPTCHA bot protection for registration and comment forms Improvements: supports reCAPTCHA v3 with scores. Tries an invisible CAPTCHA first, falling back to an interactive CAPTCHA if that fails. Akismet support, to flag potential spam comments Moderation queue in admin area Confirming/removing flag sends ham/spam training data to Akismet Improvements: the Perl version doesn't feed back to Akismet (yet) Features that the Perl version didn't have, but the Ruby version does Support for themes Override the core templates on a per-file, as-needed basis Two themes included ShinyConcerns While re-implementing various features I've tried to pull useful common functionality out into concerns, that might be handy building blocks for anybody else who wants to write a ShinyCMS plugin Built-in email stats Track opens and/or link-clicks Disabled in default settings (privacy, yay!) Powered by Ahoy::Email Built-in web stats Track visits, visitors, page views, etc Support for GDPR-friendly stats (IP masking, etc) Disabled in default settings Powered by Ahoy Recoverable soft delete on almost all models (powered by ActsAsParanoid) TODO / In Progress See the TODO list for features from the original ShinyCMS that I haven't started implementing in this version yet... as well as ideas for new features, that I'm trying to resist building until I've caught up with the Perl feature list. See the in-progress list for features that I am currently working on (with notes on where I'm up to, and links to useful docs).","title":"Done"},{"location":"Developers/done/#shinycms-project-progress","text":"","title":"ShinyCMS: Project Progress"},{"location":"Developers/done/#done","text":"","title":"Done"},{"location":"Developers/done/#features-from-the-perl-version-that-are-now-available-in-the-ruby-version","text":"(Noting improvements from the Perl version, if any) Pages, with page templates, page sections, and dynamically-generated menus Improvements: the Perl version requires all pages to be in a section, and you can only nest sections two levels deep. The Ruby version allows you to have pages at the top-level of your site, and to nest sections to any depth Inserts (re-usable content fragments that can be pulled into any template) Improvements: snappier name? ;) (Renamed from Shared Content to Inserts) Basic form handlers Improvements: MJML email templates Blog Improvements: Split up single-blog and multi-blog versions (the latter of which was never fully implemented in the Perl version but just cluttered up the codebase a bit) into two separate plugins. Now the multi-blog feature is in an unmerged development branch and the merged single-blog code is much cleaner News section Newsletters and mailing lists Improvements: Email address verification (AKA double opt-in) for email recipients MJML templates Records exact consent text agreed to for list subscriptions (for GDPR compliance) Nested comment threads Currently enabled on blog posts and news posts Ready to add to any other content type going forward Improvements: Perl's main ORM doesn't have native support for polymorphism, and in fact I'd never heard of polymorphism at the time - but to get the comments feature to work how I wanted, I basically came up with all the same ideas. The Ruby version uses ActiveRecord's native polymorphism, which is no doubt better than my hand-rolled version :) MJML templates for reply notification emails Tags Currently enabled on blog posts and news posts Ready to add to any other content type going forward Improvements: more generic implementation (powered by ActAsTaggableOn) 'Likes' Currently enabled on comments, blog posts, and news posts Ready to add to any other content type going forward Improvements: adds optional 'downvote' feature; more generic implementation (powered by ActsAsVoteable) Site search Improvements: Support for multiple search back-ends User accounts and administration Improvements: The Perl version has role-based authorisation. The Ruby version has more flexible ACL-based authorisation (powered by Pundit). MJML templates for all user account emails (welcome, forgot password, etc) reCAPTCHA bot protection for registration and comment forms Improvements: supports reCAPTCHA v3 with scores. Tries an invisible CAPTCHA first, falling back to an interactive CAPTCHA if that fails. Akismet support, to flag potential spam comments Moderation queue in admin area Confirming/removing flag sends ham/spam training data to Akismet Improvements: the Perl version doesn't feed back to Akismet (yet)","title":"Features from the Perl version that are now available in the Ruby version"},{"location":"Developers/done/#features-that-the-perl-version-didnt-have-but-the-ruby-version-does","text":"Support for themes Override the core templates on a per-file, as-needed basis Two themes included ShinyConcerns While re-implementing various features I've tried to pull useful common functionality out into concerns, that might be handy building blocks for anybody else who wants to write a ShinyCMS plugin Built-in email stats Track opens and/or link-clicks Disabled in default settings (privacy, yay!) Powered by Ahoy::Email Built-in web stats Track visits, visitors, page views, etc Support for GDPR-friendly stats (IP masking, etc) Disabled in default settings Powered by Ahoy Recoverable soft delete on almost all models (powered by ActsAsParanoid)","title":"Features that the Perl version didn't have, but the Ruby version does"},{"location":"Developers/done/#todo-in-progress","text":"See the TODO list for features from the original ShinyCMS that I haven't started implementing in this version yet... as well as ideas for new features, that I'm trying to resist building until I've caught up with the Perl feature list. See the in-progress list for features that I am currently working on (with notes on where I'm up to, and links to useful docs).","title":"TODO / In Progress"},{"location":"Developers/in-progress/","text":"ShinyCMS Developer Documentation In progress Features that I'm halfway through implementing (with notes on where I'm up to, what I'm stuck on, links to useful docs, etc) Features that exist in the Perl version Newsletters (HTML mailshots) and mailing lists Nearly done! Add a nice default template or two, from https://mjml.io/templates/newsletter-email Do some end-to-end testing, i.e. 'try to use it' User profile pages (with content such as recent comments, recent posts, etc) Features that don't exist in the Perl version but I seem to be working on them anyway Plugin architecture I've converted most of the existing features into Rails Engine plugins Still to do: Move Comments, Tags, and Likes into plugins Move concerns and helpers into a plugin (ShinyToolbox?) Eventually, break them up into multiple plugins (ShinyPostTools, ShinyTemplateTools, etc) Look into moving Users into a plugin Ideally, move all the non-Devise User/Account functionality into concerns and helpers, so you could include those into any site with Devise-powered auth and then use any ShinyPlugin Move each plugin into its own separate gem Move pages, newsletters, and forms test templates into each plugin's spec/fixtures Look at Combustion, for minimal test apps for gems: https://github.com/pat/combustion Blazer dashboards / charts / etc: https://github.com/ankane/blazer This is merged, but needs a default dashboard and queries setting up Algolia search backend: https://devcenter.heroku.com/articles/algoliasearch#using-with-rails NB: Not free to non-commercial sites using the CMS :( Multiple blog support The Perl version had half-finished code for hosting multiple blogs on a single 'journal' site In the Ruby version, this has been split into two plugins: ShinyBlog (single blog) - finished (for now) and merged ShinyBlogs (multi-blog) - not finished, still in a branch Done / TODO See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable. See the TODO list for features from the original ShinyCMS that I haven't started implementing in this version yet... as well as ideas for new features, that I'm trying to resist building until I've caught up with the Perl feature list.","title":"In Progress"},{"location":"Developers/in-progress/#shinycms-developer-documentation","text":"","title":"ShinyCMS Developer Documentation"},{"location":"Developers/in-progress/#in-progress","text":"Features that I'm halfway through implementing (with notes on where I'm up to, what I'm stuck on, links to useful docs, etc)","title":"In progress"},{"location":"Developers/in-progress/#features-that-exist-in-the-perl-version","text":"Newsletters (HTML mailshots) and mailing lists Nearly done! Add a nice default template or two, from https://mjml.io/templates/newsletter-email Do some end-to-end testing, i.e. 'try to use it' User profile pages (with content such as recent comments, recent posts, etc)","title":"Features that exist in the Perl version"},{"location":"Developers/in-progress/#features-that-dont-exist-in-the-perl-version-but-i-seem-to-be-working-on-them-anyway","text":"Plugin architecture I've converted most of the existing features into Rails Engine plugins Still to do: Move Comments, Tags, and Likes into plugins Move concerns and helpers into a plugin (ShinyToolbox?) Eventually, break them up into multiple plugins (ShinyPostTools, ShinyTemplateTools, etc) Look into moving Users into a plugin Ideally, move all the non-Devise User/Account functionality into concerns and helpers, so you could include those into any site with Devise-powered auth and then use any ShinyPlugin Move each plugin into its own separate gem Move pages, newsletters, and forms test templates into each plugin's spec/fixtures Look at Combustion, for minimal test apps for gems: https://github.com/pat/combustion Blazer dashboards / charts / etc: https://github.com/ankane/blazer This is merged, but needs a default dashboard and queries setting up Algolia search backend: https://devcenter.heroku.com/articles/algoliasearch#using-with-rails NB: Not free to non-commercial sites using the CMS :( Multiple blog support The Perl version had half-finished code for hosting multiple blogs on a single 'journal' site In the Ruby version, this has been split into two plugins: ShinyBlog (single blog) - finished (for now) and merged ShinyBlogs (multi-blog) - not finished, still in a branch","title":"Features that don't exist in the Perl version but I seem to be working on them anyway"},{"location":"Developers/in-progress/#done-todo","text":"See the done list for features from the original ShinyCMS that I have already implemented in this version - as well as a few new ones that snuck in along the way - with notes on improvements from the Perl version where applicable. See the TODO list for features from the original ShinyCMS that I haven't started implementing in this version yet... as well as ideas for new features, that I'm trying to resist building until I've caught up with the Perl feature list.","title":"Done / TODO"},{"location":"Developers/Notes/flappy-tests/","text":"ShinyCMS Flappy tests I'm seeing intermittent but recurring 404s in a few tests; they generally don't recur when I run rspec again with the same seed. For now I'm just making a note of the test output here, when I remember. ===== Failures: 1) Comment moderation PUT /admin/comment/1/hide hides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:131:in `block (3 levels) in ' Finished in 41.06 seconds (files took 2.47 seconds to load) 284 examples, 1 failure Failed examples: rspec ./spec/requests/admin/comments_spec.rb:125 # Comment moderation PUT /admin/comment/1/hide hides the comment Randomized with seed 26338 ===== Failures: 1) Comment moderation PUT /admin/comment/1/hide hides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:131:in `block (3 levels) in ' Finished in 35.11 seconds (files took 2.23 seconds to load) 285 examples, 1 failure Failed examples: rspec ./spec/requests/admin/comments_spec.rb:125 # Comment moderation PUT /admin/comment/1/hide hides the comment Randomized with seed 33162 ===== Failures: 1) Comment moderation PUT /admin/comment/1/hide hides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:131:in `block (3 levels) in ' Finished in 37.81 seconds (files took 2.33 seconds to load) 296 examples, 1 failure, 1 pending Failed examples: rspec ./spec/requests/admin/comments_spec.rb:125 # Comment moderation PUT /admin/comment/1/hide hides the comment Randomized with seed 47403 ===== Failures: 1) Comment moderation PUT /admin/comment/1/unhide unhides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:148:in `block (3 levels) in ' Finished in 34.82 seconds (files took 2.19 seconds to load) 284 examples, 1 failure Failed examples: rspec ./spec/requests/admin/comments_spec.rb:139 # Comment moderation PUT /admin/comment/1/unhide unhides the comment Randomized with seed 44271 ===== Failures: 1) Blog scopes can fetch the visible posts (not hidden, not future-dated) Failure/Error: expect( blog.posts.length ).to eq 1 expected: 1 got: 0 (compared using ==) # ./spec/models/blog_spec.rb:21:in `block (3 levels) in <top (required)>' Finished in 35.02 seconds (files took 2.24 seconds to load) 285 examples, 1 failure Failed examples: rspec ./spec/models/blog_spec.rb:15 # Blog scopes can fetch the visible posts (not hidden, not future-dated) Randomized with seed 27241 ===== Failures: 1) Blogs GET #recent returns a success response Failure/Error: expect( response.body ).to have_css 'h2', text: post2.title expected to find visible css \"h2\" with text \"Highpoint\" but there were no matches. Also found \"\\n Now Look What You've Made Me Do\\n \", \"\\n Recent Posts\\n \", \"\\n Links\\n \", which matched the selector but not all filters. # ./spec/requests/blogs_spec.rb:47:in `block (3 levels) in ' Finished in 49.17 seconds (files took 4.5 seconds to load) 296 examples, 1 failure, 1 pending Failed examples: rspec ./spec/requests/blogs_spec.rb:14 # Blogs GET #recent returns a success response Randomized with seed 41103 =====","title":"ShinyCMS"},{"location":"Developers/Notes/flappy-tests/#shinycms","text":"","title":"ShinyCMS"},{"location":"Developers/Notes/flappy-tests/#flappy-tests","text":"I'm seeing intermittent but recurring 404s in a few tests; they generally don't recur when I run rspec again with the same seed. For now I'm just making a note of the test output here, when I remember. ===== Failures: 1) Comment moderation PUT /admin/comment/1/hide hides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:131:in `block (3 levels) in ' Finished in 41.06 seconds (files took 2.47 seconds to load) 284 examples, 1 failure Failed examples: rspec ./spec/requests/admin/comments_spec.rb:125 # Comment moderation PUT /admin/comment/1/hide hides the comment Randomized with seed 26338 ===== Failures: 1) Comment moderation PUT /admin/comment/1/hide hides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:131:in `block (3 levels) in ' Finished in 35.11 seconds (files took 2.23 seconds to load) 285 examples, 1 failure Failed examples: rspec ./spec/requests/admin/comments_spec.rb:125 # Comment moderation PUT /admin/comment/1/hide hides the comment Randomized with seed 33162 ===== Failures: 1) Comment moderation PUT /admin/comment/1/hide hides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:131:in `block (3 levels) in ' Finished in 37.81 seconds (files took 2.33 seconds to load) 296 examples, 1 failure, 1 pending Failed examples: rspec ./spec/requests/admin/comments_spec.rb:125 # Comment moderation PUT /admin/comment/1/hide hides the comment Randomized with seed 47403 ===== Failures: 1) Comment moderation PUT /admin/comment/1/unhide unhides the comment Failure/Error: expect( response ).to have_http_status :ok expected the response to have status code :ok (200) but it was :not_found (404) # ./spec/requests/admin/comments_spec.rb:148:in `block (3 levels) in ' Finished in 34.82 seconds (files took 2.19 seconds to load) 284 examples, 1 failure Failed examples: rspec ./spec/requests/admin/comments_spec.rb:139 # Comment moderation PUT /admin/comment/1/unhide unhides the comment Randomized with seed 44271 ===== Failures: 1) Blog scopes can fetch the visible posts (not hidden, not future-dated) Failure/Error: expect( blog.posts.length ).to eq 1 expected: 1 got: 0 (compared using ==) # ./spec/models/blog_spec.rb:21:in `block (3 levels) in <top (required)>' Finished in 35.02 seconds (files took 2.24 seconds to load) 285 examples, 1 failure Failed examples: rspec ./spec/models/blog_spec.rb:15 # Blog scopes can fetch the visible posts (not hidden, not future-dated) Randomized with seed 27241 ===== Failures: 1) Blogs GET #recent returns a success response Failure/Error: expect( response.body ).to have_css 'h2', text: post2.title expected to find visible css \"h2\" with text \"Highpoint\" but there were no matches. Also found \"\\n Now Look What You've Made Me Do\\n \", \"\\n Recent Posts\\n \", \"\\n Links\\n \", which matched the selector but not all filters. # ./spec/requests/blogs_spec.rb:47:in `block (3 levels) in ' Finished in 49.17 seconds (files took 4.5 seconds to load) 296 examples, 1 failure, 1 pending Failed examples: rspec ./spec/requests/blogs_spec.rb:14 # Blogs GET #recent returns a success response Randomized with seed 41103 =====","title":"Flappy tests"},{"location":"Developers/Notes/import-from-perl-shinycms/","text":"ShinyCMS: copying data from Perl version to Ruby version Incoherent notes follow... General We're assuming MySQL at Perl end, Postgres at Ruby end. Tables (for features that have been re-implemented) blog_post -> blog_posts id (int-> bigint) title url_title -> slug body hidden (tinyint -> boolean) blog -> blog_id author -> user_id posted -> posted_at, created_at, updated_at discussion -> [ gone - replaced by wibbly-wobbly polymorphy stuff ] cms_page -> pages id (int-> bigint) name url_title -> slug title description template -> template_id section -> section_id menu_position -> sort_order hidden (tinyint -> boolean) -> hidden_from_menu created -> created_at, updated_at cms_page_element -> page_elements id (int-> bigint) page - page_id name content type -> element_type created -> created_at, updated_at cms_template -> page_templates id (int-> bigint) name -> description template_file -> filename created -> created_at, updated_at cms_template_element -> page_template_elements id (int-> bigint) template -> template_id name -> content type -> element_type created -> created_at, updated_at cms_section -> page_sections id (int-> bigint) name description -> title url_name -> slug default_page -> default_page_id -> section_id menu_position -> sort_order hidden (tinyint -> boolean) -> hidden_from_menu created -> created_at, updated_at comment comment_like discussion news_item -> news_posts mail_recipient mailing_list subscription newsletter newsletter_element newsletter_template newsletter_template_element shared_content -> insert_elements tag tagset -> taggings ?? user role -> ??? user_role -> ???","title":"ShinyCMS: copying data from Perl version to Ruby version"},{"location":"Developers/Notes/import-from-perl-shinycms/#shinycms-copying-data-from-perl-version-to-ruby-version","text":"Incoherent notes follow...","title":"ShinyCMS: copying data from Perl version to Ruby version"},{"location":"Developers/Notes/import-from-perl-shinycms/#general","text":"We're assuming MySQL at Perl end, Postgres at Ruby end.","title":"General"},{"location":"Developers/Notes/import-from-perl-shinycms/#tables-for-features-that-have-been-re-implemented","text":"blog_post -> blog_posts id (int-> bigint) title url_title -> slug body hidden (tinyint -> boolean) blog -> blog_id author -> user_id posted -> posted_at, created_at, updated_at discussion -> [ gone - replaced by wibbly-wobbly polymorphy stuff ] cms_page -> pages id (int-> bigint) name url_title -> slug title description template -> template_id section -> section_id menu_position -> sort_order hidden (tinyint -> boolean) -> hidden_from_menu created -> created_at, updated_at cms_page_element -> page_elements id (int-> bigint) page - page_id name content type -> element_type created -> created_at, updated_at cms_template -> page_templates id (int-> bigint) name -> description template_file -> filename created -> created_at, updated_at cms_template_element -> page_template_elements id (int-> bigint) template -> template_id name -> content type -> element_type created -> created_at, updated_at cms_section -> page_sections id (int-> bigint) name description -> title url_name -> slug default_page -> default_page_id -> section_id menu_position -> sort_order hidden (tinyint -> boolean) -> hidden_from_menu created -> created_at, updated_at comment comment_like discussion news_item -> news_posts mail_recipient mailing_list subscription newsletter newsletter_element newsletter_template newsletter_template_element shared_content -> insert_elements tag tagset -> taggings ?? user role -> ??? user_role -> ???","title":"Tables (for features that have been re-implemented)"},{"location":"Developers/Notes/mailing-list-notes/","text":"ShinyCMS: dev notes Mailing Lists ( / Discussion Groups / Forums ) (Warning! MASSIVE creature feep occurring here!) Things which aren't optional: * Double opt-in subscriptions are a basic human right ;) * Instantly-effective unsubscribe links and headers in all list emails * Settings with privacy implications should default to the more private setting General thoughts: * UUIDs for anything that doesn't have slugs - do not expose sequential IDs! * Good time to switch the whole system to UUIDs under the hood? * Having read around on this, not convinced it's a good idea * HashIDs instead? https://github.com/jcypret/hashid-rails Lists / Groups: * Enabled (emails will be delivered): yes/no * List details page * Useful info: description, owner/admins, etc * Useful links: sub/unsub, view archives, view subscribers, etc * Subscriber list is: visible/hidden * Hidden: yes/no * Publicised (listed on hub page of some sort): yes/no * Open for subscriptions: yes/no / see 'List subscriptions' below List categories: * e.g. Announcements/Promo/Discussion/etc * Partly for display purposes, partly for potential ACL stuff (see 'Admins') List subscriptions: * Can ask to subscribe: anybody / registered website users / nobody * Subscriptions require approval: yes/no * Subscriptions can be approved by: any subscriber / established subscribers / >N/>N% subscribers / registered users / admins only * Subscribers can be removed by: [ see previous list ] * When somebody unsubscribes by any interface other than the 'manage all subs' page, we should include details of any other lists they are still subscribed to in the unsub confirmation email, and give them both the 'manage your subscriptions' link and also a one-click 'unsubscribe from everything' link (if they're leaving, they're leaving - making it harder for them is pointless) * List is notified of subscriptions and unsubscriptions: yes/no List archives: * Web view of previous posts to a list * Provides 'view this email in your browser' functionality * Viewable by: anybody / subscribers / admins / nobody * Subscribers can see posts from before they subscribed: yes/no List posts: * Can post to list: any subscriber / subscribers over X duration / subscribers over N previous posts / admins only * Reply-to munging (trollolol): yes/no * Show email of sender: yes/partial/obfuscated/no * Show name of sender: yes/no Moderation: * Posts to list require approval if they are from: anybody / unregistered users / new subscribers ( N or >N% subscribers / registered users / admins only Tracking (for marketing?) and Engagement (list quality/sender reputation): * Opens are tracked: yes/no * Is it possible to filter out 'opens' by spam-scanning software (etc) that downloads images (including our tracking pixels)? Look at user-agents maybe? * Clicks are tracked: yes/no * Again, can we filter out link-following by software? * Track all the details of a click (probably for marketing) or just the fact that 'a click happened' (enough for engagement): detail/no detail * If opens and/or clicks are tracked, use them to disable emails to potentially-unengaged people after X duration / N emails: yes/no * Ask people before disabling emails to them: yes/no * If people don't engage with emails OR web UI, disable their subscription entirely? (Do I want the word 'subscription' here or 'membership'- I'm back to wondering whether 'lists' and 'groups' are the same thing, or should be) Per subscriber per list config Receive emails sent to list: yes/no Receive emails in digest format (daily/weekly?) yes/no 'Admins' (This is a near-fractal timesink of potential granularity and configurability - it will definitely need its own ACL system/subsystem eventually.) e.g. * A list/group can have: owner(s?) / admins / moderators * owners can create/remove admins * admins can delete list? * Categories can have: ditto, and: * owners can edit category, create/remove admins * admins can create/delete lists * The whole system has: same again? plus: * owners can create categories * etc Enhancements for later (because this list isn't long enough already) Web UI 'Forum style' web interface that can be used to read and post to list too Extension of 'view archives' above, or replacement for it? Somewhere around here this turns from a mailing list feature into a 'groups' feature Ratings: Rate posts (this is only really viable if there's a web interface I think) Rate people (reputation systems omg) More options for posts: Restrict post length to: NN characters Posts over this length are: rejected/truncated Only NN posts per subscriber per HH hours Delay before distributing each post: NN minutes More options for subscriptions: Pay to subscribe (once the system has payment handlers implemented) Autoresponders 'Timed series' emails Could be triggered by System (new user signs up -> triggers onboarding series Admin shrug User request Via web UI Via autoresponder Via 'pay to subscribe' (\"Buy our six week 'learn to cook' course!\", etc)","title":"ShinyCMS: dev notes"},{"location":"Developers/Notes/mailing-list-notes/#shinycms-dev-notes","text":"","title":"ShinyCMS: dev notes"},{"location":"Developers/Notes/mailing-list-notes/#mailing-lists-discussion-groups-forums","text":"","title":"Mailing Lists ( / Discussion Groups / Forums )"},{"location":"Developers/Notes/mailing-list-notes/#warning-massive-creature-feep-occurring-here","text":"Things which aren't optional: * Double opt-in subscriptions are a basic human right ;) * Instantly-effective unsubscribe links and headers in all list emails * Settings with privacy implications should default to the more private setting General thoughts: * UUIDs for anything that doesn't have slugs - do not expose sequential IDs! * Good time to switch the whole system to UUIDs under the hood? * Having read around on this, not convinced it's a good idea * HashIDs instead? https://github.com/jcypret/hashid-rails Lists / Groups: * Enabled (emails will be delivered): yes/no * List details page * Useful info: description, owner/admins, etc * Useful links: sub/unsub, view archives, view subscribers, etc * Subscriber list is: visible/hidden * Hidden: yes/no * Publicised (listed on hub page of some sort): yes/no * Open for subscriptions: yes/no / see 'List subscriptions' below List categories: * e.g. Announcements/Promo/Discussion/etc * Partly for display purposes, partly for potential ACL stuff (see 'Admins') List subscriptions: * Can ask to subscribe: anybody / registered website users / nobody * Subscriptions require approval: yes/no * Subscriptions can be approved by: any subscriber / established subscribers / >N/>N% subscribers / registered users / admins only * Subscribers can be removed by: [ see previous list ] * When somebody unsubscribes by any interface other than the 'manage all subs' page, we should include details of any other lists they are still subscribed to in the unsub confirmation email, and give them both the 'manage your subscriptions' link and also a one-click 'unsubscribe from everything' link (if they're leaving, they're leaving - making it harder for them is pointless) * List is notified of subscriptions and unsubscriptions: yes/no List archives: * Web view of previous posts to a list * Provides 'view this email in your browser' functionality * Viewable by: anybody / subscribers / admins / nobody * Subscribers can see posts from before they subscribed: yes/no List posts: * Can post to list: any subscriber / subscribers over X duration / subscribers over N previous posts / admins only * Reply-to munging (trollolol): yes/no * Show email of sender: yes/partial/obfuscated/no * Show name of sender: yes/no Moderation: * Posts to list require approval if they are from: anybody / unregistered users / new subscribers ( N or >N% subscribers / registered users / admins only Tracking (for marketing?) and Engagement (list quality/sender reputation): * Opens are tracked: yes/no * Is it possible to filter out 'opens' by spam-scanning software (etc) that downloads images (including our tracking pixels)? Look at user-agents maybe? * Clicks are tracked: yes/no * Again, can we filter out link-following by software? * Track all the details of a click (probably for marketing) or just the fact that 'a click happened' (enough for engagement): detail/no detail * If opens and/or clicks are tracked, use them to disable emails to potentially-unengaged people after X duration / N emails: yes/no * Ask people before disabling emails to them: yes/no * If people don't engage with emails OR web UI, disable their subscription entirely? (Do I want the word 'subscription' here or 'membership'- I'm back to wondering whether 'lists' and 'groups' are the same thing, or should be)","title":"(Warning! MASSIVE creature feep occurring here!)"},{"location":"Developers/Notes/mailing-list-notes/#per-subscriber-per-list-config","text":"Receive emails sent to list: yes/no Receive emails in digest format (daily/weekly?) yes/no","title":"Per subscriber per list config"},{"location":"Developers/Notes/mailing-list-notes/#admins","text":"(This is a near-fractal timesink of potential granularity and configurability - it will definitely need its own ACL system/subsystem eventually.) e.g. * A list/group can have: owner(s?) / admins / moderators * owners can create/remove admins * admins can delete list? * Categories can have: ditto, and: * owners can edit category, create/remove admins * admins can create/delete lists * The whole system has: same again? plus: * owners can create categories * etc","title":"'Admins'"},{"location":"Developers/Notes/mailing-list-notes/#enhancements-for-later-because-this-list-isnt-long-enough-already","text":"Web UI 'Forum style' web interface that can be used to read and post to list too Extension of 'view archives' above, or replacement for it? Somewhere around here this turns from a mailing list feature into a 'groups' feature Ratings: Rate posts (this is only really viable if there's a web interface I think) Rate people (reputation systems omg) More options for posts: Restrict post length to: NN characters Posts over this length are: rejected/truncated Only NN posts per subscriber per HH hours Delay before distributing each post: NN minutes More options for subscriptions: Pay to subscribe (once the system has payment handlers implemented) Autoresponders 'Timed series' emails Could be triggered by System (new user signs up -> triggers onboarding series Admin shrug User request Via web UI Via autoresponder Via 'pay to subscribe' (\"Buy our six week 'learn to cook' course!\", etc)","title":"Enhancements for later (because this list isn't long enough already)"},{"location":"Developers/Notes/menu-icons/","text":"ShinyCMS: admin-area menu icons All of the icons I've used in the admin-area sidebar menu (and a few other places in the admin area) are part of the free icon set from CoreUI. If you're adding a new feature (or want to change the icon for an existing one) you can look here to see what's available: https://coreui.io/icons/free","title":"ShinyCMS: admin-area menu icons"},{"location":"Developers/Notes/menu-icons/#shinycms-admin-area-menu-icons","text":"All of the icons I've used in the admin-area sidebar menu (and a few other places in the admin area) are part of the free icon set from CoreUI. If you're adding a new feature (or want to change the icon for an existing one) you can look here to see what's available: https://coreui.io/icons/free","title":"ShinyCMS: admin-area menu icons"},{"location":"Features/MainApp/Charts/","text":"ShinyCMS Features Charts and Dashboards ShinyCMS has Blazer built-in, so that you can build your own custom queries, charts, and dashboards. Demo content Currently there is not a default or demo dashboard (but it is on the TODO list). Plugin status This feature is likely to be moved into a plugin at some point.","title":"Charts"},{"location":"Features/MainApp/Charts/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/Charts/#charts-and-dashboards","text":"ShinyCMS has Blazer built-in, so that you can build your own custom queries, charts, and dashboards.","title":"Charts and Dashboards"},{"location":"Features/MainApp/Charts/#demo-content","text":"Currently there is not a default or demo dashboard (but it is on the TODO list).","title":"Demo content"},{"location":"Features/MainApp/Charts/#plugin-status","text":"This feature is likely to be moved into a plugin at some point.","title":"Plugin status"},{"location":"Features/MainApp/Comments/","text":"ShinyCMS Features Comments The comments feature can be enabled/disabled on blog and news posts in general, and also turned on or off for specific posts while generally enabled. Comments replies are properly nested, so you can clearly see who is replying to who. Comment posting has bot protection via reCAPTCHA , and spam-flagging via Akismet . Comments flagged as spam go into a moderation queue at /admin/comments. When comments in the queue are moderated, training data is generated and sent back to Akismet - to help them improve the accuracy of their service over time. Plugin status This feature will be moved into a plugin soon.","title":"Comments"},{"location":"Features/MainApp/Comments/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/Comments/#comments","text":"The comments feature can be enabled/disabled on blog and news posts in general, and also turned on or off for specific posts while generally enabled. Comments replies are properly nested, so you can clearly see who is replying to who. Comment posting has bot protection via reCAPTCHA , and spam-flagging via Akismet . Comments flagged as spam go into a moderation queue at /admin/comments. When comments in the queue are moderated, training data is generated and sent back to Akismet - to help them improve the accuracy of their service over time.","title":"Comments"},{"location":"Features/MainApp/Comments/#plugin-status","text":"This feature will be moved into a plugin soon.","title":"Plugin status"},{"location":"Features/MainApp/EmailStats/","text":"ShinyCMS Features Email stats Email open and click tracking is built-in, using Ahoy::Email to gather the data. By default these features are disabled for privacy reasons. You can enable them on the Site Settings page in the admin area. Even when click-tracking is enabled in the settings, clicks will not be tracked for emails whose links might contain 'sensitive' data - e.g. password reset emails - but you can track opens for these emails. Plugin status This feature is likely to be moved into a plugin at some point.","title":"Email Stats"},{"location":"Features/MainApp/EmailStats/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/EmailStats/#email-stats","text":"Email open and click tracking is built-in, using Ahoy::Email to gather the data. By default these features are disabled for privacy reasons. You can enable them on the Site Settings page in the admin area. Even when click-tracking is enabled in the settings, clicks will not be tracked for emails whose links might contain 'sensitive' data - e.g. password reset emails - but you can track opens for these emails.","title":"Email stats"},{"location":"Features/MainApp/EmailStats/#plugin-status","text":"This feature is likely to be moved into a plugin at some point.","title":"Plugin status"},{"location":"Features/MainApp/FeatureFlags/","text":"ShinyCMS Features Feature Flags Quickly and easily enable or disable CMS features (e.g. 'new user registrations') in the admin area. Rake task Feature flags can be checked and controlled on the command line too, via a rake task: rails shiny:features:list rails shiny:feature:off[user_registrations] Plugin status This feature would be the very last one to be converted into a plugin - after User Accounts and Site Settings .","title":"Feature Flags"},{"location":"Features/MainApp/FeatureFlags/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/FeatureFlags/#feature-flags","text":"Quickly and easily enable or disable CMS features (e.g. 'new user registrations') in the admin area.","title":"Feature Flags"},{"location":"Features/MainApp/FeatureFlags/#rake-task","text":"Feature flags can be checked and controlled on the command line too, via a rake task: rails shiny:features:list rails shiny:feature:off[user_registrations]","title":"Rake task"},{"location":"Features/MainApp/FeatureFlags/#plugin-status","text":"This feature would be the very last one to be converted into a plugin - after User Accounts and Site Settings .","title":"Plugin status"},{"location":"Features/MainApp/SiteSettings/","text":"ShinyCMS Features Site Settings Change most site settings from within the CMS admin area (e.g. 'allow anonymous comments') Allows you to specify which settings can be overridden by users - e.g. site_theme Plugin status This feature would be second from last to be converted into a plugin - after User Accounts but before Feature Flags .","title":"Site Settings"},{"location":"Features/MainApp/SiteSettings/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/SiteSettings/#site-settings","text":"Change most site settings from within the CMS admin area (e.g. 'allow anonymous comments') Allows you to specify which settings can be overridden by users - e.g. site_theme","title":"Site Settings"},{"location":"Features/MainApp/SiteSettings/#plugin-status","text":"This feature would be second from last to be converted into a plugin - after User Accounts but before Feature Flags .","title":"Plugin status"},{"location":"Features/MainApp/Tags/","text":"ShinyCMS Features Tags The tag features are powered by acts-as-taggable-on Plugin status This feature will probably be moved into a plugin at some point.","title":"Tags"},{"location":"Features/MainApp/Tags/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/Tags/#tags","text":"The tag features are powered by acts-as-taggable-on","title":"Tags"},{"location":"Features/MainApp/Tags/#plugin-status","text":"This feature will probably be moved into a plugin at some point.","title":"Plugin status"},{"location":"Features/MainApp/Upvotes/","text":"ShinyCMS Features Upvotes (AKA 'likes', '+1', etc) The upvote features are powered by ActsAsVotable . The gem also offers downvotes; ShinyCMS has separate settings to turn on just the upvote feature, or both upvotes and downvotes. ( TODO: should be a feature flag to turn on/off the whole voteable feature-set, and then a setting for 'allow_downvotes' ) Plugin status This feature will probably be moved into a plugin at some point.","title":"Upvotes"},{"location":"Features/MainApp/Upvotes/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/Upvotes/#upvotes","text":"(AKA 'likes', '+1', etc) The upvote features are powered by ActsAsVotable . The gem also offers downvotes; ShinyCMS has separate settings to turn on just the upvote feature, or both upvotes and downvotes. ( TODO: should be a feature flag to turn on/off the whole voteable feature-set, and then a setting for 'allow_downvotes' )","title":"Upvotes"},{"location":"Features/MainApp/Upvotes/#plugin-status","text":"This feature will probably be moved into a plugin at some point.","title":"Plugin status"},{"location":"Features/MainApp/UserAccounts/","text":"ShinyCMS Features User accounts User accounts handle authentication, registration, etc. They are powered by Devise . All of Devise's standard features are enabled by default, with the exception of Omniauth. ShinyCMS extends Devise to allow site users to identity themselves with either a username or an email address during login (as standard, Devise will only accept an email address). ShinyCMS also wraps Devise in its own feature flags code, allowing site admins with appropriate access to enable or disable the user logins and user registration features quickly and easily via either the CMS admin area on the website, or the feature flags rake task on the command-line. Plugin status User accounts may eventually be moved into a plugin (probably as a set of concerns and helpers that could be added to any site with Devise-powered authentication), but this isn't a high priority. The main app will remain necessary for some time just to handle user accounts, site settings , and feature flags . Profile pages User profile pages are handled by the ShinyProfiles plugin, not by the user account code in the main app, but separating these two sets of features is still a work in progress (the controllers and view templates are separate now, but the models and database tables are not).","title":"User Accounts"},{"location":"Features/MainApp/UserAccounts/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/UserAccounts/#user-accounts","text":"User accounts handle authentication, registration, etc. They are powered by Devise . All of Devise's standard features are enabled by default, with the exception of Omniauth. ShinyCMS extends Devise to allow site users to identity themselves with either a username or an email address during login (as standard, Devise will only accept an email address). ShinyCMS also wraps Devise in its own feature flags code, allowing site admins with appropriate access to enable or disable the user logins and user registration features quickly and easily via either the CMS admin area on the website, or the feature flags rake task on the command-line.","title":"User accounts"},{"location":"Features/MainApp/UserAccounts/#plugin-status","text":"User accounts may eventually be moved into a plugin (probably as a set of concerns and helpers that could be added to any site with Devise-powered authentication), but this isn't a high priority. The main app will remain necessary for some time just to handle user accounts, site settings , and feature flags .","title":"Plugin status"},{"location":"Features/MainApp/UserAccounts/#profile-pages","text":"User profile pages are handled by the ShinyProfiles plugin, not by the user account code in the main app, but separating these two sets of features is still a work in progress (the controllers and view templates are separate now, but the models and database tables are not).","title":"Profile pages"},{"location":"Features/MainApp/WebStats/","text":"ShinyCMS Features Web stats Recording of web traffic stats is built-in, using Ahoy to gather the data. By default these features are disabled for privacy reasons. You can enable them on the Site Settings page in the admin area. There are also some additional settings to enable/disable some GDPR/privacy-related features offered by Ahoy. Plugin status This feature is likely to be moved into a plugin at some point.","title":"Web Stats"},{"location":"Features/MainApp/WebStats/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/WebStats/#web-stats","text":"Recording of web traffic stats is built-in, using Ahoy to gather the data. By default these features are disabled for privacy reasons. You can enable them on the Site Settings page in the admin area. There are also some additional settings to enable/disable some GDPR/privacy-related features offered by Ahoy.","title":"Web stats"},{"location":"Features/MainApp/WebStats/#plugin-status","text":"This feature is likely to be moved into a plugin at some point.","title":"Plugin status"},{"location":"Features/MainApp/admin-features/","text":"ShinyCMS Features Admin features Admin area The CMS has an admin area, imaginatively located at https://{your-domain-name}/admin Any CMS feature (whether built-in or a plugin) that allows you update content or change settings will make itself available to you in this admin area - either by adding its own menu section, or by adding an item to the 'Other' menu section. Plugins appear in the admin menu in the order that they are loaded; this can be specified by setting SHINYCMS_PLUGINS in your .env.* files or Heroku config vars (otherwise, the default behaviour is for all plugins to be loaded, in alphabetical order). Admin toolbar If you are logged into a user account with suitable admin privileges, a toolbar will appear at the bottom of every page on the main sit. This toolbar will usually include some context-aware links to relevant admin features, allowing you to easily jump straight to the admin pages for the content you are currently looking at (assuming that you have the access to do so). Access Control List Access to all of the admin features is controlled by a fine-grain ACL. You can add/remove capabilities from an individual user on their Edit User page, granting or removing access to particular features or sets of features.","title":"Admin Features"},{"location":"Features/MainApp/admin-features/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/admin-features/#admin-features","text":"","title":"Admin features"},{"location":"Features/MainApp/admin-features/#admin-area","text":"The CMS has an admin area, imaginatively located at https://{your-domain-name}/admin Any CMS feature (whether built-in or a plugin) that allows you update content or change settings will make itself available to you in this admin area - either by adding its own menu section, or by adding an item to the 'Other' menu section. Plugins appear in the admin menu in the order that they are loaded; this can be specified by setting SHINYCMS_PLUGINS in your .env.* files or Heroku config vars (otherwise, the default behaviour is for all plugins to be loaded, in alphabetical order).","title":"Admin area"},{"location":"Features/MainApp/admin-features/#admin-toolbar","text":"If you are logged into a user account with suitable admin privileges, a toolbar will appear at the bottom of every page on the main sit. This toolbar will usually include some context-aware links to relevant admin features, allowing you to easily jump straight to the admin pages for the content you are currently looking at (assuming that you have the access to do so).","title":"Admin toolbar"},{"location":"Features/MainApp/admin-features/#access-control-list","text":"Access to all of the admin features is controlled by a fine-grain ACL. You can add/remove capabilities from an individual user on their Edit User page, granting or removing access to particular features or sets of features.","title":"Access Control List"},{"location":"Features/MainApp/mjml/","text":"ShinyCMS Features MJML email templates All of the emails generated by ShinyCMS are templated using MJML - a simple markup language that gets converted into responsive HTML email markup at the time of sending. The key advantage of using MJML is that the generated HTML is tailored according to the recipient's email address, compensating for known differences in HTML email rendering on some of the most popular webmail sites and email apps: * Gmail (Android, iPhone, and website) * Outlook (Android, iPhone, and website) and Outlook 365 * Android (default email client) * Apple Mail (OS X and iOS) * AOL Mail * Yahoo Mail More information You can read more about MJML on the MJML website . The MJML website also has some example templates , although unfortunately the licensing on them is not clear. ShinyCMS uses the mjml-rails gem to generate HTML emails from MJML markup, which in turn uses the Node MJML parser, so you'll also need to install that. In dev this is handled by yarn install , but on Heroku it means adding another buildpack - see the gem docs for helpful instructions .","title":"MJML"},{"location":"Features/MainApp/mjml/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/mjml/#mjml-email-templates","text":"All of the emails generated by ShinyCMS are templated using MJML - a simple markup language that gets converted into responsive HTML email markup at the time of sending. The key advantage of using MJML is that the generated HTML is tailored according to the recipient's email address, compensating for known differences in HTML email rendering on some of the most popular webmail sites and email apps: * Gmail (Android, iPhone, and website) * Outlook (Android, iPhone, and website) and Outlook 365 * Android (default email client) * Apple Mail (OS X and iOS) * AOL Mail * Yahoo Mail","title":"MJML email templates"},{"location":"Features/MainApp/mjml/#more-information","text":"You can read more about MJML on the MJML website . The MJML website also has some example templates , although unfortunately the licensing on them is not clear. ShinyCMS uses the mjml-rails gem to generate HTML emails from MJML markup, which in turn uses the Node MJML parser, so you'll also need to install that. In dev this is handled by yarn install , but on Heroku it means adding another buildpack - see the gem docs for helpful instructions .","title":"More information"},{"location":"Features/MainApp/pagination/","text":"ShinyCMS Features Pagination TODO: docs More information Pagination is powered by the kaminari gem; their docs have more details on how it works and how to customise the pagers on your main site, if you want to override the default pager partials.","title":"Pagination"},{"location":"Features/MainApp/pagination/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/pagination/#pagination","text":"TODO: docs","title":"Pagination"},{"location":"Features/MainApp/pagination/#more-information","text":"Pagination is powered by the kaminari gem; their docs have more details on how it works and how to customise the pagers on your main site, if you want to override the default pager partials.","title":"More information"},{"location":"Features/MainApp/soft-delete/","text":"ShinyCMS Features Soft Delete All ShinyCMS models have soft-delete built-in, with the exception of upvotes. When you delete an item via the web interface, or via the rails console, it is marked as deleted and no longer returned in results, but the data is still in your database (except for email addresses, which are obfuscated immediately when the record is marked as deleted). This means that in the event of deleting something that you later wish you hadn't deleted, it is possible to recover it in the console - by using the .with_deleted scope to search for it, and the .recover method to undelete it. More information Soft delete is powered by the ActsAsParanoid gem; their docs have more details on how it works and how to recover your data if you need to.","title":"Soft Delete"},{"location":"Features/MainApp/soft-delete/#shinycms-features","text":"","title":"ShinyCMS Features"},{"location":"Features/MainApp/soft-delete/#soft-delete","text":"All ShinyCMS models have soft-delete built-in, with the exception of upvotes. When you delete an item via the web interface, or via the rails console, it is marked as deleted and no longer returned in results, but the data is still in your database (except for email addresses, which are obfuscated immediately when the record is marked as deleted). This means that in the event of deleting something that you later wish you hadn't deleted, it is possible to recover it in the console - by using the .with_deleted scope to search for it, and the .recover method to undelete it.","title":"Soft Delete"},{"location":"Features/MainApp/soft-delete/#more-information","text":"Soft delete is powered by the ActsAsParanoid gem; their docs have more details on how it works and how to recover your data if you need to.","title":"More information"},{"location":"Features/Plugins/ShinyBlog/","text":"ShinyCMS Plugins ShinyBlog This plugin adds the normal blog features to a ShinyCMS site. Blog posts have titles, body text, tags, an author, and a posted date. They can be hidden, and they can be future-dated / scheduled. On the main site, you can view recent blog posts (the default) or view all posts in a specified month or year, as well as viewing individual posts. Integration with other CMS features Blog posts can have comment threads, provided by the Comments feature. You can choose to enable/disable these per-post, as well as setting the default for all new posts in your site settings .","title":"Blog"},{"location":"Features/Plugins/ShinyBlog/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyBlog/#shinyblog","text":"This plugin adds the normal blog features to a ShinyCMS site. Blog posts have titles, body text, tags, an author, and a posted date. They can be hidden, and they can be future-dated / scheduled. On the main site, you can view recent blog posts (the default) or view all posts in a specified month or year, as well as viewing individual posts.","title":"ShinyBlog"},{"location":"Features/Plugins/ShinyBlog/#integration-with-other-cms-features","text":"Blog posts can have comment threads, provided by the Comments feature. You can choose to enable/disable these per-post, as well as setting the default for all new posts in your site settings .","title":"Integration with other CMS features"},{"location":"Features/Plugins/ShinyForms/","text":"ShinyCMS Plugins ShinyForms This plugin provides some basic form handlers, allowing you to do things like 'send form content to site admin' when a form is submitted (useful for contact forms, order enquiries, etc).","title":"Forms"},{"location":"Features/Plugins/ShinyForms/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyForms/#shinyforms","text":"This plugin provides some basic form handlers, allowing you to do things like 'send form content to site admin' when a form is submitted (useful for contact forms, order enquiries, etc).","title":"ShinyForms"},{"location":"Features/Plugins/ShinyInserts/","text":"ShinyCMS Plugins ShinyInserts Reusable content fragments for inclusion in any template in any section of the main site Admin page Template tag <%= insert( :name_of_insert ) %>","title":"Inserts"},{"location":"Features/Plugins/ShinyInserts/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyInserts/#shinyinserts","text":"Reusable content fragments for inclusion in any template in any section of the main site","title":"ShinyInserts"},{"location":"Features/Plugins/ShinyInserts/#admin-page","text":"","title":"Admin page"},{"location":"Features/Plugins/ShinyInserts/#template-tag","text":"<%= insert( :name_of_insert ) %>","title":"Template tag"},{"location":"Features/Plugins/ShinyLists/","text":"ShinyCMS Plugins ShinyLists This plugin provides mailing list features (broadcast, not discussion). It is intended to be paired with ShinyNewsletters, for sending promotional emails. Double opt-in Stores details of exact consent given (GDPR) Allows users to manage their subscriptions online Identifies people without user accounts using a unique token included in their links Permanent 'do not contact' option","title":"Mailing Lists"},{"location":"Features/Plugins/ShinyLists/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyLists/#shinylists","text":"This plugin provides mailing list features (broadcast, not discussion). It is intended to be paired with ShinyNewsletters, for sending promotional emails. Double opt-in Stores details of exact consent given (GDPR) Allows users to manage their subscriptions online Identifies people without user accounts using a unique token included in their links Permanent 'do not contact' option","title":"ShinyLists"},{"location":"Features/Plugins/ShinyNews/","text":"ShinyCMS Plugins ShinyNews This plugin adds a news / press release section to a ShinyCMS site. News posts have titles, body text, tags, an author, and a posted date. They can be hidden, and they can be future-dated / scheduled. On the main site, you can view recent news posts (the default) or view all posts in a specified month or year, as well as viewing individual posts. Integration with other CMS features News posts can have comment threads, provided by the Comments feature. You can choose to enable/disable these per-post, as well as setting the default for all new posts in your site settings .","title":"News section"},{"location":"Features/Plugins/ShinyNews/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyNews/#shinynews","text":"This plugin adds a news / press release section to a ShinyCMS site. News posts have titles, body text, tags, an author, and a posted date. They can be hidden, and they can be future-dated / scheduled. On the main site, you can view recent news posts (the default) or view all posts in a specified month or year, as well as viewing individual posts.","title":"ShinyNews"},{"location":"Features/Plugins/ShinyNews/#integration-with-other-cms-features","text":"News posts can have comment threads, provided by the Comments feature. You can choose to enable/disable these per-post, as well as setting the default for all new posts in your site settings .","title":"Integration with other CMS features"},{"location":"Features/Plugins/ShinyNewsletters/","text":"ShinyCMS Plugins ShinyNewsletters This plugin adds the ability to send promotional HTML emails. It requires ShinyLists to be enabled too, to manage mailing lists and subscriptions. Build HTML mailshots based on MJML templates (provided by a theme or custom built for you) Simple admin interface to fill in the editable content areas in each edition Support for scheduling sends is not working yet, but 'send now' does.","title":"Newsletters"},{"location":"Features/Plugins/ShinyNewsletters/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyNewsletters/#shinynewsletters","text":"This plugin adds the ability to send promotional HTML emails. It requires ShinyLists to be enabled too, to manage mailing lists and subscriptions. Build HTML mailshots based on MJML templates (provided by a theme or custom built for you) Simple admin interface to fill in the editable content areas in each edition Support for scheduling sends is not working yet, but 'send now' does.","title":"ShinyNewsletters"},{"location":"Features/Plugins/ShinyPages/","text":"ShinyCMS Plugins ShinyPages This plugin provides content-managed 'brochure' pages, with layout controlled by page templates. Pages can be organised into sections or left at the top-level. Sections can also be organised into sections, to any depth. Menus are dynamically generated. Pages have defined content areas (headings, paragraphs, illustrative images, etc). These can be edited by site admins via an easy-to-use web UI. Layout and appearance of Pages is controlled by Page Templates. These can be provided by a theme or custom-built by a web developer/","title":"Pages"},{"location":"Features/Plugins/ShinyPages/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyPages/#shinypages","text":"This plugin provides content-managed 'brochure' pages, with layout controlled by page templates. Pages can be organised into sections or left at the top-level. Sections can also be organised into sections, to any depth. Menus are dynamically generated. Pages have defined content areas (headings, paragraphs, illustrative images, etc). These can be edited by site admins via an easy-to-use web UI. Layout and appearance of Pages is controlled by Page Templates. These can be provided by a theme or custom-built by a web developer/","title":"ShinyPages"},{"location":"Features/Plugins/ShinyProfiles/","text":"ShinyCMS Plugins ShinyProfiles The ShinyProfiles plugin displays a profile page for each registered user of a ShinyCMS site. This feature is primarily intended for use on sites that want to encourage interaction with and between their users (linking into features such as comments, forums, etc), to 'put faces to names'. It can also be used to power an 'our people' section on a company website. Work in progress! This feature was originally part of the user accounts feature in the main app, and separating them is still a work in progress. Currently the views and controllers are separate, but the models and database tables are not.","title":"Profile Pages"},{"location":"Features/Plugins/ShinyProfiles/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinyProfiles/#shinyprofiles","text":"The ShinyProfiles plugin displays a profile page for each registered user of a ShinyCMS site. This feature is primarily intended for use on sites that want to encourage interaction with and between their users (linking into features such as comments, forums, etc), to 'put faces to names'. It can also be used to power an 'our people' section on a company website.","title":"ShinyProfiles"},{"location":"Features/Plugins/ShinyProfiles/#work-in-progress","text":"This feature was originally part of the user accounts feature in the main app, and separating them is still a work in progress. Currently the views and controllers are separate, but the models and database tables are not.","title":"Work in progress!"},{"location":"Features/Plugins/ShinySearch/","text":"ShinyCMS Plugins ShinySearch This plugin provides the search feature for the main site. It has support for using a variety of backends to power the actual searching, but currently only the default search backend (pg_search) is implemented. This is powered by the pg_search gem. There is some stub code showing where support for Algolia (Search as a Service) could be added next, but no actual implementation. Integration with other features Models in other plugins (and the main app) can provide a template for rendering themselves as a search result, which this plugin will look for and use if/when that model comes up in the results for a search.","title":"Search"},{"location":"Features/Plugins/ShinySearch/#shinycms-plugins","text":"","title":"ShinyCMS Plugins"},{"location":"Features/Plugins/ShinySearch/#shinysearch","text":"This plugin provides the search feature for the main site. It has support for using a variety of backends to power the actual searching, but currently only the default search backend (pg_search) is implemented. This is powered by the pg_search gem. There is some stub code showing where support for Algolia (Search as a Service) could be added next, but no actual implementation.","title":"ShinySearch"},{"location":"Features/Plugins/ShinySearch/#integration-with-other-features","text":"Models in other plugins (and the main app) can provide a template for rendering themselves as a search result, which this plugin will look for and use if/when that model comes up in the results for a search.","title":"Integration with other features"},{"location":"Licensing/","text":"ShinyCMS: Licensing ShinyCMS is copyright 2009-2020 Denny de la Haye (https://denny.me) ShinyCMS is free software; you can redistribute it and/or modify it under the terms of the GPL (version 2 or later). There are copies of both v2 and v3 of the GPL included with the ShinyCMS code, or you can read them online: * GNU GPL v2 / https://opensource.org/licenses/gpl-2.0 * GNU GPL v3 / https://opensource.org/licenses/gpl-3.0 License terms for code from other projects ShinyCMS includes code from other open source and free software projects, which have their own licensing terms: CKEditor ShinyCMS currently uses CKEditor to provide WYSIWYG editing in the admin area. As of version 5, CKEditor is also licensed under the terms of the GPL, version 2.0 or later: https://ckeditor.com/legal/ckeditor-oss-license/ HTML5 UP: Halcyonic and Coming Soon themes The templates for the Halcyonic theme were built using the Halcyonic theme from HTML5 UP. The templates for the Coming Soon theme were built using the Eventually theme from HTML5 UP. Both of these HTML5 UP themes are licensed CC-BY-3.0 (Creative Commons Attribution 3.0 Unported): CC-BY-3.0 / https://html5up.net/license CoreUI admin template CoreUI is covered by the MIT license: MIT / https://opensource.org/licenses/MIT","title":"Licensing"},{"location":"Licensing/#shinycms-licensing","text":"ShinyCMS is copyright 2009-2020 Denny de la Haye (https://denny.me) ShinyCMS is free software; you can redistribute it and/or modify it under the terms of the GPL (version 2 or later). There are copies of both v2 and v3 of the GPL included with the ShinyCMS code, or you can read them online: * GNU GPL v2 / https://opensource.org/licenses/gpl-2.0 * GNU GPL v3 / https://opensource.org/licenses/gpl-3.0","title":"ShinyCMS: Licensing"},{"location":"Licensing/#license-terms-for-code-from-other-projects","text":"ShinyCMS includes code from other open source and free software projects, which have their own licensing terms:","title":"License terms for code from other projects"},{"location":"Licensing/#ckeditor","text":"ShinyCMS currently uses CKEditor to provide WYSIWYG editing in the admin area. As of version 5, CKEditor is also licensed under the terms of the GPL, version 2.0 or later: https://ckeditor.com/legal/ckeditor-oss-license/","title":"CKEditor"},{"location":"Licensing/#html5-up-halcyonic-and-coming-soon-themes","text":"The templates for the Halcyonic theme were built using the Halcyonic theme from HTML5 UP. The templates for the Coming Soon theme were built using the Eventually theme from HTML5 UP. Both of these HTML5 UP themes are licensed CC-BY-3.0 (Creative Commons Attribution 3.0 Unported): CC-BY-3.0 / https://html5up.net/license","title":"HTML5 UP: Halcyonic and Coming Soon themes"},{"location":"Licensing/#coreui-admin-template","text":"CoreUI is covered by the MIT license: MIT / https://opensource.org/licenses/MIT","title":"CoreUI admin template"},{"location":"Licensing/gnu-gpl-v2.0/","text":"GNU General Public License Version 2, June 1991 Copyright \u00a9 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \u201cProgram\u201d, below, refers to any such program or work, and a \u201cwork based on the Program\u201d means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \u201cmodification\u201d.) Each licensee is addressed as \u201cyou\u201d. Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \u201cany later version\u201d, you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than show w and show c ; they could even be mouse-clicks or menu items--whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker. <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License.","title":"Gnu gpl v2.0"},{"location":"Licensing/gnu-gpl-v2.0/#gnu-general-public-license","text":"Version 2, June 1991 Copyright \u00a9 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU General Public License"},{"location":"Licensing/gnu-gpl-v2.0/#preamble","text":"The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"Licensing/gnu-gpl-v2.0/#terms-and-conditions-for-copying-distribution-and-modification","text":"0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \u201cProgram\u201d, below, refers to any such program or work, and a \u201cwork based on the Program\u201d means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \u201cmodification\u201d.) Each licensee is addressed as \u201cyou\u201d. Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \u201cany later version\u201d, you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.","title":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION"},{"location":"Licensing/gnu-gpl-v2.0/#no-warranty","text":"11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS","title":"NO WARRANTY"},{"location":"Licensing/gnu-gpl-v2.0/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than show w and show c ; they could even be mouse-clicks or menu items--whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker. <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License.","title":"How to Apply These Terms to Your New Programs"},{"location":"Licensing/gnu-gpl-v3.0/","text":"GNU General Public License Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions \u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms \u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d. A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see < http://www.gnu.org/licenses/ >. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read < http://www.gnu.org/philosophy/why-not-lgpl.html >.","title":"Gnu gpl v3.0"},{"location":"Licensing/gnu-gpl-v3.0/#gnu-general-public-license","text":"Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU General Public License"},{"location":"Licensing/gnu-gpl-v3.0/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"Licensing/gnu-gpl-v3.0/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"Licensing/gnu-gpl-v3.0/#0-definitions","text":"\u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions"},{"location":"Licensing/gnu-gpl-v3.0/#1-source-code","text":"The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code"},{"location":"Licensing/gnu-gpl-v3.0/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions"},{"location":"Licensing/gnu-gpl-v3.0/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law"},{"location":"Licensing/gnu-gpl-v3.0/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies"},{"location":"Licensing/gnu-gpl-v3.0/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions"},{"location":"Licensing/gnu-gpl-v3.0/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms"},{"location":"Licensing/gnu-gpl-v3.0/#7-additional-terms","text":"\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms"},{"location":"Licensing/gnu-gpl-v3.0/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination"},{"location":"Licensing/gnu-gpl-v3.0/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies"},{"location":"Licensing/gnu-gpl-v3.0/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients"},{"location":"Licensing/gnu-gpl-v3.0/#11-patents","text":"A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d. A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents"},{"location":"Licensing/gnu-gpl-v3.0/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom"},{"location":"Licensing/gnu-gpl-v3.0/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License"},{"location":"Licensing/gnu-gpl-v3.0/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License"},{"location":"Licensing/gnu-gpl-v3.0/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty"},{"location":"Licensing/gnu-gpl-v3.0/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability"},{"location":"Licensing/gnu-gpl-v3.0/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16"},{"location":"Licensing/gnu-gpl-v3.0/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see < http://www.gnu.org/licenses/ >. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read < http://www.gnu.org/philosophy/why-not-lgpl.html >.","title":"How to Apply These Terms to Your New Programs"},{"location":"Licensing/mit/","text":"The MIT License (MIT) Copyright \u00a9 <year> <copyright holders> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"Licensing/mit/#the-mit-license-mit","text":"Copyright \u00a9 <year> <copyright holders> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"}]}
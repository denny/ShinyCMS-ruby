# frozen_string_literal: true

# ShinyCMS ~ https://shinycms.org
#
# Copyright 2009-2020 Denny de la Haye ~ https://denny.me
#
# ShinyCMS is free software; you can redistribute it and/or modify it under the terms of the GPL (version 2 or later)

# CircleCI config, for https://circleci.com/gh/denny/ShinyCMS-ruby

version: 2

references:
  app: &app
    image: circleci/ruby:2.7.2-node
    environment:
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      BUNDLE_PATH: ~/ShinyCMS/vendor/bundle
      DATABASE_URL: postgres://shinyuser:shinypass@127.0.0.1:5432/shinycms_test
      NODE_ENV: test
      RAILS_ENV: test
      SHINYCMS_THEME: TEST
  db: &db
    image: circleci/postgres:10-alpine-ram
    environment:
      POSTGRES_USER: shinyuser
      POSTGRES_PASSWORD: shinypass
      POSTGRES_DB: shinycms_test

jobs:
  # Install gems, node modules, etc
  install_dependencies:
    docker:
      - *app

    working_directory: ~/ShinyCMS

    steps:
      - checkout

      # Restore Ruby dependencies from cache, or install them
      - run:
          name: Install Bundler
          command: gem install bundler
      - restore_cache:
          keys:
          - bundler-cache-v6-{{ checksum "Gemfile.lock" }}
          - bundler-cache-v6-
      - run:
          name: Install gems
          command: bundle check || bundle install
      - save_cache:
          key: bundler-cache-v6-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/ShinyCMS/vendor/bundle

      # Restore Node dependencies from cache, or install them
      - restore_cache:
          keys:
            - yarn-cache-v6-{{ checksum "yarn.lock" }}
            - yarn-cache-v6-
      - run:
          name: Install Node modules
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: yarn-cache-v6-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules

      # Restore Webpacker assets from cache, or compile them
      - restore_cache:
          keys:
            - webpacker-cache-v6-{{ .Revision }}
      - run:
          name: Compile webpacker assets
          command: bundle exec rails assets:precompile

      - save_cache:
          key: webpacker-cache-v6-{{ .Revision }}
          paths:
            - ~/ShinyCMS/public/packs-test/

      # Install MJML binary
      - run:
          name: Install MJML binary
          command: npm install mjml

          # Save it all for use by the test runners
      - persist_to_workspace:
          root: ~/
          paths:
            - ShinyCMS
            - .cache/yarn

  # Check linting, check gems for known security issues
  rubocop_and_bundle_audit:
    docker:
      - *app

    working_directory: ~/ShinyCMS

    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: Rubocop
          command: bundle exec rubocop app/ config/ db/ lib/ plugins/ spec/

      - run:
          name: Audit Gemfile bundle for security issues
          command: bundle exec bundle-audit check --update

  # Run rspec tests, for main app and plugins
  rspec:
    docker:
      - *app
      - *db

    working_directory: ~/ShinyCMS
    parallelism: 3

    steps:
      - attach_workspace:
          at: ~/

      # Database setup (one for each test runner, to avoid nasty collisions)
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Load database schema
          command: bundle exec rails db:schema:load

      # Run tests!
      - run:
          name: Run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES=$( circleci tests glob "spec/**/*_spec.rb" "plugins/*/spec/**/*_spec.rb" | circleci tests split --split-by=filesize )
            bundle exec rspec $TEST_FILES \
              --profile 10 \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress

      # Store test results for CodeCov
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

# Run everything
workflows:
  version: 2
  setup_and_test:
    jobs:
      - install_dependencies
      - rubocop_and_bundle_audit:
          requires:
            - install_dependencies
      - rspec:
          requires:
            - install_dependencies
